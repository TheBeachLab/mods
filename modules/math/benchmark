//
// benchmark
//
// Neil Gershenfeld 
// (c) Massachusetts Institute of Technology 2016
// 
// This work may be reproduced, modified, distributed, performed, and 
// displayed for any purpose, but must acknowledge the mods
// project. Copyright is retained and must be preserved. The work is 
// provided as is; no warranty is provided, and users accept all 
// liability.
//
// closure
//
(function(){
//
// module globals
//
var mod = {}
//
// name
//
var name = 'benchmark'
//
// initialization
//
var init = function() {
   mod.terms.value = '1e8'
   }
//
// inputs
//
var inputs = {
   start:{type:'event',
      event:function(evt){
         benchmark()}}}
//
// outputs
//
var outputs = {
   }
//
// interface
//
var interface = function(div){
   mod.div = div
   div.appendChild(document.createTextNode('terms to sum: '))
   var input = document.createElement('input')
      input.type = 'text'
      input.size = 6
      div.appendChild(input)
      mod.terms = input
   div.appendChild(document.createElement('br'))
   var btn = document.createElement('button')
      btn.style.padding = mods.ui.padding
      btn.style.margin = 1
      var text = document.createTextNode('calculate pi')
         mod.label = text
         btn.appendChild(text)
      btn.addEventListener('click',function() {
         benchmark()
         })
      mod.button = btn
      div.appendChild(btn)
   div.appendChild(document.createElement('br'))
   var text = document.createTextNode('value: ')
      div.appendChild(text)
      mod.value = text
   div.appendChild(document.createElement('br'))
   var text = document.createTextNode('time (s): ')
      div.appendChild(text)
      mod.time = text
   div.appendChild(document.createElement('br'))
   var text = document.createTextNode('Mflops: ')
      div.appendChild(text)
      mod.mflops = text
   }
//
// local functions
//
function benchmark() {
   mod.label.nodeValue = 'calculating'
   var blob = new Blob(['('+worker.toString()+'())'])
   var url = window.URL.createObjectURL(blob)
   var webworker = new Worker(url)
   webworker.addEventListener('message',function(evt) {
      window.URL.revokeObjectURL(url)
      var pi = evt.data.pi.toFixed(6)
      mod.value.nodeValue = 'value: '+pi
      var sec = evt.data.dt/1000
      mod.time.nodeValue = 'time (s): '+sec
      var mflops = 5*terms/(sec*1e6)
      mod.mflops.nodeValue = 'Mflops: '+mflops.toFixed(0)
      mod.label.nodeValue = 'calculate pi'
      webworker.terminate()
      })
   var terms = parseFloat(mod.terms.value)
   webworker.postMessage({terms:terms})
   }
function worker() {
   self.addEventListener('message',function(evt) {
      var terms = evt.data.terms
      var pi = 0
      var tstart = Date.now()
      for (var term = 1; term < terms; ++term)
         pi += 0.5/((term-0.75)*(term-0.25))
      var tend = Date.now()
      dt = tend-tstart
      self.postMessage({pi:pi,dt:dt})
      })
   }
//
// return values
//
return ({
   name:name,
   init:init,
   inputs:inputs,
   outputs:outputs,
   interface:interface
   })
}())
