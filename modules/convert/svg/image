//
// convert SVG image
//
// Neil Gershenfeld 
// (c) Massachusetts Institute of Technology 2016
// 
// This work may be reproduced, modified, distributed, performed, and 
// displayed for any purpose, but must acknowledge the mods
// project. Copyright is retained and must be preserved. The work is 
// provided as is; no warranty is provided, and users accept all 
// liability.
//
// closure
//
(function(){
//
// module globals
//
var mod = {}
//
// name
//
var name = 'convert SVG image'
//
// initialization
//
var init = function() {
   mod.dpi.value = 100
   }
//
// inputs
//
var inputs = {
   SVG:{type:'string',
      event:function(evt){
         mod.svg = evt.detail
         get_size()
         draw_image()}}}
//
// outputs
//
var outputs = {
   image:{type:'RGBA',
      event:function(){
         var ctx = mod.img.getContext("2d")
         var img = ctx.getImageData(0,0,mod.img.width,mod.img.height)
         mods.output(mod,'image',img)}},
   imageInfo:{type:'object',
      event:function(){
         var obj = {}
         obj.name = "SVG image"
         obj.dpi = parseFloat(mod.dpi.value)
         obj.width = mod.img.width
         obj.height = mod.img.height
         mods.output(mod,'imageInfo',obj)}}}
//
// interface
//
var interface = function(div){
   mod.div = div
   //
   // on-screen drawing canvas
   //
   var canvas = document.createElement('canvas')
      canvas.width = mods.ui.canvas
      canvas.height = mods.ui.canvas
      canvas.style.backgroundColor = 'rgb(255,255,255)'
      div.appendChild(canvas)
      mod.canvas = canvas
   div.appendChild(document.createElement('br'))
   //
   // off-screen image canvas
   //
   var canvas = document.createElement('canvas')
      mod.img = canvas
   //
   // view button
   //
   var btn = document.createElement('button')
      btn.style.padding = mods.ui.padding
      btn.style.margin = 1
      btn.appendChild(document.createTextNode('view'))
      btn.addEventListener('click',function(){
         var win = window.open('')
         var btn = document.createElement('button')
            btn.appendChild(document.createTextNode('close'))
            btn.style.padding = mods.ui.padding
            btn.style.margin = 1
            btn.addEventListener('click',function(){
               win.close()
               })
            win.document.body.appendChild(btn)
         win.document.body.appendChild(document.createElement('br'))
         var canvas = document.createElement('canvas')
            canvas.width = mod.img.width
            canvas.height = mod.img.height
            win.document.body.appendChild(canvas)
         var ctx = canvas.getContext("2d")
            ctx.drawImage(mod.img,0,0)
         })
      div.appendChild(btn)
   //
   // dpi
   //
   div.appendChild(document.createElement('br'))
   div.appendChild(document.createTextNode('dpi: '))
   var input = document.createElement('input')
      input.type = 'text'
      input.size = 6
      input.addEventListener('change',function(){
         draw_image()
         })
      div.appendChild(input)
      mod.dpi = input
   div.appendChild(document.createTextNode(' (enter)'))
   //
   // units
   //
   div.appendChild(document.createElement('br'))
   div.appendChild(document.createTextNode('units: '))
   var input = document.createElement('input')
      input.type = 'text'
      input.size = 6
      input.addEventListener('change',function(){
         draw_image()
         })
      div.appendChild(input)
      mod.unitstext = input
   div.appendChild(document.createTextNode(' (enter)'))
   //
   // size
   //
   div.appendChild(document.createElement('br'))
   var text = document.createTextNode('image size:')
      div.appendChild(text)
   div.appendChild(document.createElement('br'))
   var text = document.createTextNode('(pixels)')
      div.appendChild(text)
      mod.pixels = text
   div.appendChild(document.createElement('br'))
   var text = document.createTextNode('(inches)')
      div.appendChild(text)
      mod.inches = text
   div.appendChild(document.createElement('br'))
   var text = document.createTextNode('(mm)')
      div.appendChild(text)
      mod.mm = text
   }
//
// local functions
//
// get size
//
function get_size() {
   var i = mod.svg.indexOf("width")
   if (i == -1) {
      var width = 1
      var height = 1
      var units = 90
      }
   else {
      var i1 = mod.svg.indexOf("\"",i+1)
      var i2 = mod.svg.indexOf("\"",i1+1)
      var width = mod.svg.substring(i1+1,i2)
      i = mod.svg.indexOf("height")
      i1 = mod.svg.indexOf("\"",i+1)
      i2 = mod.svg.indexOf("\"",i1+1)
      var height = mod.svg.substring(i1+1,i2)
      ih = mod.svg.indexOf("height")
      if (width.indexOf("px") != -1) {
         width = width.slice(0,-2)
         height = height.slice(0,-2)
         var units = 90
         }
      else if (width.indexOf("mm") != -1) {
         width = width.slice(0,-2)
         height = height.slice(0,-2)
         var units = 25.4
         }
      else if (width.indexOf("cm") != -1) {
         width = width.slice(0,-2)
         height = height.slice(0,-2)
         var units = 2.54
         }
      else if (width.indexOf("in") != -1) {
         width = width.slice(0,-2)
         height = height.slice(0,-2)
         var units = 1
         }
      else {
         var units = 90
         }
      }
   mod.width = parseFloat(width)
   mod.height = parseFloat(height)
   mod.units = units
   mod.unitstext.value = units
   }
//
// draw image
//
function draw_image() {
   var dpi = parseFloat(mod.dpi.value)
   var units = parseFloat(mod.unitstext.value)
   var width = parseInt(dpi*mod.width/units)
   var height = parseInt(dpi*mod.height/units)
   mod.pixels.nodeValue = width+' x '+height+" (pixels)"
   mod.inches.nodeValue = (width/dpi).toFixed(3)+' x '+(height/dpi).toFixed(3)+" (inches)"
   mod.mm.nodeValue = (25.4*width/dpi).toFixed(3)+' x '+(25.4*height/dpi).toFixed(3)+" (mm)"
   var src = "data:image/svg+xml;base64,"+window.btoa(mod.svg)
   var img = new Image()
   img.setAttribute("src",src)
   img.onload = function() {
      if (width > height) {
         var x0 = 0
         var y0 = mod.canvas.height*.5*(1-height/width)
         var w = mod.canvas.width
         var h = mod.canvas.width*height/width
         }
      else {
         var x0 = mod.canvas.width*.5*(1-width/height)
         var y0 = 0
         var w = mod.canvas.height*width/height
         var h = mod.canvas.height
         }
      mod.img.width = width
      mod.img.height = height
      var ctx = mod.img.getContext("2d")
         ctx.clearRect(0,0,width,height)
         ctx.drawImage(img,0,0,width,height)
      var ctx = mod.canvas.getContext("2d")
         ctx.clearRect(0,0,mod.canvas.width,mod.canvas.height)
         ctx.drawImage(mod.img,x0,y0,w,h)
      outputs.image.event()
      outputs.imageInfo.event()
      }
   }
//
// return values
//
return ({
   mod:mod,
   name:name,
   init:init,
   inputs:inputs,
   outputs:outputs,
   interface:interface
   })
}())
