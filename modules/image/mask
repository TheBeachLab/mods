//
// image mask
//
// Neil Gershenfeld 
// (c) Massachusetts Institute of Technology 2017
// 
// This work may be reproduced, modified, distributed, performed, and 
// displayed for any purpose, but must acknowledge the mods
// project. Copyright is retained and must be preserved. The work is 
// provided as is; no warranty is provided, and users accept all 
// liability.
//
// closure
//
(function(){
//
// module globals
//
var mod = {}
//
// name
//
var name = 'image mask'
//
// initialization
//
var init = function() {
   }
//
// inputs
//
var inputs = {
   imageInfo:{type:'object',
      event:function(evt){
         mod.imageInfo = evt.detail
         }},
   image:{type:'RGBA',
      event:function(evt){
         mod.image = evt.detail
         mod.labelspan.style.fontWeight = 'bold'         
         }},
   palette:{type:'text',
      event:function(evt){
         mod.palette = JSON.parse(evt.detail)
         }},
   path:{type:'array',
      event:function(evt){
         make_mask(evt.detail)
         }}}
//
// outputs
//
var outputs = {
   image:{type:'RGBA',
      event:function(){
         mods.output(mod,'image',mod.image)
         }},
   color:{type:'RGB',
      event:function(evt){
         mods.output(mod,'color',evt)
         }},
   SVG:{type:'file',
      event:function(evt){
         mods.output(mod,'SVG',evt)
         }}}
//
// interface
//
var interface = function(div){
   mod.div = div
   var btn = document.createElement('button')
      btn.style.padding = mods.ui.padding
      btn.style.margin = 1
      var span = document.createElement('span')
         var text = document.createTextNode('calculate masks')
            mod.label = text
            span.appendChild(text)
         mod.labelspan = span
         btn.appendChild(span)
      btn.addEventListener('click',function(){
         mod.index = 0
         outputs.color.event(mod.palette[mod.index])
         outputs.image.event()
         })
      div.appendChild(btn)
   div.appendChild(document.createElement('br'))
   }
//
// local functions
//
//
// make_mask
//
function make_mask(path) {
   //
   // save mask
   //
   save_mask(path)
   //
   // check for next mask
   //
   if (mod.index < (mod.palette.length-1)) {
      //
      // yes, output
      //
      mod.index += 1
      outputs.color.event(mod.palette[mod.index])
      outputs.image.event()
      }
   else {
      //
      // no, done
      //
      mod.labelspan.style.fontWeight = 'normal' 
      }        
   }
//
// save_mask
//
function save_mask(path) {
   var imgwidth = mod.image.width/parseFloat(mod.imageInfo.dpi)
   var imgheight = mod.image.height/parseFloat(mod.imageInfo.dpi)
   var svgNS = "http://www.w3.org/2000/svg"
   var svg = document.createElementNS(svgNS,"svg")
      svg.setAttributeNS("http://www.w3.org/2000/xmlns/",
         "xmlns:xlink","http://www.w3.org/1999/xlink")
      svg.setAttribute('width',(3+imgwidth)+'in')
      svg.setAttribute('height',(3+imgheight)+'in')
      svg.style.backgroundColor = 'rgb(255,255,255)'
      svg.setAttribute('viewBox','0 0 '+(3+imgwidth)+' '+(3+imgheight))
   var rect = document.createElementNS(svgNS,'rect')
      rect.setAttribute('x','0')
      rect.setAttribute('y','0')
      rect.setAttribute('width',3+imgwidth)
      rect.setAttribute('height',3+imgheight)
      rect.setAttribute('stroke','none')
      rect.setAttribute('fill','white')
      svg.appendChild(rect)
   var g = document.createElementNS(svgNS,'g')
      svg.appendChild(g)
   var polyline = document.createElementNS(svgNS,'polyline')
      polyline.setAttribute('stroke','red')
      polyline.setAttribute('stroke-width','0.01')
      polyline.setAttribute('stroke-linecap','round')
      polyline.setAttribute('fill','none')
      polyline.setAttribute('points','0.5,0.5 '+
         '0.5,'+(imgheight+2.5)+' '+
         (imgwidth+2.5)+','+(imgheight+2.5)+' '+
         (imgwidth+2.5)+',0.9 '+
         (imgwidth+2.1)+',0.5 '+
         '0.5,0.5')
      g.appendChild(polyline)
   var circle = document.createElementNS(svgNS,'circle')
      circle.setAttribute('cx','1')
      circle.setAttribute('cy','1')
      circle.setAttribute('r','0.125')
      circle.setAttribute('stroke','red')
      circle.setAttribute('stroke-width','0.01')
      circle.setAttribute('fill','none')
      g.appendChild(circle)
   var circle = document.createElementNS(svgNS,'circle')
      circle.setAttribute('cx','1')
      circle.setAttribute('cy',(2+imgheight))
      circle.setAttribute('r','0.125')
      circle.setAttribute('stroke','red')
      circle.setAttribute('stroke-width','0.01')
      circle.setAttribute('fill','none')
      g.appendChild(circle)
   var circle = document.createElementNS(svgNS,'circle')
      circle.setAttribute('cx',(2+imgwidth))
      circle.setAttribute('cy',(2+imgheight))
      circle.setAttribute('r','0.125')
      circle.setAttribute('stroke','red')
      circle.setAttribute('stroke-width','0.01')
      circle.setAttribute('fill','none')
      g.appendChild(circle)
   var circle = document.createElementNS(svgNS,'circle')
      circle.setAttribute('cx',(2+imgwidth))
      circle.setAttribute('cy','1')
      circle.setAttribute('r','0.125')
      circle.setAttribute('stroke','red')
      circle.setAttribute('stroke-width','0.01')
      circle.setAttribute('fill','none')
      g.appendChild(circle)
   var name = mod.imageInfo.name+'.'+mod.palette[mod.index][0]
   name += '.'+mod.palette[mod.index][1]
   name += '.'+mod.palette[mod.index][2]
   if (mod.palette[mod.index][3] != undefined)
      name += '.'+mod.palette[mod.index][3]
   var text = document.createElementNS(svgNS,'text')
      text.setAttribute('id',mod.div.id+'svgtext')
      text.setAttribute('x',(3+imgwidth)/2)
      text.setAttribute('y','1')
      text.setAttribute('fill','red')
      text.setAttribute('font-size','.5')
      text.setAttribute('text-anchor','middle')
      text.setAttribute('dy','.2')
      text.textContent = name
      svg.appendChild(text)
   var obj = {}
   obj.type = 'file'
   obj.name = name+'.svg'
   var xml = new XMLSerializer().serializeToString(svg)
   obj.contents = xml
   outputs.SVG.event(obj)

   /*
   var html = svg.outerHTML
   var blob = new Blob([html],{type:"image/svg+xml;charset=utf-8"})
   var url = URL.createObjectURL(blob)

<svg xmlns:xlink="http://www.w3.org/1999/xlink" width="20.775555833298615in" height="17.22044466663889in" viewBox="0 0 20.775555833298615 17.22044466663889" style="background-color: rgb(255, 255, 255);">

<rect x="0" y="0" width="20.775555833298615" height="17.22044466663889" stroke="none" fill="white">
</rect>

<g>
<polyline stroke="red" stroke-width="0.01" stroke-linecap="round" fill="none" points="0.5,0.5 0.5,16.72044466663889 20.275555833298615,16.72044466663889 20.275555833298615,0.9 19.875555833298616,0.5 0.5,0.5"></polyline>
<circle cx="1" cy="1" r="0.125" stroke="red" stroke-width="0.01" fill="none"></circle>
<circle cx="1" cy="16.22044466663889" r="0.125" stroke="red" stroke-width="0.01" fill="none"></circle>
<circle cx="19.775555833298615" cy="16.22044466663889" r="0.125" stroke="red" stroke-width="0.01" fill="none"></circle>
<circle cx="19.775555833298615" cy="1" r="0.125" stroke="red" stroke-width="0.01" fill="none"></circle>
</g>

<text id="{&quot;id&quot;:&quot;0.5742729124908725&quot;,&quot;type&quot;:&quot;interface&quot;}svgtext" x="10.387777916649307" y="1" fill="red" font-size=".5" text-anchor="middle" dy=".2">vector
</text>

<polyline stroke="none" fill="black" points="3,12 6,7 9,12 3,12">
</polyline>

<polyline stroke="none" fill="black" points="12,12 12,7 18,7 18,12 12,12">
</polyline>

</svg>

   */
   }
//
// return values
//
return ({
   name:name,
   init:init,
   inputs:inputs,
   outputs:outputs,
   interface:interface
   })
}())

