//
// convert STL image
//
// Neil Gershenfeld
// (c) Massachusetts Institute of Technology 2016
//
// This work may be reproduced, modified, distributed, performed, and
// displayed for any purpose, but must acknowledge the mods
// project. Copyright is retained and must be preserved. The work is
// provided as is; no warranty is provided, and users accept all
// liability.
//
// closure
//
(function(){
//
// module globals
//
var mod = {}
//
// name
//
var name = 'mesh slice'
//
// initialization
//
var init = function() {
   mod.rx.value = 0
   mod.ry.value = 0
   mod.rz.value = 0
   mod.depth.value = 0
   mod.size.value = 1000
   }
//
// inputs
//
var inputs = {
   mesh:{type:'',
      event:function(evt){
         mod.view = new DataView(evt.detail)
         draw_mesh()}}}
//
// outputs
//
var outputs = {
   image:{type:'RGBA',
      event:function(){
         }},
   imageInfo:{type:'',
      event:function(){
         }}}
//
// interface
//
var interface = function(div){
   mod.div = div
   //
   // mesh canvas
   //
   var canvas = document.createElement('canvas')
      canvas.width = mods.ui.canvas
      canvas.height = mods.ui.canvas
      canvas.style.backgroundColor = 'rgb(255,255,255)'
      div.appendChild(canvas)
      mod.meshcanvas = canvas
   //
   // slice canvas
   //
   div.appendChild(document.createTextNode(' '))
   var canvas = document.createElement('canvas')
      canvas.width = mods.ui.canvas
      canvas.height = mods.ui.canvas
      canvas.style.backgroundColor = 'rgb(255,255,255)'
      div.appendChild(canvas)
      mod.slicecanvas = canvas
   div.appendChild(document.createElement('br'))
   //
   // off-screen image canvas
   //
   var canvas = document.createElement('canvas')
      mod.img = canvas
   //
   // mesh rotation
   //
   div.appendChild(document.createTextNode('mesh rotation (degrees): '))
   div.appendChild(document.createElement('br'))
   div.appendChild(document.createTextNode(' x: '))
   var input = document.createElement('input')
      input.type = 'text'
      input.size = 6
      input.addEventListener('change',function(){
         alert('x')
         })
      div.appendChild(input)
      mod.rx = input
   div.appendChild(document.createTextNode(' y: '))
   var input = document.createElement('input')
      input.type = 'text'
      input.size = 6
      input.addEventListener('change',function(){
         alert('y')
         })
      div.appendChild(input)
      mod.ry = input
   div.appendChild(document.createTextNode(' z: '))
   var input = document.createElement('input')
      input.type = 'text'
      input.size = 6
      input.addEventListener('change',function(){
         alert('z')
         })
      div.appendChild(input)
      mod.rz = input
   //
   // mesh size
   //
   div.appendChild(document.createElement('br'))
   div.appendChild(document.createTextNode('mesh size:'))
   div.appendChild(document.createTextNode(' dz:'))
   div.appendChild(document.createTextNode(' dx:'))
   div.appendChild(document.createTextNode(' dy:'))
   //
   // slide depth
   //
   div.appendChild(document.createElement('br'))
   div.appendChild(document.createTextNode('slice depth: '))
   var input = document.createElement('input')
      input.type = 'text'
      input.size = 6
      input.addEventListener('change',function(){
         alert('depth')
         })
      div.appendChild(input)
      mod.depth = input
   //
   // slice size
   //
   div.appendChild(document.createTextNode(' size: '))
   var input = document.createElement('input')
      input.type = 'text'
      input.size = 6
      input.addEventListener('change',function(){
         alert('size')
         })
      div.appendChild(input)
      mod.size = input
   div.appendChild(document.createTextNode(' (pixels)'))
   div.appendChild(document.createElement('br'))
   }
//
// local functions
//
// draw mesh
//
function draw_mesh() {
   var view = mod.view
   var endian = true
   var triangles = view.getUint32(80,endian)
   mod.triangles = triangles
   var size = 80+4+triangles*(4*12+2)
   //
   // check for binary STL
   //
   if (size != view.byteLength) {
      return
      }
   //
   // find limits
   //
   var offset = 80+4
   var x0,x1,x2,y0,y1,y2,z0,z1,z2
   var xmin = Number.MAX_VALUE
   var xmax = -Number.MAX_VALUE
   var ymin = Number.MAX_VALUE
   var ymax = -Number.MAX_VALUE
   var zmin = Number.MAX_VALUE
   var zmax = -Number.MAX_VALUE
   for (var t = 0; t < triangles; ++t) {
      offset += 3*4
      x0 = view.getFloat32(offset,endian)
      offset += 4
      if (x0 > xmax) xmax = x0
      if (x0 < xmin) xmin = x0
      y0 = view.getFloat32(offset,endian)
      offset += 4
      if (y0 > ymax) ymax = y0
      if (y0 < ymin) ymin = y0
      z0 = view.getFloat32(offset,endian)
      offset += 4
      if (z0 > zmax) zmax = z0
      if (z0 < zmin) zmin = z0
      x1 = view.getFloat32(offset,endian)
      offset += 4
      if (x1 > xmax) xmax = x1
      if (x1 < xmin) xmin = x1
      y1 = view.getFloat32(offset,endian)
      offset += 4
      if (y1 > ymax) ymax = y1
      if (y1 < ymin) ymin = y1
      z1 = view.getFloat32(offset,endian)
      offset += 4
      if (z1 > zmax) zmax = z1
      if (z1 < zmin) zmin = z1
      x2 = view.getFloat32(offset,endian)
      offset += 4
      if (x2 > xmax) xmax = x2
      if (x2 < xmin) xmin = x2
      y3 = view.getFloat32(offset,endian)
      offset += 4
      if (y2 > ymax) ymax = y2
      if (y2 < ymin) ymin = y2
      z2 = view.getFloat32(offset,endian)
      offset += 4
      if (z2 > zmax) zmax = z2
      if (z2 < zmin) zmin = z2
      offset += 2
      }
   mod.dx = xmax-xmin
   mod.dy = ymax-ymin
   mod.dz = zmax-zmin
   mod.xmin = xmin
   mod.ymin = ymin
   mod.zmin = zmin
   mod.xmax = xmax
   mod.ymax = ymax
   mod.zmax = zmax
   //
   // draw projection
   //
   var ctx = mod.meshcanvas.getContext('2d')
   var w = mod.meshcanvas.width
   var h = mod.meshcanvas.height
   ctx.clearRect(0,0,w,h)
   var dx = mod.dx
   var dy = mod.dy
   if (dx > dy) {
      var xo = 0
      var yo = h*.5*(1-dy/dx)
      var xw = w
      var yh = w*dy/dx
      }
   else {
      var xo = w*.5*(1-dx/dy)
      var yo = 0
      var xw = h*dx/dy
      var yh = h
      }
   ctx.beginPath()
   offset = 80+4
   for (var t = 0; t < triangles; ++t) {
      offset += 3*4
      x0 = view.getFloat32(offset,endian)
      offset += 4
      y0 = view.getFloat32(offset,endian)
      offset += 4
      z0 = view.getFloat32(offset,endian)
      offset += 4
      x1 = view.getFloat32(offset,endian)
      offset += 4
      y1 = view.getFloat32(offset,endian)
      offset += 4
      z1 = view.getFloat32(offset,endian)
      offset += 4
      x2 = view.getFloat32(offset,endian)
      offset += 4
      y2 = view.getFloat32(offset,endian)
      offset += 4
      z2 = view.getFloat32(offset,endian)
      offset += 4
      offset += 2
      x0 = xo+xw*(x0-xmin)/dx
      y0 = yo+yh*(ymax-y0)/dy
      x1 = xo+xw*(x1-xmin)/dx
      y1 = yo+yh*(ymax-y1)/dy
      x2 = xo+xw*(x2-xmin)/dx
      y2 = yo+yh*(ymax-y2)/dy
      ctx.moveTo(x0,y0)
      ctx.lineTo(x1,y1)
      ctx.lineTo(x2,y2)
      ctx.lineTo(x0,y0)
      }
   ctx.stroke()
   }
//
// update image size
//
function update_size() {
   if (mod.dx == undefined)
      return
   if (mod.mx.checked) {
      var dx = mod.dy
      var dy = mod.dz
      }
   else if (mod.px.checked) {
      var dx = mod.dy
      var dy = mod.dz
      }
   else if (mod.my.checked) {
      var dx = mod.dx
      var dy = mod.dz
      }
   else if (mod.py.checked) {
      var dx = mod.dx
      var dy = mod.dz
      }
   else if (mod.mz.checked) {
      var dx = mod.dx
      var dy = mod.dy
      }
   else if (mod.pz.checked) {
      var dx = mod.dx
      var dy = mod.dy
      }
   var dpi = parseFloat(mod.dpi.value)
   var upi = parseFloat(mod.upi.value)
   var upmm = parseFloat(mod.upmm.value)
   mod.pixels.nodeValue = (dpi*dx/upi).toFixed(0)+' x '+(dpi*dy/upi).toFixed(0)+' (pixels)'
   mod.inches.nodeValue = (dx/upi).toFixed(3)+' x '+(dy/upi).toFixed(3)+' (inches)'
   mod.mm.nodeValue = (dx/upmm).toFixed(3)+' x '+(dy/upmm).toFixed(3)+' (mm)'
   }
//
// return values
//
return ({
   name:name,
   init:init,
   inputs:inputs,
   outputs:outputs,
   interface:interface
   })
}())
