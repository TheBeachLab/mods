//
// mesh slice
//
// Neil Gershenfeld
// (c) Massachusetts Institute of Technology 2017
//
// This work may be reproduced, modified, distributed, performed, and
// displayed for any purpose, but must acknowledge the mods
// project. Copyright is retained and must be preserved. The work is
// provided as is; no warranty is provided, and users accept all
// liability.
//
// closure
//
(function(){
//
// module globals
//
var mod = {}
//
// name
//
var name = 'mesh slice (under development)'
//
// initialization
//
var init = function() {
   mod.rx.value = 0
   mod.ry.value = 0
   mod.rz.value = 0
   mod.depth.value = 0
   mod.width.value = 1000
   }
//
// inputs
//
var inputs = {
   mesh:{type:'',
      event:function(evt){
         mod.mesh = new DataView(evt.detail)
         draw_mesh()}}}
//
// outputs
//
var outputs = {
   image:{type:'RGBA',
      event:function(){
         }},
   sliceInfo:{type:'',
      event:function(){
         }}}
//
// interface
//
var interface = function(div){
   mod.div = div
   //
   // mesh canvas
   //
   var canvas = document.createElement('canvas')
      canvas.width = mods.ui.canvas
      canvas.height = mods.ui.canvas
      canvas.style.backgroundColor = 'rgb(255,255,255)'
      div.appendChild(canvas)
      mod.meshcanvas = canvas
   //
   // slice canvas
   //
   div.appendChild(document.createTextNode(' '))
   var canvas = document.createElement('canvas')
      canvas.width = mods.ui.canvas
      canvas.height = mods.ui.canvas
      canvas.style.backgroundColor = 'rgb(255,255,255)'
      div.appendChild(canvas)
      mod.slicecanvas = canvas
   div.appendChild(document.createElement('br'))
   //
   // off-screen image canvas
   //
   var canvas = document.createElement('canvas')
      mod.img = canvas
   //
   // mesh rotation
   //
   div.appendChild(document.createTextNode('mesh rotation (degrees): '))
   div.appendChild(document.createElement('br'))
   div.appendChild(document.createTextNode(' x: '))
   var input = document.createElement('input')
      input.type = 'text'
      input.size = 6
      input.addEventListener('change',function(){
         draw_mesh()
         })
      div.appendChild(input)
      mod.rx = input
   div.appendChild(document.createTextNode(' y: '))
   var input = document.createElement('input')
      input.type = 'text'
      input.size = 6
      input.addEventListener('change',function(){
         draw_mesh()
         })
      div.appendChild(input)
      mod.ry = input
   div.appendChild(document.createTextNode(' z: '))
   var input = document.createElement('input')
      input.type = 'text'
      input.size = 6
      input.addEventListener('change',function(){
         draw_mesh()
         })
      div.appendChild(input)
      mod.rz = input
   //
   // mesh size
   //
   div.appendChild(document.createElement('br'))
   var text = document.createTextNode('mesh size:')
      div.appendChild(text)
      mod.meshsize = text
   //
   // slide depth
   //
   div.appendChild(document.createElement('br'))
   div.appendChild(document.createTextNode('slice depth: '))
   var input = document.createElement('input')
      input.type = 'text'
      input.size = 6
      input.addEventListener('change',function(){
         slice_mesh()
         })
      div.appendChild(input)
      mod.depth = input
   div.appendChild(document.createTextNode(' (mesh units)'))
   //
   // slice width
   //
   div.appendChild(document.createElement('br'))
   div.appendChild(document.createTextNode('slice width: '))
   var input = document.createElement('input')
      input.type = 'text'
      input.size = 6
      input.addEventListener('change',function(){
         slice_mesh()
         })
      div.appendChild(input)
      mod.width = input
   div.appendChild(document.createTextNode(' (pixels)'))
   }
//
// local functions
//
// draw mesh
//
function draw_mesh() {
   //
   // function to rotate point
   //
   function rotate(x,y,z) {
      var x1 = x
      var y1 = Math.cos(rx)*y-Math.sin(rx)*z
      var z1 = Math.sin(rx)*y+Math.cos(rx)*z
      var x2 = Math.cos(ry)*x1-Math.sin(ry)*z1
      var y2 = y1
      var z2 = Math.sin(ry)*x1+Math.cos(ry)*z1
      var x3 = Math.cos(rz)*x2-Math.sin(rz)*y2
      var y3 = Math.sin(rz)*x2+Math.cos(rz)*y2
      var z3 = z2
      return([x3,y3,z3])
      }
   //
   // get vars
   //
   var view = mod.mesh
   var endian = true
   var triangles = view.getUint32(80,endian)
   mod.triangles = triangles
   var size = 80+4+triangles*(4*12+2)
   var rx = parseFloat(mod.rx.value)*Math.PI/180
   var ry = parseFloat(mod.ry.value)*Math.PI/180
   var rz = parseFloat(mod.rz.value)*Math.PI/180
   //
   // find limits
   //
   var offset = 80+4
   var x0,x1,x2,y0,y1,y2,z0,z1,z2
   var xmin = Number.MAX_VALUE
   var xmax = -Number.MAX_VALUE
   var ymin = Number.MAX_VALUE
   var ymax = -Number.MAX_VALUE
   var zmin = Number.MAX_VALUE
   var zmax = -Number.MAX_VALUE
   for (var t = 0; t < triangles; ++t) {
      offset += 3*4
      x0 = view.getFloat32(offset,endian)
      offset += 4
      y0 = view.getFloat32(offset,endian)
      offset += 4
      z0 = view.getFloat32(offset,endian)
      offset += 4
      x1 = view.getFloat32(offset,endian)
      offset += 4
      y1 = view.getFloat32(offset,endian)
      offset += 4
      z1 = view.getFloat32(offset,endian)
      offset += 4
      x2 = view.getFloat32(offset,endian)
      offset += 4
      y2 = view.getFloat32(offset,endian)
      offset += 4
      z2 = view.getFloat32(offset,endian)
      offset += 4
      offset += 2
      var p0 = rotate(x0,y0,z0)
      if (p0[0] > xmax) xmax = p0[0]
      if (p0[0] < xmin) xmin = p0[0]
      if (p0[1] > ymax) ymax = p0[1]
      if (p0[1] < ymin) ymin = p0[1]
      if (p0[2] > zmax) zmax = p0[2]
      if (p0[2] < zmin) zmin = p0[2]
      var p1 = rotate(x1,y1,z1)
      if (p1[0] > xmax) xmax = p1[0]
      if (p1[0] < xmin) xmin = p1[0]
      if (p1[1] > ymax) ymax = p1[1]
      if (p1[1] < ymin) ymin = p1[1]
      if (p1[2] > zmax) zmax = p1[2]
      if (p1[2] < zmin) zmin = p1[2]
      var p2 = rotate(x2,y2,z2)
      if (p2[0] > xmax) xmax = p2[0]
      if (p2[0] < xmin) xmin = p2[0]
      if (p2[1] > ymax) ymax = p2[1]
      if (p2[1] < ymin) ymin = p2[1]
      if (p2[2] > zmax) zmax = p2[2]
      if (p2[2] < zmin) zmin = p2[2]
      }
   mod.dx = xmax-xmin
   mod.dy = ymax-ymin
   mod.dz = zmax-zmin
   mod.xmin = xmin
   mod.ymin = ymin
   mod.zmin = zmin
   mod.xmax = xmax
   mod.ymax = ymax
   mod.zmax = zmax
   mod.meshsize.nodeValue = 'mesh size: '+
      mod.dx.toFixed(3)+' x '+
      mod.dy.toFixed(3)+' x '+
      mod.dz.toFixed(3)
   //
   // draw projection
   //
   var ctx = mod.meshcanvas.getContext('2d')
   var w = mod.meshcanvas.width
   var h = mod.meshcanvas.height
   ctx.clearRect(0,0,w,h)
   var dx = mod.dx
   var dy = mod.dy
   if (dx > dy) {
      var xo = 0
      var yo = h*.5*(1-dy/dx)
      var xw = w
      var yh = w*dy/dx
      }
   else {
      var xo = w*.5*(1-dx/dy)
      var yo = 0
      var xw = h*dx/dy
      var yh = h
      }
   ctx.beginPath()
   offset = 80+4
   for (var t = 0; t < triangles; ++t) {
      offset += 3*4
      x0 = view.getFloat32(offset,endian)
      offset += 4
      y0 = view.getFloat32(offset,endian)
      offset += 4
      z0 = view.getFloat32(offset,endian)
      offset += 4
      x1 = view.getFloat32(offset,endian)
      offset += 4
      y1 = view.getFloat32(offset,endian)
      offset += 4
      z1 = view.getFloat32(offset,endian)
      offset += 4
      x2 = view.getFloat32(offset,endian)
      offset += 4
      y2 = view.getFloat32(offset,endian)
      offset += 4
      z2 = view.getFloat32(offset,endian)
      offset += 4
      offset += 2
      var p0 = rotate(x0,y0,z0)
      var p1 = rotate(x1,y1,z1)
      var p2 = rotate(x2,y2,z2)
      x0 = xo+xw*(p0[0]-xmin)/dx
      y0 = yo+yh*(ymax-p0[1])/dy
      x1 = xo+xw*(p1[0]-xmin)/dx
      y1 = yo+yh*(ymax-p1[1])/dy
      x2 = xo+xw*(p2[0]-xmin)/dx
      y2 = yo+yh*(ymax-p2[1])/dy
      ctx.moveTo(x0,y0)
      ctx.lineTo(x1,y1)
      ctx.lineTo(x2,y2)
      ctx.lineTo(x0,y0)
      }
   ctx.stroke()
   }
//
// slice mesh
//   
function slice_mesh() {
   var blob = new Blob(['('+worker.toString()+'())'])
   var url = window.URL.createObjectURL(blob)
   var webworker = new Worker(url)
   webworker.addEventListener('message',function(evt) {
      console.log(evt.data.count)
      window.URL.revokeObjectURL(url)
      var h = mod.img.height
      var w = mod.img.width
      var buf = new Uint8ClampedArray(evt.data.buffer)
      var imgdata = new ImageData(buf,w,h)
      var ctx = mod.img.getContext("2d")
      ctx.putImageData(imgdata,0,0)
      if (w > h) {
         var x0 = 0
         var y0 = mod.slicecanvas.height*.5*(1-h/w)
         var wd = mod.slicecanvas.width
         var hd = mod.slicecanvas.width*h/w
         }
      else {
         var x0 = mod.slicecanvas.width*.5*(1-w/h)
         var y0 = 0
         var wd = mod.slicecanvas.height*w/h
         var hd = mod.slicecanvas.height
         }
      var ctx = mod.slicecanvas.getContext("2d")
      ctx.clearRect(0,0,mod.slicecanvas.width,mod.slicecanvas.height)
      ctx.drawImage(mod.img,x0,y0,wd,hd)
      webworker.terminate()
      //outputs.image.event()
      })
   var ctx = mod.slicecanvas.getContext("2d")
   ctx.clearRect(0,0,mod.slicecanvas.width,mod.slicecanvas.height)
   var d = parseFloat(mod.depth.value)
   var rx = parseFloat(mod.rx.value)
   var ry = parseFloat(mod.ry.value)
   var rz = parseFloat(mod.rz.value)
   mod.img.width = parseInt(mod.width.value)
   mod.img.height = Math.round(mod.img.width*mod.dy/mod.dx)
   var ctx = mod.img.getContext("2d")
   var img = ctx.getImageData(0,0,mod.img.width,mod.img.height)
   webworker.postMessage({
      height:mod.img.height,width:mod.img.width,depth:d,
      imgbuffer:img.data.buffer,mesh:mod.mesh,
      zmin:mod.zmin,zmax:mod.zmax,
      rx:rx,ry:ry,rz:rz},
      [img.data.buffer])
   }
function worker() {
   self.addEventListener('message',function(evt) {
      var h = evt.data.height
      var w = evt.data.width
      var d = evt.data.depth
      var view = evt.data.mesh
      var rx = evt.data.rx
      var ry = evt.data.ry
      var rz = evt.data.rz
      var xmin
      var xmax
      var ymin
      var ymax
      var zmin = evt.data.zmin
      var zmax = evt.data.zmax
      var buf = new Uint8ClampedArray(evt.data.imgbuffer)
      //
      // function to rotate point
      //
      function rotate(x,y,z) {
         var x1 = x
         var y1 = Math.cos(rx)*y-Math.sin(rx)*z
         var z1 = Math.sin(rx)*y+Math.cos(rx)*z
         var x2 = Math.cos(ry)*x1-Math.sin(ry)*z1
         var y2 = y1
         var z2 = Math.sin(ry)*x1+Math.cos(ry)*z1
         var x3 = Math.cos(rz)*x2-Math.sin(rz)*y2
         var y3 = Math.sin(rz)*x2+Math.cos(rz)*y2
         var z3 = z2
         return([x3,y3,z3])
         }
      //
      // get vars
      //
      var endian = true
      var triangles = view.getUint32(80,endian)
      var size = 80+4+triangles*(4*12+2)
      //
      // find triangles crossing the slice
      //
      var segs = []
      var count = 0
      offset = 80+4
      for (var t = 0; t < triangles; ++t) {
         offset += 3*4
         x0 = view.getFloat32(offset,endian)
         offset += 4
         y0 = view.getFloat32(offset,endian)
         offset += 4
         z0 = view.getFloat32(offset,endian)
         offset += 4
         x1 = view.getFloat32(offset,endian)
         offset += 4
         y1 = view.getFloat32(offset,endian)
         offset += 4
         z1 = view.getFloat32(offset,endian)
         offset += 4
         x2 = view.getFloat32(offset,endian)
         offset += 4
         y2 = view.getFloat32(offset,endian)
         offset += 4
         z2 = view.getFloat32(offset,endian)
         offset += 4
         //
         // rotate vertices
         //
         offset += 2
         var p = [rotate(x0,y0,z0),
            rotate(x1,y1,z1),rotate(x2,y2,z2)]
         //
         // sort z
         //
         p.sort(function(a,b) {
            if (a[2] < b[2])
               return -1
            else if (a[2] > b[2])
               return 1
            else
               return 0
            })
         //
         // check for crossing
         //
         if ((p[0][2] < (zmax-d)) && (p[2][2] > (zmax-d))) {
            count += 1
            }
         /*
            //
            //  crossing found, check for side and save
            //
            if (p[1][2] < d) {
               }
            else if (p[1][2] > d) {
               }
            else {
               }
            }
         */
         }
      /*
      //
      // initialize slice image
      //
      for row
         for col
      //
      // loop over scan lines
      //
      for row
         //
         // find scan line intersections with segments
        //

         //
         // perturb vertex intersections
         //

         //
         // sort and stroke intersections
         //

      //
      // output the slice
      //
      */
      for (var row = 0; row < h; ++row) {
         for (var col = 0; col < w; ++col) {
            r = buf[(h-1-row)*w*4+col*4+0]
            g = buf[(h-1-row)*w*4+col*4+1]
            b = buf[(h-1-row)*w*4+col*4+2]
            a = buf[(h-1-row)*w*4+col*4+3]
            buf[(h-1-row)*w*4+col*4+0] = row
            buf[(h-1-row)*w*4+col*4+1] = col
            buf[(h-1-row)*w*4+col*4+2] = row+col
            buf[(h-1-row)*w*4+col*4+3] = 255
            }
         }
      self.postMessage({count:count,buffer:buf.buffer},[buf.buffer])
      })
   }
//
// return values
//
return ({
   name:name,
   init:init,
   inputs:inputs,
   outputs:outputs,
   interface:interface
   })
}())
