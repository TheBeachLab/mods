{"modules":{"0.7585171315767895":{"definition":"//\n// benchmark\n//\n// Neil Gershenfeld \n// (c) Massachusetts Institute of Technology 2016\n// \n// This work may be reproduced, modified, distributed, performed, and \n// displayed for any purpose, but must acknowledge the fab modules \n// project. Copyright is retained and must be preserved. The work is \n// provided as is; no warranty is provided, and users accept all \n// liability.\n//\n// closure\n//\n(function(){\n//\n// module globals\n//\nvar mod = {}\n//\n// name\n//\nvar name = 'benchmark'\n//\n// initialization\n//\nvar init = function() {\n   mod.terms.value = '1e8'\n   }\n//\n// inputs\n//\nvar inputs = {\n   start:{type:'event',\n      event:function(evt){\n         benchmark()}}}\n//\n// outputs\n//\nvar outputs = {\n   }\n//\n// interface\n//\nvar interface = function(div){\n   mod.div = div\n   div.appendChild(document.createTextNode('terms to sum: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 6\n      div.appendChild(input)\n      mod.terms = input\n   div.appendChild(document.createElement('br'))\n   var btn = document.createElement('button')\n      btn.style.padding = mods.ui.padding\n      btn.style.margin = 1\n      var text = document.createTextNode('calculate pi')\n         mod.label = text\n         btn.appendChild(text)\n      btn.addEventListener('click',function() {\n         benchmark()\n         })\n      mod.button = btn\n      div.appendChild(btn)\n   div.appendChild(document.createElement('br'))\n   var text = document.createTextNode('value: ')\n      div.appendChild(text)\n      mod.value = text\n   div.appendChild(document.createElement('br'))\n   var text = document.createTextNode('time (s): ')\n      div.appendChild(text)\n      mod.time = text\n   div.appendChild(document.createElement('br'))\n   var text = document.createTextNode('Mflops: ')\n      div.appendChild(text)\n      mod.mflops = text\n   }\n//\n// local functions\n//\nfunction benchmark() {\n   mod.label.nodeValue = 'calculating'\n   var blob = new Blob(['('+worker.toString()+'())'])\n   var url = window.URL.createObjectURL(blob)\n   var webworker = new Worker(url)\n   webworker.addEventListener('message',function(evt) {\n      window.URL.revokeObjectURL(url)\n      var pi = evt.data.pi.toFixed(6)\n      mod.value.nodeValue = 'value: '+pi\n      var sec = evt.data.dt/1000\n      mod.time.nodeValue = 'time (s): '+sec\n      var mflops = 5*terms/(sec*1e6)\n      mod.mflops.nodeValue = 'Mflops: '+mflops.toFixed(0)\n      mod.label.nodeValue = 'calculate pi'\n      webworker.terminate()\n      })\n   var terms = parseFloat(mod.terms.value)\n   webworker.postMessage({terms:terms})\n   }\nfunction worker() {\n   self.addEventListener('message',function(evt) {\n      var terms = evt.data.terms\n      var pi = 0\n      var tstart = Date.now()\n      for (var term = 1; term < terms; ++term)\n         pi += 0.5/((term-0.75)*(term-0.25))\n      var tend = Date.now()\n      dt = tend-tstart\n      self.postMessage({pi:pi,dt:dt})\n      })\n   }\n//\n// return values\n//\nreturn ({\n   name:name,\n   init:init,\n   inputs:inputs,\n   outputs:outputs,\n   interface:interface\n   })\n}())\n","top":"74","left":"670","inputs":{},"outputs":{}},"0.3347575106161791":{"definition":"//\n// event generator\n//\n// Neil Gershenfeld \n// (c) Massachusetts Institute of Technology 2016\n// \n// This work may be reproduced, modified, distributed, performed, and \n// displayed for any purpose, but must acknowledge the fab modules \n// project. Copyright is retained and must be preserved. The work is \n// provided as is; no warranty is provided, and users accept all \n// liability.\n//\n// closure\n//\n(function(){\n//\n// module globals\n//\nvar mod = {}\n//\n// name\n//\nvar name = 'event generator'\n//\n// initialization\n//\nvar init = function() {\n   mod.event.value = 'event'\n   }\n//\n// inputs\n//\nvar inputs = {\n   trigger:{type:'event',\n      event:function(evt){\n         outputs.output.event()\n         }}}\n//\n// outputs\n//\nvar outputs = {\n   output:{type:'event',\n      event:function(){\n         mods.output(mod,'output',mod.event.value)}}}\n//\n// interface\n//\nvar interface = function(div){\n   mod.div = div\n   //\n   // generate button\n   //\n   var btn = document.createElement('button')\n      btn.style.padding = mods.ui.padding\n      btn.style.margin = 1\n      btn.appendChild(document.createTextNode('generate'))\n      btn.addEventListener('click',function(){\n         outputs.output.event()\n         })\n      div.appendChild(btn)\n   //\n   // event value\n   //\n   div.appendChild(document.createElement('br'))\n   div.appendChild(document.createTextNode('value: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 6\n      input.addEventListener('change',function(){\n         })\n      div.appendChild(input)\n      mod.event = input\n   }\n//\n// local functions\n//\n;\n//\n// return values\n//\nreturn ({\n   name:name,\n   init:init,\n   inputs:inputs,\n   outputs:outputs,\n   interface:interface\n   })\n}())\n","top":"74","left":"161","inputs":{},"outputs":{}},"0.8703845148735766":{"definition":"//\n// benchmark\n//\n// Neil Gershenfeld \n// (c) Massachusetts Institute of Technology 2016\n// \n// This work may be reproduced, modified, distributed, performed, and \n// displayed for any purpose, but must acknowledge the fab modules \n// project. Copyright is retained and must be preserved. The work is \n// provided as is; no warranty is provided, and users accept all \n// liability.\n//\n// closure\n//\n(function(){\n//\n// module globals\n//\nvar mod = {}\n//\n// name\n//\nvar name = 'benchmark'\n//\n// initialization\n//\nvar init = function() {\n   mod.terms.value = '1e8'\n   }\n//\n// inputs\n//\nvar inputs = {\n   start:{type:'event',\n      event:function(evt){\n         benchmark()}}}\n//\n// outputs\n//\nvar outputs = {\n   }\n//\n// interface\n//\nvar interface = function(div){\n   mod.div = div\n   div.appendChild(document.createTextNode('terms to sum: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 6\n      div.appendChild(input)\n      mod.terms = input\n   div.appendChild(document.createElement('br'))\n   var btn = document.createElement('button')\n      btn.style.padding = mods.ui.padding\n      btn.style.margin = 1\n      var text = document.createTextNode('calculate pi')\n         mod.label = text\n         btn.appendChild(text)\n      btn.addEventListener('click',function() {\n         benchmark()\n         })\n      mod.button = btn\n      div.appendChild(btn)\n   div.appendChild(document.createElement('br'))\n   var text = document.createTextNode('value: ')\n      div.appendChild(text)\n      mod.value = text\n   div.appendChild(document.createElement('br'))\n   var text = document.createTextNode('time (s): ')\n      div.appendChild(text)\n      mod.time = text\n   div.appendChild(document.createElement('br'))\n   var text = document.createTextNode('Mflops: ')\n      div.appendChild(text)\n      mod.mflops = text\n   }\n//\n// local functions\n//\nfunction benchmark() {\n   mod.label.nodeValue = 'calculating'\n   var blob = new Blob(['('+worker.toString()+'())'])\n   var url = window.URL.createObjectURL(blob)\n   var webworker = new Worker(url)\n   webworker.addEventListener('message',function(evt) {\n      window.URL.revokeObjectURL(url)\n      var pi = evt.data.pi.toFixed(6)\n      mod.value.nodeValue = 'value: '+pi\n      var sec = evt.data.dt/1000\n      mod.time.nodeValue = 'time (s): '+sec\n      var mflops = 5*terms/(sec*1e6)\n      mod.mflops.nodeValue = 'Mflops: '+mflops.toFixed(0)\n      mod.label.nodeValue = 'calculate pi'\n      webworker.terminate()\n      })\n   var terms = parseFloat(mod.terms.value)\n   webworker.postMessage({terms:terms})\n   }\nfunction worker() {\n   self.addEventListener('message',function(evt) {\n      var terms = evt.data.terms\n      var pi = 0\n      var tstart = Date.now()\n      for (var term = 1; term < terms; ++term)\n         pi += 0.5/((term-0.75)*(term-0.25))\n      var tend = Date.now()\n      dt = tend-tstart\n      self.postMessage({pi:pi,dt:dt})\n      })\n   }\n//\n// return values\n//\nreturn ({\n   name:name,\n   init:init,\n   inputs:inputs,\n   outputs:outputs,\n   interface:interface\n   })\n}())\n","top":"300","left":"658","inputs":{},"outputs":{}},"0.8432953609558071":{"definition":"//\n// benchmark\n//\n// Neil Gershenfeld \n// (c) Massachusetts Institute of Technology 2016\n// \n// This work may be reproduced, modified, distributed, performed, and \n// displayed for any purpose, but must acknowledge the fab modules \n// project. Copyright is retained and must be preserved. The work is \n// provided as is; no warranty is provided, and users accept all \n// liability.\n//\n// closure\n//\n(function(){\n//\n// module globals\n//\nvar mod = {}\n//\n// name\n//\nvar name = 'benchmark'\n//\n// initialization\n//\nvar init = function() {\n   mod.terms.value = '1e8'\n   }\n//\n// inputs\n//\nvar inputs = {\n   start:{type:'event',\n      event:function(evt){\n         benchmark()}}}\n//\n// outputs\n//\nvar outputs = {\n   }\n//\n// interface\n//\nvar interface = function(div){\n   mod.div = div\n   div.appendChild(document.createTextNode('terms to sum: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 6\n      div.appendChild(input)\n      mod.terms = input\n   div.appendChild(document.createElement('br'))\n   var btn = document.createElement('button')\n      btn.style.padding = mods.ui.padding\n      btn.style.margin = 1\n      var text = document.createTextNode('calculate pi')\n         mod.label = text\n         btn.appendChild(text)\n      btn.addEventListener('click',function() {\n         benchmark()\n         })\n      mod.button = btn\n      div.appendChild(btn)\n   div.appendChild(document.createElement('br'))\n   var text = document.createTextNode('value: ')\n      div.appendChild(text)\n      mod.value = text\n   div.appendChild(document.createElement('br'))\n   var text = document.createTextNode('time (s): ')\n      div.appendChild(text)\n      mod.time = text\n   div.appendChild(document.createElement('br'))\n   var text = document.createTextNode('Mflops: ')\n      div.appendChild(text)\n      mod.mflops = text\n   }\n//\n// local functions\n//\nfunction benchmark() {\n   mod.label.nodeValue = 'calculating'\n   var blob = new Blob(['('+worker.toString()+'())'])\n   var url = window.URL.createObjectURL(blob)\n   var webworker = new Worker(url)\n   webworker.addEventListener('message',function(evt) {\n      window.URL.revokeObjectURL(url)\n      var pi = evt.data.pi.toFixed(6)\n      mod.value.nodeValue = 'value: '+pi\n      var sec = evt.data.dt/1000\n      mod.time.nodeValue = 'time (s): '+sec\n      var mflops = 5*terms/(sec*1e6)\n      mod.mflops.nodeValue = 'Mflops: '+mflops.toFixed(0)\n      mod.label.nodeValue = 'calculate pi'\n      webworker.terminate()\n      })\n   var terms = parseFloat(mod.terms.value)\n   webworker.postMessage({terms:terms})\n   }\nfunction worker() {\n   self.addEventListener('message',function(evt) {\n      var terms = evt.data.terms\n      var pi = 0\n      var tstart = Date.now()\n      for (var term = 1; term < terms; ++term)\n         pi += 0.5/((term-0.75)*(term-0.25))\n      var tend = Date.now()\n      dt = tend-tstart\n      self.postMessage({pi:pi,dt:dt})\n      })\n   }\n//\n// return values\n//\nreturn ({\n   name:name,\n   init:init,\n   inputs:inputs,\n   outputs:outputs,\n   interface:interface\n   })\n}())\n","top":"268","left":"211","inputs":{},"outputs":{}},"0.8070508536246278":{"definition":"//\n// benchmark\n//\n// Neil Gershenfeld \n// (c) Massachusetts Institute of Technology 2016\n// \n// This work may be reproduced, modified, distributed, performed, and \n// displayed for any purpose, but must acknowledge the fab modules \n// project. Copyright is retained and must be preserved. The work is \n// provided as is; no warranty is provided, and users accept all \n// liability.\n//\n// closure\n//\n(function(){\n//\n// module globals\n//\nvar mod = {}\n//\n// name\n//\nvar name = 'benchmark'\n//\n// initialization\n//\nvar init = function() {\n   mod.terms.value = '1e8'\n   }\n//\n// inputs\n//\nvar inputs = {\n   start:{type:'event',\n      event:function(evt){\n         benchmark()}}}\n//\n// outputs\n//\nvar outputs = {\n   }\n//\n// interface\n//\nvar interface = function(div){\n   mod.div = div\n   div.appendChild(document.createTextNode('terms to sum: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 6\n      div.appendChild(input)\n      mod.terms = input\n   div.appendChild(document.createElement('br'))\n   var btn = document.createElement('button')\n      btn.style.padding = mods.ui.padding\n      btn.style.margin = 1\n      var text = document.createTextNode('calculate pi')\n         mod.label = text\n         btn.appendChild(text)\n      btn.addEventListener('click',function() {\n         benchmark()\n         })\n      mod.button = btn\n      div.appendChild(btn)\n   div.appendChild(document.createElement('br'))\n   var text = document.createTextNode('value: ')\n      div.appendChild(text)\n      mod.value = text\n   div.appendChild(document.createElement('br'))\n   var text = document.createTextNode('time (s): ')\n      div.appendChild(text)\n      mod.time = text\n   div.appendChild(document.createElement('br'))\n   var text = document.createTextNode('Mflops: ')\n      div.appendChild(text)\n      mod.mflops = text\n   }\n//\n// local functions\n//\nfunction benchmark() {\n   mod.label.nodeValue = 'calculating'\n   var blob = new Blob(['('+worker.toString()+'())'])\n   var url = window.URL.createObjectURL(blob)\n   var webworker = new Worker(url)\n   webworker.addEventListener('message',function(evt) {\n      window.URL.revokeObjectURL(url)\n      var pi = evt.data.pi.toFixed(6)\n      mod.value.nodeValue = 'value: '+pi\n      var sec = evt.data.dt/1000\n      mod.time.nodeValue = 'time (s): '+sec\n      var mflops = 5*terms/(sec*1e6)\n      mod.mflops.nodeValue = 'Mflops: '+mflops.toFixed(0)\n      mod.label.nodeValue = 'calculate pi'\n      webworker.terminate()\n      })\n   var terms = parseFloat(mod.terms.value)\n   webworker.postMessage({terms:terms})\n   }\nfunction worker() {\n   self.addEventListener('message',function(evt) {\n      var terms = evt.data.terms\n      var pi = 0\n      var tstart = Date.now()\n      for (var term = 1; term < terms; ++term)\n         pi += 0.5/((term-0.75)*(term-0.25))\n      var tend = Date.now()\n      dt = tend-tstart\n      self.postMessage({pi:pi,dt:dt})\n      })\n   }\n//\n// return values\n//\nreturn ({\n   name:name,\n   init:init,\n   inputs:inputs,\n   outputs:outputs,\n   interface:interface\n   })\n}())\n","top":"503","left":"220","inputs":{},"outputs":{}},"0.753923886272469":{"definition":"//\n// benchmark\n//\n// Neil Gershenfeld \n// (c) Massachusetts Institute of Technology 2016\n// \n// This work may be reproduced, modified, distributed, performed, and \n// displayed for any purpose, but must acknowledge the fab modules \n// project. Copyright is retained and must be preserved. The work is \n// provided as is; no warranty is provided, and users accept all \n// liability.\n//\n// closure\n//\n(function(){\n//\n// module globals\n//\nvar mod = {}\n//\n// name\n//\nvar name = 'benchmark'\n//\n// initialization\n//\nvar init = function() {\n   mod.terms.value = '1e8'\n   }\n//\n// inputs\n//\nvar inputs = {\n   start:{type:'event',\n      event:function(evt){\n         benchmark()}}}\n//\n// outputs\n//\nvar outputs = {\n   }\n//\n// interface\n//\nvar interface = function(div){\n   mod.div = div\n   div.appendChild(document.createTextNode('terms to sum: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 6\n      div.appendChild(input)\n      mod.terms = input\n   div.appendChild(document.createElement('br'))\n   var btn = document.createElement('button')\n      btn.style.padding = mods.ui.padding\n      btn.style.margin = 1\n      var text = document.createTextNode('calculate pi')\n         mod.label = text\n         btn.appendChild(text)\n      btn.addEventListener('click',function() {\n         benchmark()\n         })\n      mod.button = btn\n      div.appendChild(btn)\n   div.appendChild(document.createElement('br'))\n   var text = document.createTextNode('value: ')\n      div.appendChild(text)\n      mod.value = text\n   div.appendChild(document.createElement('br'))\n   var text = document.createTextNode('time (s): ')\n      div.appendChild(text)\n      mod.time = text\n   div.appendChild(document.createElement('br'))\n   var text = document.createTextNode('Mflops: ')\n      div.appendChild(text)\n      mod.mflops = text\n   }\n//\n// local functions\n//\nfunction benchmark() {\n   mod.label.nodeValue = 'calculating'\n   var blob = new Blob(['('+worker.toString()+'())'])\n   var url = window.URL.createObjectURL(blob)\n   var webworker = new Worker(url)\n   webworker.addEventListener('message',function(evt) {\n      window.URL.revokeObjectURL(url)\n      var pi = evt.data.pi.toFixed(6)\n      mod.value.nodeValue = 'value: '+pi\n      var sec = evt.data.dt/1000\n      mod.time.nodeValue = 'time (s): '+sec\n      var mflops = 5*terms/(sec*1e6)\n      mod.mflops.nodeValue = 'Mflops: '+mflops.toFixed(0)\n      mod.label.nodeValue = 'calculate pi'\n      webworker.terminate()\n      })\n   var terms = parseFloat(mod.terms.value)\n   webworker.postMessage({terms:terms})\n   }\nfunction worker() {\n   self.addEventListener('message',function(evt) {\n      var terms = evt.data.terms\n      var pi = 0\n      var tstart = Date.now()\n      for (var term = 1; term < terms; ++term)\n         pi += 0.5/((term-0.75)*(term-0.25))\n      var tend = Date.now()\n      dt = tend-tstart\n      self.postMessage({pi:pi,dt:dt})\n      })\n   }\n//\n// return values\n//\nreturn ({\n   name:name,\n   init:init,\n   inputs:inputs,\n   outputs:outputs,\n   interface:interface\n   })\n}())\n","top":"524","left":"640","inputs":{},"outputs":{}}},"links":["{\"source\":\"{\\\"id\\\":\\\"0.3347575106161791\\\",\\\"type\\\":\\\"outputs\\\",\\\"name\\\":\\\"output\\\"}\",\"dest\":\"{\\\"id\\\":\\\"0.7585171315767895\\\",\\\"type\\\":\\\"inputs\\\",\\\"name\\\":\\\"start\\\"}\"}","{\"source\":\"{\\\"id\\\":\\\"0.3347575106161791\\\",\\\"type\\\":\\\"outputs\\\",\\\"name\\\":\\\"output\\\"}\",\"dest\":\"{\\\"id\\\":\\\"0.8703845148735766\\\",\\\"type\\\":\\\"inputs\\\",\\\"name\\\":\\\"start\\\"}\"}","{\"source\":\"{\\\"id\\\":\\\"0.3347575106161791\\\",\\\"type\\\":\\\"outputs\\\",\\\"name\\\":\\\"output\\\"}\",\"dest\":\"{\\\"id\\\":\\\"0.8432953609558071\\\",\\\"type\\\":\\\"inputs\\\",\\\"name\\\":\\\"start\\\"}\"}","{\"source\":\"{\\\"id\\\":\\\"0.3347575106161791\\\",\\\"type\\\":\\\"outputs\\\",\\\"name\\\":\\\"output\\\"}\",\"dest\":\"{\\\"id\\\":\\\"0.8070508536246278\\\",\\\"type\\\":\\\"inputs\\\",\\\"name\\\":\\\"start\\\"}\"}"]}