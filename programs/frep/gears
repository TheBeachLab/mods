{"modules":{"0.13271084267365763":{"definition":"//\n// frep view slice\n//\n// Neil Gershenfeld\n// (c) Massachusetts Institute of Technology 2018\n//\n// This work may be reproduced, modified, distributed, performed, and\n// displayed for any purpose, but must acknowledge the mods\n// project. Copyright is retained and must be preserved. The work is\n// provided as is; no warranty is provided, and users accept all\n// liability.\n//\n// closure\n//\n(function(){\n//\n// module globals\n//\nvar mod = {}\n//\n// name\n//\nvar name = 'frep view slice'\n//\n// initialization\n//\nvar init = function() {\n   mod.width.value = '1000'\n   mod.z.value = '0'\n   }\n//\n// inputs\n//\nvar inputs = {\n   shape:{type:'frep',\n      event:function(evt){\n         mod.fn.value = evt.detail.function\n         view_slice(evt.detail)\n         }}}\n//\n// outputs\n//\nvar outputs = {\n   image:{type:'RGBA',\n      event:function(){\n         var ctx = mod.img.getContext(\"2d\")\n         var img = ctx.getImageData(0,0,mod.img.width,mod.img.height)\n         mods.output(mod,'image',img)\n         }}}\n//\n// interface\n//\nvar interface = function(div){\n   mod.div = div\n   //\n   // on-screen drawing canvas\n   //\n   var canvas = document.createElement('canvas')\n      canvas.width = mods.ui.canvas\n      canvas.height = mods.ui.canvas\n      canvas.style.backgroundColor = 'rgb(255,255,255)'\n      div.appendChild(canvas)\n      mod.canvas = canvas\n   div.appendChild(document.createElement('br'))\n   //\n   // off-screen image canvas\n   //\n   var canvas = document.createElement('canvas')\n      mod.img = canvas\n   //\n   // x\n   //\n   div.appendChild(document.createTextNode('x: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 3\n      input.addEventListener('input',function(){\n         mod.y.value = ''\n         mod.z.value = ''\n         })\n      div.appendChild(input)\n      mod.x = input\n   //\n   // y\n   //\n   div.appendChild(document.createTextNode(' y: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 3\n      input.addEventListener('input',function(){\n         mod.x.value = ''\n         mod.z.value = ''\n         })\n      div.appendChild(input)\n      mod.y = input\n   //\n   // z\n   //\n   div.appendChild(document.createTextNode(' z: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 3\n      input.addEventListener('input',function(){\n         mod.x.value = ''\n         mod.y.value = ''\n         })\n      div.appendChild(input)\n      mod.z = input\n   div.appendChild(document.createElement('br'))\n   //\n   // width\n   //\n   div.appendChild(document.createTextNode('width: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 3\n      input.addEventListener('input',function(){\n         mod.height.value = ''\n         })\n      div.appendChild(input)\n      mod.width = input\n   //\n   // height\n   //\n   div.appendChild(document.createTextNode(' height: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 3\n      input.addEventListener('input',function(){\n         mod.width.value = ''\n         })\n      div.appendChild(input)\n      mod.height = input\n   div.appendChild(document.createElement('br'))\n   //\n   // function\n   //\n   div.appendChild(document.createTextNode('function: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 10\n      div.appendChild(input)\n      mod.fn = input\n   div.appendChild(document.createElement('br'))\n   //\n   // view button\n   //\n   div.appendChild(document.createTextNode(' '))\n   var btn = document.createElement('button')\n      btn.style.padding = mods.ui.padding\n      btn.style.margin = 1\n      btn.appendChild(document.createTextNode('view'))\n      btn.addEventListener('click',function(){\n         mod.win = window.open('')\n         mod.win.document.body.style.overflow = 'hidden'\n         mod.win.document.body.style.border = 0\n         mod.win.document.body.style.padding = 0\n         mod.win.document.body.style.margin = 0\n         mod.win.addEventListener('unload',function() {\n            mod.win = null\n            })\n         var canvas = document.createElement('canvas')\n            canvas.setAttribute('id',mod.div.id+'canvas')\n            mod.win.document.body.appendChild(canvas)\n         var ctx = canvas.getContext(\"2d\")\n         canvas.width = window.innerWidth\n         canvas.height = window.innerWidth\n         var h = mod.img.height\n         var w = mod.img.width\n         if (w > h) {\n            var wd = canvas.width\n            var hd = canvas.width*h/w\n            }\n         else {\n            var wd = canvas.height*w/h\n            var hd = canvas.height\n            }\n         ctx.fillStyle = '#dddddd'\n         ctx.fillRect(0,0,canvas.width,canvas.height)\n         ctx.drawImage(mod.img,0,0,wd,hd)\n         })\n      div.appendChild(btn)\n   }\n//\n// local functions\n//\n// view_slice\n//\nfunction view_slice(shape) {   \n   var fn = shape.function\n   var vars = shape.variables\n   var limits = shape.limits\n   var type = shape.type\n   var x = parseFloat(mod.x.value)\n   var y = parseFloat(mod.y.value)\n   var z = parseFloat(mod.z.value)\n   var w = parseInt(mod.width.value)\n   var h = parseInt(mod.height.value)\n   if (vars.length == 2) {\n      var xvar = vars[0]\n      var xlimits = limits[0]\n      var yvar = vars[1]\n      var ylimits = limits[1]\n      var zvar = ''\n      var zval = 0\n      }\n   else if (!isNaN(x)) {\n      var xvar = vars[1]\n      var xlimits = limits[1]\n      var yvar = vars[2]\n      var ylimits = limits[2]\n      var zvar = vars[0]\n      var zval = x\n      }\n   else if (!isNaN(y)) {\n      var xvar = vars[0]\n      var xlimits = limits[0]\n      var yvar = vars[2]\n      var ylimits = limits[2]\n      var zvar = vars[1]\n      var zval = y\n      }\n   else if (!isNaN(z)) {\n      var xvar = vars[0]\n      var xlimits = limits[0]\n      var yvar = vars[1]\n      var ylimits = limits[1]\n      var zvar = vars[2]\n      var zval = z\n      }\n   if (!isNaN(w))\n      h = Math.floor(w*(ylimits[1]-ylimits[0])/(xlimits[1]-xlimits[0]))\n   else\n      w = Math.floor(h*(xlimits[1]-xlimits[0])/(ylimits[1]-ylimits[0]))\n   mod.img.height = h\n   mod.img.width = w\n   var blob = new Blob(['('+worker.toString()+'())'])\n   var url = window.URL.createObjectURL(blob)\n   var webworker = new Worker(url)\n   webworker.addEventListener('message',function(evt) {\n      window.URL.revokeObjectURL(url)\n      var h = mod.img.height\n      var w = mod.img.width\n      var buf = new Uint8ClampedArray(evt.data.buffer)\n      var imgdata = new ImageData(buf,w,h)\n      var ctx = mod.img.getContext(\"2d\")\n      ctx.putImageData(imgdata,0,0)\n      if (w > h) {\n         var x0 = 0\n         var y0 = mod.canvas.height*.5*(1-h/w)\n         var wd = mod.canvas.width\n         var hd = mod.canvas.width*h/w\n         }\n      else {\n         var x0 = mod.canvas.width*.5*(1-w/h)\n         var y0 = 0\n         var wd = mod.canvas.height*w/h\n         var hd = mod.canvas.height\n         }\n      var ctx = mod.canvas.getContext(\"2d\")\n      ctx.fillStyle = '#dddddd'\n      ctx.fillRect(0,0,mod.canvas.width,mod.canvas.height)\n      ctx.drawImage(mod.img,x0,y0,wd,hd)\n      if (mod.win != null) {\n         var canvas = mod.win.document.getElementById(mod.div.id+'canvas')\n         var ctx = canvas.getContext(\"2d\")\n         canvas.width = window.innerWidth\n         canvas.height = window.innerWidth\n         var h = mod.img.height\n         var w = mod.img.width\n         if (w > h) {\n            var wd = canvas.width\n            var hd = canvas.width*h/w\n            }\n         else {\n            var wd = canvas.height*w/h\n            var hd = canvas.height\n            }\n         ctx.fillStyle = '#dddddd'\n         ctx.fillRect(0,0,canvas.width,canvas.height)\n         ctx.drawImage(mod.img,0,0,wd,hd)\n         }\n      webworker.terminate()\n      outputs.image.event()\n      })\n   var ctx = mod.canvas.getContext(\"2d\")\n   ctx.fillStyle = '#dddddd'\n   ctx.fillRect(0,0,mod.canvas.width,mod.canvas.height)\n   var ctx = mod.img.getContext(\"2d\")\n   ctx.fillStyle = '#dddddd'\n   ctx.fillRect(0,0,mod.img.width,mod.img.height)\n   var img = ctx.getImageData(0,0,mod.img.width,mod.img.height)\n   webworker.postMessage({\n      height:img.height,width:img.width,\n      xvar:xvar,yvar:yvar,zvar:zvar,zval:zval,\n      xlimits:xlimits,ylimits:ylimits,\n      function:fn,\n      buffer:img.data.buffer},\n      [img.data.buffer])\n   }\n//\n// worker\n//\nfunction worker() {\n   self.addEventListener('message',function(evt) {\n      var h = evt.data.height\n      var w = evt.data.width\n      var xvar = evt.data.xvar\n      var yvar = evt.data.yvar\n      var zvar = evt.data.zvar\n      var zval = evt.data.zval\n      var xlimits = evt.data.xlimits\n      var ylimits = evt.data.ylimits\n      var buf = new Uint8ClampedArray(evt.data.buffer)\n      var f = new Function(xvar,yvar,zvar,'return ('+evt.data.function+')')\n      var x,y,v\n      for (var row = 0; row < h; ++row) {\n         y = ylimits[0]+(ylimits[1]-ylimits[0])*row/(h-1)\n         for (var col = 0; col < w; ++col) {\n            x = xlimits[0]+(xlimits[1]-xlimits[0])*col/(w-1)\n            v = (f(x,y,zval) >= 0) ? 255 : 0\n            buf[(h-1-row)*w*4+col*4+0] = v\n            buf[(h-1-row)*w*4+col*4+1] = v\n            buf[(h-1-row)*w*4+col*4+2] = v\n            buf[(h-1-row)*w*4+col*4+3] = 255\n            }\n         }\n      self.postMessage({buffer:buf.buffer},[buf.buffer])\n      })\n   }\n//\n// return values\n//\nreturn ({\n   mod:mod,\n   name:name,\n   init:init,\n   inputs:inputs,\n   outputs:outputs,\n   interface:interface\n   })\n}())\n","top":"143","left":"1004","inputs":{},"outputs":{}},"0.5185517740741292":{"definition":"//\n// frep involute rack\n//\n// Neil Gershenfeld\n// (c) Massachusetts Institute of Technology 2018\n//\n// This work may be reproduced, modified, distributed, performed, and\n// displayed for any purpose, but must acknowledge the mods\n// project. Copyright is retained and must be preserved. The work is\n// provided as is; no warranty is provided, and users accept all\n// liability.\n//\n// closure\n//\n(function(){\n//\n// module globals\n//\nvar mod = {}\n//\n// name\n//\nvar name = 'frep involute rack'\n//\n// initialization\n//\nvar init = function() {\n   mod.module.value = '1'\n   mod.angle.value = '20'\n   mod.teeth.value = '10'\n   mod.addendum.value = '1'\n   mod.dedendum.value = '1.1'\n   }\n//\n// inputs\n//\nvar inputs = {\n   variables:{type:'',\n      event:function(evt){\n         for (var p in evt.detail)\n            mod[p].value = evt.detail[p]\n         outputs.variables.event()\n         outputs.shape.event()\n         }}}\n//\n// outputs\n//\nvar outputs = {\n   shape:{type:'',\n      event:function(){\n         var module = parseFloat(mod.module.value)\n         var angle = Math.PI*parseFloat(mod.angle.value)/180\n         var teeth = parseFloat(mod.teeth.value)\n         var addendum = parseFloat(mod.addendum.value)\n         var dedendum = parseFloat(mod.dedendum.value)\n         //\n         // pitch\n         //\n         var p = Math.PI*module\n         mod.info.innerHTML = `pitch: ${p.toFixed(3)} mm<br>`\n         //\n         // length\n         //\n         var l = p*teeth\n         mod.info.innerHTML += `length: ${l.toFixed(3)} mm<br>`\n         //\n         // addendum height\n         //\n         var ha = addendum*module\n         //\n         // dedendum height\n         //\n         var hd = dedendum*module\n         mod.info.innerHTML += `pitch height: ${hd.toFixed(3)} mm<br>`\n         //\n         // triangle base\n         //\n         var bt = (ha+hd)*Math.tan(angle)\n         //\n         // pitch base\n         //\n         var bp = ha*Math.tan(angle)\n         //\n         // slope\n         //\n         var s = 1/Math.tan(angle)\n         //\n         // shapes\n         //\n         // left\n         //\n         var fn = `${s}*X-Y`\n         //\n         // right\n         //\n         var fn = `Math.min(${fn},${s}*(${p/2+2*(bt-bp)}-X)-Y)`\n         //\n         // top\n         //\n         var fn = `Math.min(${fn},${ha+hd}-Y)`\n         //\n         // bottom\n         //\n         var fn = `Math.min(${fn},Y)`\n         //\n         // repeat\n         //\n         fn = fn.replace(/X/g,`(X%${p})`)\n         //\n         // bound\n         //\n         var fn = `Math.min(${fn},X)`\n         var fn = `Math.min(${fn},${l}-X)`\n         //\n         // output\n         //\n         var variables = ['X','Y']\n         var limits = [[0,l],[0,ha+hd]]\n         var type = 'Magnitude'\n         var shape = {function:fn,variables:variables,limits:limits,type:type}\n         mods.output(mod,'shape',shape)}},\n\n/*\nangle = +-(sqrt((r/rb)^2 - 1) - acos(rb/r)) (r > rb)\n(x % n + n) % n\n*/\n\n   variables:{type:'',\n      event:function(){\n         var module = parseFloat(mod.module.value)\n         var angle = parseFloat(mod.angle.value)\n         var teeth = parseFloat(mod.teeth.value)\n         var vars = {module:module,angle:angle,teeth:teeth}\n         mods.output(mod,'variables',vars)}\n         }}\n//\n// interface\n//\nvar interface = function(div){\n   mod.div = div\n   //\n   // module\n   //\n   div.appendChild(document.createTextNode('module (mm): '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 3\n      div.appendChild(input)\n      mod.module = input\n   div.appendChild(document.createElement('br'))\n   //\n   // angle\n   //\n   div.appendChild(document.createTextNode('pressure angle: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 3\n      div.appendChild(input)\n      mod.angle = input\n   div.appendChild(document.createElement('br'))\n   //\n   // teeth \n   //\n   div.appendChild(document.createTextNode('number of teeth: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 3\n      div.appendChild(input)\n      mod.teeth = input\n   div.appendChild(document.createElement('br'))\n   //\n   // addendum\n   //\n   div.appendChild(document.createTextNode('addendum: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 3\n      div.appendChild(input)\n      mod.addendum = input\n   div.appendChild(document.createElement('br'))\n   //\n   // dedendum \n   //\n   div.appendChild(document.createTextNode('dedendum: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 3\n      div.appendChild(input)\n      mod.dedendum = input\n   div.appendChild(document.createElement('br'))\n   //\n   // info\n   //\n   var info = document.createElement('span')\n      div.appendChild(info)\n      mod.info = info\n   //\n   // output button\n   //\n   var btn = document.createElement('button')\n      btn.style.padding = mods.ui.padding\n      btn.style.margin = 1\n      btn.appendChild(document.createTextNode('output'))\n      btn.addEventListener('click',function(){\n         outputs.variables.event()\n         outputs.shape.event()\n         })\n      div.appendChild(btn)\n   }\n//\n// local functions\n//\n;\n//\n// return values\n//\nreturn ({\n   mod:mod,\n   name:name,\n   init:init,\n   inputs:inputs,\n   outputs:outputs,\n   interface:interface\n   })\n}())\n","top":"368","left":"528","inputs":{},"outputs":{}},"0.9467743625158427":{"definition":"//\n// frep involute gear\n//\n// Neil Gershenfeld\n// (c) Massachusetts Institute of Technology 2018\n//\n// This work may be reproduced, modified, distributed, performed, and\n// displayed for any purpose, but must acknowledge the mods\n// project. Copyright is retained and must be preserved. The work is\n// provided as is; no warranty is provided, and users accept all\n// liability.\n//\n// closure\n//\n(function(){\n//\n// module globals\n//\nvar mod = {}\n//\n// name\n//\nvar name = 'frep involute gear'\n//\n// initialization\n//\nvar init = function() {\n   mod.module.value = '1'\n   mod.angle.value = '20'\n   mod.teeth.value = '10'\n   mod.addendum.value = '1'\n   mod.dedendum.value = '1.1'\n   }\n//\n// inputs\n//\nvar inputs = {\n   variables:{type:'',\n      event:function(evt){\n         for (var p in evt.detail)\n            mod[p].value = evt.detail[p]\n         outputs.variables.event()\n         outputs.shape.event()\n         }}}\n//\n// outputs\n//\nvar outputs = {\n   shape:{type:'',\n      event:function(){\n         var module = parseFloat(mod.module.value)\n         var angle = Math.PI*parseFloat(mod.angle.value)/180\n         var teeth = parseFloat(mod.teeth.value)\n         var addendum = parseFloat(mod.addendum.value)\n         var dedendum = parseFloat(mod.dedendum.value)\n         //\n         // pitch radius\n         //\n         var rp = module*teeth/2 \n         mod.info.innerHTML = `pitch radius: ${rp.toFixed(3)} mm<br>`\n         //\n         // base radius\n         //\n         var rb = rp*Math.cos(angle)\n         mod.info.innerHTML += `base radius: ${rb.toFixed(3)} mm<br>`\n         //\n         // addendum height\n         //\n         var ha = addendum*module\n         mod.info.innerHTML += `outer radius: ${(rp+ha).toFixed(3)} mm<br>`\n         //\n         // dedendum height\n         //\n         var hd = dedendum*module\n         mod.info.innerHTML += `root radius: ${(rp-hd).toFixed(3)} mm<br>`\n         //\n         // involute angle\n         //\n         var ai = Math.tan(angle)-angle \n         //\n         // pitch angle\n         //\n         var ap = 2*Math.PI/teeth\n         //\n         // shapes\n         //\n         // must be inside tip\n         //\n         var fn = `${rp}+${ha}-Math.sqrt(X*X+Y*Y)`\n         //\n         // angle must be above bottom involute\n         //\n         var fn = `Math.min(${fn},(Math.PI+Math.atan2(Y,X))%${ap}-(Math.sqrt(Math.pow(Math.max(${rb},Math.sqrt(X*X+Y*Y))/${rb},2)-1)-Math.acos(${rb}/Math.max(${rb},Math.sqrt(X*X+Y*Y)))))`\n         //\n         // angle must be below top involute\n         //\n         var fn = `Math.min(${fn},-(Math.sqrt(Math.pow(Math.max(${rb},Math.sqrt(X*X+Y*Y))/${rb},2)-1)-Math.acos(${rb}/Math.max(${rb},Math.sqrt(X*X+Y*Y))))-(-${ap/2+2*ai}+(Math.PI+Math.atan2(Y,X))%${ap}))`\n         //\n         // root circle\n         //\n         var fn = `Math.max(${fn},${rp-hd}-Math.sqrt(X*X+Y*Y))`\n         //\n         // todo: fillets\n         //\n         // output\n         //\n         var variables = ['X','Y']\n         var limits = [[-rp-ha,+rp+ha],[-rp-ha,+rp+ha]]\n         var type = 'Magnitude'\n         var shape = {function:fn,variables:variables,limits:limits,type:type}\n         mods.output(mod,'shape',shape)}},\n\n/*\nangle = +-(sqrt((r/rb)^2 - 1) - acos(rb/r)) (r > rb)\n(x % n + n) % n\n*/\n\n   variables:{type:'',\n      event:function(){\n         var module = parseFloat(mod.module.value)\n         var angle = parseFloat(mod.angle.value)\n         var teeth = parseFloat(mod.teeth.value)\n         var vars = {module:module,angle:angle,teeth:teeth}\n         mods.output(mod,'variables',vars)}\n         }}\n//\n// interface\n//\nvar interface = function(div){\n   mod.div = div\n   //\n   // module\n   //\n   div.appendChild(document.createTextNode('module (mm): '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 3\n      div.appendChild(input)\n      mod.module = input\n   div.appendChild(document.createElement('br'))\n   //\n   // angle\n   //\n   div.appendChild(document.createTextNode('pressure angle: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 3\n      div.appendChild(input)\n      mod.angle = input\n   div.appendChild(document.createElement('br'))\n   //\n   // teeth \n   //\n   div.appendChild(document.createTextNode('number of teeth: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 3\n      div.appendChild(input)\n      mod.teeth = input\n   div.appendChild(document.createElement('br'))\n   //\n   // addendum\n   //\n   div.appendChild(document.createTextNode('addendum: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 3\n      div.appendChild(input)\n      mod.addendum = input\n   div.appendChild(document.createElement('br'))\n   //\n   // dedendum \n   //\n   div.appendChild(document.createTextNode('dedendum: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 3\n      div.appendChild(input)\n      mod.dedendum = input\n   div.appendChild(document.createElement('br'))\n   //\n   // info\n   //\n   var info = document.createElement('span')\n      div.appendChild(info)\n      mod.info = info\n   //\n   // output button\n   //\n   var btn = document.createElement('button')\n      btn.style.padding = mods.ui.padding\n      btn.style.margin = 1\n      btn.appendChild(document.createTextNode('output'))\n      btn.addEventListener('click',function(){\n         outputs.variables.event()\n         outputs.shape.event()\n         })\n      div.appendChild(btn)\n   }\n//\n// local functions\n//\n;\n//\n// return values\n//\nreturn ({\n   mod:mod,\n   name:name,\n   init:init,\n   inputs:inputs,\n   outputs:outputs,\n   interface:interface\n   })\n}())\n","top":"109","left":"165","inputs":{},"outputs":{}}},"links":["{\"source\":\"{\\\"id\\\":\\\"0.5185517740741292\\\",\\\"type\\\":\\\"outputs\\\",\\\"name\\\":\\\"shape\\\"}\",\"dest\":\"{\\\"id\\\":\\\"0.13271084267365763\\\",\\\"type\\\":\\\"inputs\\\",\\\"name\\\":\\\"shape\\\"}\"}","{\"source\":\"{\\\"id\\\":\\\"0.9467743625158427\\\",\\\"type\\\":\\\"outputs\\\",\\\"name\\\":\\\"shape\\\"}\",\"dest\":\"{\\\"id\\\":\\\"0.13271084267365763\\\",\\\"type\\\":\\\"inputs\\\",\\\"name\\\":\\\"shape\\\"}\"}"]}