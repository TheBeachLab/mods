{"modules":{"0.472314937835305":{"definition":"//\n// view frep volume renderer\n//\n// Neil Gershenfeld \n// (c) Massachusetts Institute of Technology 2016\n// \n// This work may be reproduced, modified, distributed, performed, and \n// displayed for any purpose, but must acknowledge the mods\n// project. Copyright is retained and must be preserved. The work is \n// provided as is; no warranty is provided, and users accept all \n// liability.\n//\n//\n// closure\n//\n(function(){\n//\n// module globals\n//\nvar mod = {};\n//\n// name\n//\nvar name = 'render GPU';\n//\n// initialization\n//\nvar init = function() {\n\tmod.steps.value=256.0;\n\tmod.alphaCorrection.value=1.0;\n\tmod.rendType=0.0;\n\tmod.windowOpen=false;\n\tmod.xLimit1 =-1.0 ;\n\tmod.xLimit2 =1.0 ; \n\tmod.yLimit1 =-1.0 ; \n\tmod.yLimit2 =1.0 ; \n\tmod.zLimit1 =-1.0 ; \n\tmod.zLimit2 =1.0 ;\n   };\n//\n// inputs\n//\nvar inputs = {\n\tshape:{type:'frep',\n\tevent:function(evt){\n\n\t\tmod.shape=evt.detail;\n\n\t\t// outputs.messageLog.event(mod.shape.limits);\n\n\t\t//get largerst range and rescale other ones to adjust limit mapping\n\t\tvar tempIndex=0;\n\t\tvar tempMax=-1.0;\n\n\t\tfor(i=0;i<mod.shape.limits.length;i++)\n\t\t{\n\t\t\tif((mod.shape.limits[i][1]-mod.shape.limits[i][0]) >= tempMax )\n\t\t\t{\n\t\t\t\ttempIndex=i;\n\t\t\t\ttempMax=mod.shape.limits[i][1]-mod.shape.limits[i][0];\n\t\t\t}\n\t\t}\n\t\tfor(i=0;i < mod.shape.limits.length;i++)\n\t\t{\n\t\t\tif(i!=tempIndex)\n\t\t\t{\n\t\t\t\tvar tempDif = (mod.shape.limits[tempIndex][1]-mod.shape.limits[tempIndex][0])-(mod.shape.limits[i][1]-mod.shape.limits[i][0]);\n\t\t\t\tmod.shape.limits[i][0]-=tempDif/2.0;\n\t\t\t\tmod.shape.limits[i][1]+=tempDif/2.0;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\n\t\tmod.xLimit1=mod.shape.limits[0][0] ;\n\t\tmod.xLimit2=mod.shape.limits[0][1] ; \n\t\tmod.yLimit1=mod.shape.limits[1][0] ; \n\t\tmod.yLimit2=mod.shape.limits[1][1] ; \n\t\tmod.zLimit1=mod.shape.limits[2][0] ; \n\t\tmod.zLimit2=mod.shape.limits[2][1] ;\n\t\t\n\n\t\t//\n\t\t//turn function string to gsls\n\t\t//\n\t\tvar str1 = mod.shape.function;\n\t\tstr1=str1.replace(/Math./g, '');\n\t\t\t\n\t\t//change all % to mod(,)\n\t\twhile(str1.indexOf(\"%\")>-1) //While '%' is there\n\t\t{\n\t\t\t//get location\n\t\t\tvar modLocation=str1.indexOf(\"%\");\n\t\t\t//replace with ','\n\t\t\tstr1=str1.replace(/%/, \",\");\n\t\t\toutputs.messageLog.event(\"1:\"+str1);\n\n\t\t\t//parse before\n\t\t\tvar counterBefore=modLocation;\n\t\t\tvar count=0;\n\t\t\tif(str1[--counterBefore]==')')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\twhile(count>0)\n\t\t\t{\n\t\t\t\tcounterBefore--;\n\t\t\t\tif(str1[counterBefore]==')')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\n\t\t\t\t}else if (str1[counterBefore]=='(')\n\t\t\t\t{\n\t\t\t\t\tcount--;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t//parse after\n\t\t\tvar counterAfter=modLocation;\n\t\t\tcount=0;\n\t\t\tif(str1[++counterAfter]=='(')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\twhile(count>0)\n\t\t\t{\n\t\t\t\tcounterAfter++;\n\t\t\t\tif(str1[counterAfter]=='(')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\n\t\t\t\t}else if (str1[counterAfter]==')')\n\t\t\t\t{\n\t\t\t\t\tcount--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tstr1 = str1.substr(0, counterAfter) + \")\" + str1.substr(counterAfter);\n\t\t\tstr1 = str1.substr(0, counterBefore) + \"mod(\" + str1.substr(counterBefore);\n\t\t\toutputs.messageLog.event(\"2\"+str1);\n\n\t\t}\n\n\t\t//turn all ints to floatS\n\t\tvar str='';\n\t\tfor(var i=0;i<str1.length;i++)\n\t\t{\n\t\t\t//if number\n\t\t\tif(!isNaN(str1[i]))\n\t\t\t{\n\t\t\t\tstr+=str1[i];\n\t\t\t\t//check next value\n\t\t\t\tfor(var j=i+1;j<str1.length;j++)\n\t\t\t\t{\n\t\t\t\t//if number add and continue\n\t\t\t\tif(!isNaN(str1[j])) \n\t\t\t\t{\n\t\t\t\t\tstr+=str1[j];\n\t\t\t\t\ti=j;\n\t\t\t\t}\n\t\t\t\t//else if dot add and add numbers till NaN\n\t\t\t\telse if(str1[j]=='.')\n\t\t\t\t{\n\t\t\t\t\tstr+=str1[j];\n\t\t\t\t\ti=j;\n\t\t\t\t\t//add till not num\n\t\t\t\t\tfor(var k=j+1;k<str1.length;k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(!isNaN(str1[k]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstr+=str1[k];\n\t\t\t\t\t\t\ti=k;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tk=str1.length;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tj=str1.length;\n\t\t\t\t}\n\t\t\t\t//else add .0 and go to next number\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstr+='.';\n\t\t\t\t\tstr+='0';\n\t\t\t\t\tj=str1.length;\n\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstr+=str1[i];\n\t\t\t}\n\t\t}\n\t\t// outputs.messageLog.event(str);\n\t\tmod.str=str;\n\n\t\t//if window open update shader function\n\t\tif(mod.windowOpen)\n\t\t{\n\t\t\tmod.updateShaderFunction();\n\t\t}\n\n\t   }}};\n//\n// outputs\n//\nvar outputs = {\n    messageLog:{type:'string',\n      event:function(mess){\n         //mess='hshs' \n        mods.output(mod,'messageLog',mess);\n      }\n    }\n}\n//\n// interface\n//\nvar interface = function(div){\n   mod.div = div\n   //\n   // resolution\n   //\n   div.appendChild(document.createTextNode('resolution: '));\n   var input = document.createElement('input');\n      input.type = 'text';\n      input.size = 3;\n      input.addEventListener('input',function(){\n\t\t\tif(mod.windowOpen)\n\t\t\t{\n\t\t\t\tmod.redraw();\n\t\t\t}\n         });\n      div.appendChild(input);\n      mod.steps = input;\n   div.appendChild(document.createElement('br'));\n   //\n   // alpha correction\n   //\n   div.appendChild(document.createTextNode('Alpha Correction: '));\n   var input = document.createElement('input');\n      input.type = 'text';\n      input.size = 3;\n      input.addEventListener('input',function(){\n\t\t\tif(mod.windowOpen)\n\t\t\t{\n\t\t\t\tmod.redraw();\n\t\t\t}\n         });\n      div.appendChild(input);\n      mod.alphaCorrection = input;\n   div.appendChild(document.createElement('br'));\n   //\n   // rendering style\n   //\n   div.appendChild(document.createTextNode('rendering style: '))\n            var input = document.createElement('SELECT');\n            \n\t\t\tinput.setAttribute(\"id\", \"rend-select\");\n\t\t\t\n\t\t\t//select menu for functions\n\t\t\tvar z = document.createElement(\"option\");\n\t\t\tz.setAttribute(\"value\", \"0\");\n\t\t\tvar t = document.createTextNode('specular');\n\t\t\tz.appendChild(t);\n\t\t\tinput.appendChild(z);\n\n\t\t\tvar z = document.createElement(\"option\");\n\t\t\tz.setAttribute(\"value\", \"1\");\n\t\t\tvar t = document.createTextNode('height map');\n\t\t\tz.appendChild(t);\n\t\t\tinput.appendChild(z);\n\n\t\t\tvar z = document.createElement(\"option\");\n\t\t\tz.setAttribute(\"value\", \"2\");\n\t\t\tvar t = document.createTextNode('xray');\n\t\t\tz.appendChild(t);\n\t\t\tinput.appendChild(z);\n\n\t\t\tvar z = document.createElement(\"option\");\n\t\t\tz.setAttribute(\"value\", \"3\");\n\t\t\tvar t = document.createTextNode('normals');\n\t\t\tz.appendChild(t);\n\t\t\tinput.appendChild(z);\n\n\t\t\tvar z = document.createElement(\"option\");\n\t\t\tz.setAttribute(\"value\", \"4\");\n\t\t\tvar t = document.createTextNode('light');\n\t\t\tz.appendChild(t);\n\t\t\tinput.appendChild(z);\n\t\t \n\t\t\tinput.addEventListener('change',function(evt){\n\t\t\t\tvar temp= document.getElementById(\"rend-select\");\n\t\t\t\tmod.rendType=parseFloat(temp.value);\n\t\t\t\toutputs.messageLog.event(mod.rendType);\n\t\t\t\tmod.updateShaderFunction();\n            });\n\n\t\t\tdiv.appendChild(input);\n\n\t\t\t// outputs.messageLog.event(input);\n\n\tdiv.appendChild(document.createElement('br'));\n   //\n   // view\n   //   \n   div.appendChild(document.createElement('br'))  ; \n   var btn = document.createElement('button');\n      btn.style.padding = mods.ui.padding;\n      btn.style.margin = 1;\n      var span = document.createElement('span');\n         var text = document.createTextNode('view');\n            span.appendChild(text);\n         btn.appendChild(span);\n      btn.addEventListener('click',function(){\n\t\tmod.windowOpen=true; \n         open_view_window();\n         });\n      div.appendChild(btn);\n   }\n//\n// local functions\n//\n \n//\n// open_view_window\n//\nfunction open_view_window() {\n   //\n   // globals\n   //\n    var container;\n    var camera, sceneFirstPass, sceneSecondPass, renderer;\n\tvar clock ; // do i need it\n\tvar rtTexture;\n\tvar materialSecondPass;\n\tvar center;\n\tvar meshSecondPass;\n\tvar boxGeometry;\n   //\n   // get function\n   //\n   \n   //\n   //add shader script\n   //\n   addShaderScripts();\n   //\n   // open the window\n   //\n   open_window();\n   \n   //\n   // open_window\n   //\n   function open_window() {\n      //\n      // open window\n\t  //\n\t  \n      win = window.open('');\n      mod.win = win;\n      //\n      // load three.js\n      //\n      var script = document.createElement('script');\n      script.type = 'text/javascript';\n      script.onload = init_window;\n      script.src = 'js/three.js/three.min.js';\n      mod.div.appendChild(script);\n\t  }\n   //\n   // add shader scripts\n   //\n   function addShaderScripts() {\n\n\t/////////////////////////fragmentShaderFirstPass////////////////////////////////////\n\n    var div = document.createElement('script');\n\n\tdiv.id = 'fragmentShaderFirstPass';\n\tdiv.type = 'x-shader/x-fragment';\n\n    div.innerHTML =\n\t\t`\n\t\t\tvarying vec3 worldSpaceCoords;\n\n\t\t\tvoid main()\n\t\t\t{\n\t\t\t\t//The fragment's world space coordinates as fragment output.\n\t\t\t\tgl_FragColor = vec4( worldSpaceCoords.x , worldSpaceCoords.y, worldSpaceCoords.z, 1 );\n\t\t\t}\n\t\t\t`;\n\t\n\t//\n\tmod.div.appendChild(div);\n\t\n\t/////////////////////////vertexShaderFirstPass////////////////////////////////////\n\tvar div = document.createElement('script');\n\n\tdiv.id = 'vertexShaderFirstPass';\n\tdiv.type = 'x-shader/x-vertex';\n\n    div.innerHTML =\n\t\t`\n\t\t\tvarying vec3 worldSpaceCoords;\n\n\t\t\tvoid main()\n\t\t\t{\n\t\t\t\t//Set the world space coordinates of the back faces vertices as output.\n\t\t\t\tworldSpaceCoords = position + vec3(0.5, 0.5, 0.5); //move it from [-0.5;0.5] to [0,1]\n\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t}\n\t\t\t`;\n\t\n\t//\n\tmod.div.appendChild(div);\n\t/////////////////////////fragmentShaderSecondPass////////////////////////////////////\n\tvar div = document.createElement('script');\n\n\tdiv.id = 'fragmentShaderSecondPass';\n\tdiv.type = 'x-shader/x-fragment';\n\n    \n\tdiv.innerHTML=fragmentShaderSecondPass();\n\tmod.div.appendChild(div);\n\n\t/////////////////////vertexShaderSecondPass///////////////////\n\tvar div = document.createElement('script');\n\n\tdiv.id = 'vertexShaderSecondPass';\n\tdiv.type = 'x-shader/x-vertex';\n\n    div.innerHTML =\n\t\t`\n\t\t\tvarying vec3 worldSpaceCoords;\n\t\t\tvarying vec4 projectedCoords;\n\n\t\t\tvoid main()\n\t\t\t{\n\t\t\t\tworldSpaceCoords = (modelMatrix * vec4(position + vec3(0.5, 0.5,0.5), 1.0 )).xyz;\n\t\t\t\tgl_Position = projectionMatrix *  modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\tprojectedCoords =  projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t}\n\t\t\t`;\n\t//\n\tmod.div.appendChild(div);\n\n\t}\n\n\tfunction fragmentShaderSecondPass()\n\t{\n\t\tvar txt =\n\t\t\t`\n\t\t\t\tvarying vec3 worldSpaceCoords;\n\t\t\t\tvarying vec4 projectedCoords;\n\t\t\t\tuniform sampler2D tex;\n\t\t\t\tuniform float steps;\n\t\t\t\tuniform float alphaCorrection;\n\t\t\t\tuniform float rendType;\n\t\t\t\t// The maximum distance through our rendering volume is sqrt(3).\n\t\t\t\t// The maximum number of steps we take to travel a distance of 1 is 512.\n\t\t\t\t// ceil( sqrt(3) * 512 ) = 887\n\t\t\t\t// This prevents the back of the image from getting cut off when steps=512 & viewing diagonally.\n\t\t\t\tconst int MAX_STEPS = 887;\n\t\t\t\tuniform float xLimit1;\n\t\t\t\tuniform float xLimit2;\n\t\t\t\tuniform float yLimit1;\n\t\t\t\tuniform float yLimit2;\n\t\t\t\tuniform float zLimit1;\n\t\t\t\tuniform float zLimit2;\n\t\t\t\tfloat orgMin=0.0;\n\t\t\t\tfloat orgMax=1.0;\n\t\t\t\tvec3 viewDirection;\n\n\n\t\t\t\tfloat map(vec3 p)\n\t\t\t\t{\n\t\t\t\t\tfloat X= p.x;\n\t\t\t\t\tfloat Y= p.y;\n\t\t\t\t\tfloat Z= p.z;\n\n\t\t\t\t\treturn `+mod.str+`;\n\t\t\t\t}\n\t\t\t\tvec3 simpleLambert (vec3 normal) {\n\t\t\t\t\tvec3 lightDir = vec3(20.0,40.0,-40.0);\t// Light direction\n\t\t\t\t\tvec3 lightCol = vec3(1.0,1.0,1.0);\t\t// Light color\n\t\t\t\t\tvec3 _Color=vec3(0.2,0.5,1.0);\n\t\t\t\t\n\t\t\t\t\tfloat NdotL = max(dot(normal, lightDir),0.0);\n\t\t\t\t\tvec3 c;\n\t\t\t\t\tc.rgb = _Color * lightCol * NdotL;\n\t\t\t\t\treturn c;\n\t\t\t\t}\n\t\t\t\tvec3 specular (vec3 normal) {\n\t\t\t\t\tvec3 lightDir = vec3(20.0,40.0,-40.0);\t// Light direction\n\t\t\t\t\tvec3 lightCol = vec3(1.0,1.0,1.0);\t\t// Light color\n\t\t\t\t\tvec3 _Color=vec3(0.2,0.5,1.0);\n\t\t\t\t\t\n\t\t\t\t\tfloat _SpecularPower=0.5;\n\t\t\t\t\tfloat _Gloss=0.5;\n\t\t\t\t\n\t\t\t\t\tfloat NdotL = max(dot(normal, lightDir),0.0);\n\t\t\t\t\tvec3 c;\n\t\t\t\t\tvec3 h = (lightDir - viewDirection) / 2.0;\n\t\t\t\t\tfloat s = pow( dot(normal, h), _SpecularPower) * _Gloss;\n\t\t\t\t\tc.rgb = _Color * lightCol * NdotL + s;\n\t\t\t\t\treturn c;\n\t\t\t\t}\n\n\t\t\t\t//Acts like a texture3D using Z slices and trilinear filtering.\n\t\t\t\tvec4 sampleAs3DTextureCustom( vec3 texCoord )\n\t\t\t\t{ \n\t\t\t\t\tfloat X= (texCoord.x - orgMin) * (xLimit2 - xLimit1) / (orgMax - orgMin) + xLimit1;\n\t\t\t\t\tfloat Y= (texCoord.y - orgMin) * (yLimit2 - yLimit1) / (orgMax - orgMin) + yLimit1;\n\t\t\t\t\tfloat Z= (texCoord.z - orgMin) * (zLimit2 - zLimit1) / (orgMax - orgMin) + zLimit1;\n\n\t\t\t\t\t//slice color red\n\t\t\t\t\tvec4 m;\n\t\t\t\t\tm=vec4(0.0,0.0,0.0,0.0);\n\n\t\t\t\t\t\n\t\t\t\t\tif(`+mod.str+`>0.0)\n\t\t\t\t\t{\n\t\t\t\t\t\tm.a=1.0;\n\t\t\t\t\t\t//xray\n\t\t\t\t\t\tif(rendType==2.0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tm=vec4(1.0,1.0,1.0,0.1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//heightmap fixed\n\t\t\t\t\t\telse if(rendType==1.0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//heightmap\n\t\t\t\t\t\t\tm.r=texCoord.z;\n\t\t\t\t\t\t\tm.g=texCoord.z;\n\t\t\t\t\t\t\tm.b=texCoord.z;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// //normal\n\t\t\t\t\t\telse if(rendType==3.0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tconst float eps = 0.5;\n\t\t\t\t\t\t\tvec3 p=vec3(X,Y,Z);\n\t\t\t\t\t\t\tm.r=map(p + vec3(eps, 0, 0)\t) - map(p - vec3(eps, 0, 0));\n\t\t\t\t\t\t\tm.g=map(p + vec3(0, eps, 0)\t) - map(p - vec3(0, eps, 0));\n\t\t\t\t\t\t\tm.b=map(p + vec3(0, 0, eps)\t) - map(p - vec3(0, 0, eps));\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//light\n\t\t\t\t\t\telse if(rendType==0.0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tconst float eps = 0.01;\n\t\t\t\t\t\t\tvec3 p=vec3(X,Y,Z);\n\t\t\t\t\t\t\tfloat tempConst=0.05;\n\t\t\t\t\t\t\tm.r=map(p + vec3(eps, 0, 0)\t) - map(p - vec3(eps, 0, 0));\n\t\t\t\t\t\t\tm.g=map(p + vec3(0, eps, 0)\t) - map(p - vec3(0, eps, 0));\n\t\t\t\t\t\t\tm.b=map(p + vec3(0, 0, eps)\t) - map(p - vec3(0, 0, eps));\n\n\t\t\t\t\t\t\tm.rgb=simpleLambert (m.rgb)+tempConst;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//specular\n\t\t\t\t\t\telse if(rendType==4.0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tconst float eps = 0.01;\n\t\t\t\t\t\t\tvec3 p=vec3(X,Y,Z);\n\t\t\t\t\t\t\tfloat tempConst=0.05;\n\n\t\t\t\t\t\t\tm.r=map(p + vec3(eps, 0, 0)\t) - map(p - vec3(eps, 0, 0));\n\t\t\t\t\t\t\tm.g=map(p + vec3(0, eps, 0)\t) - map(p - vec3(0, eps, 0));\n\t\t\t\t\t\t\tm.b=map(p + vec3(0, 0, eps)\t) - map(p - vec3(0, 0, eps));\n\n\t\t\t\t\t\t\tm.rgb=specular (m.rgb)+tempConst;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn m ;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvoid main( void ) {\n\n\t\t\t\t\t//Transform the coordinates it from [-1;1] to [0;1]\n\t\t\t\t\tvec2 texc = vec2(((projectedCoords.x / projectedCoords.w) + 1.0 ) / 2.0,\n\t\t\t\t\t\t\t\t\t((projectedCoords.y / projectedCoords.w) + 1.0 ) / 2.0 );\n\n\t\t\t\t\t//The back position is the world space position stored in the texture.\n\t\t\t\t\tvec3 backPos = texture2D(tex, texc).xyz;\n\n\t\t\t\t\t//The front position is the world space position of the second render pass.\n\t\t\t\t\tvec3 frontPos = worldSpaceCoords;\n\n\t\t\t\t\t//The direction from the front position to back position.\n\t\t\t\t\tvec3 dir = backPos - frontPos;\n\t\t\t\t\t\n\n\t\t\t\t\tfloat rayLength = length(dir);\n\n\t\t\t\t\t//Calculate how long to increment in each step.\n\t\t\t\t\tfloat delta = 1.0 / steps;\n\n\t\t\t\t\t//The increment in each direction for each step.\n\t\t\t\t\tvec3 deltaDirection = normalize(dir) * delta;\n\n\t\t\t\t\tviewDirection=deltaDirection;//amira added\n\n\t\t\t\t\tfloat deltaDirectionLength = length(deltaDirection);\n\n\t\t\t\t\t//Start the ray casting from the front position.\n\t\t\t\t\tvec3 currentPosition = frontPos;\n\n\t\t\t\t\t//The color accumulator.\n\t\t\t\t\tvec4 accumulatedColor = vec4(0.0);\n\n\t\t\t\t\t//The alpha value accumulated so far.\n\t\t\t\t\tfloat accumulatedAlpha = 0.0;\n\n\t\t\t\t\t//How long has the ray travelled so far.\n\t\t\t\t\tfloat accumulatedLength = 0.0;\n\n\t\t\t\t\t//If we have twice as many samples, we only need ~1/2 the alpha per sample.\n\t\t\t\t\t//Scaling by 256/10 just happens to give a good value for the alphaCorrection slider.\n\t\t\t\t\tfloat alphaScaleFactor = 25.6 * delta;\n\n\t\t\t\t\tvec4 colorSample;\n\t\t\t\t\tfloat alphaSample;\n\n\t\t\t\t\t//Perform the ray marching iterations\n\t\t\t\t\tfor(int i = 0; i < MAX_STEPS; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Get the voxel intensity value from the 3D texture.\n\t\t\t\t\t\tcolorSample = sampleAs3DTextureCustom( currentPosition );\n\n\t\t\t\t\t\t//Allow the alpha correction customization.\n\t\t\t\t\t\talphaSample = colorSample.a * alphaCorrection;\n\n\t\t\t\t\t\t//Applying this effect to both the color and alpha accumulation results in more realistic transparency.\n\t\t\t\t\t\talphaSample *= (1.0 - accumulatedAlpha);\n\n\t\t\t\t\t\t//Scaling alpha by the number of steps makes the final color invariant to the step size.\n\t\t\t\t\t\talphaSample *= alphaScaleFactor;\n\n\t\t\t\t\t\t//Perform the composition.\n\t\t\t\t\t\taccumulatedColor += colorSample * alphaSample;\n\n\t\t\t\t\t\t//Store the alpha accumulated so far.\n\t\t\t\t\t\taccumulatedAlpha += alphaSample;\n\n\t\t\t\t\t\t//Advance the ray.\n\t\t\t\t\t\tcurrentPosition += deltaDirection;\n\t\t\t\t\t\taccumulatedLength += deltaDirectionLength;\n\n\t\t\t\t\t\t//If the length traversed is more than the ray length, or if the alpha accumulated reaches 1.0 then exit.\n\t\t\t\t\t\tif(accumulatedLength >= rayLength || accumulatedAlpha >= 1.0 )\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tgl_FragColor  = accumulatedColor;\n\n\t\t\t\t}\n\t\t\t\t`;\n\t\treturn txt;\n\t}\n\n//\n   //\n   // init_window\n   //\nfunction init_window() {\n      //\n      // close button\n      //\n      var btn = document.createElement('button');\n         btn.appendChild(document.createTextNode('close'));\n         btn.style.padding = mods.ui.padding;\n         btn.style.margin = 1;\n         btn.addEventListener('click',function(){\n            win.close()\n            mod.win = undefined;\n            })\n         win.document.body.appendChild(btn)\n      //\n      // label text\n      //\n      var text = win.document.createTextNode(' left: pan, right: rotate, scroll: zoom');\n         win.document.body.appendChild(text);\n      //\n      // GL container\n      //\n      win.document.body.appendChild(document.createElement('br')) ;  \n      container = win.document.createElement('div');\n      container.style.overflow = 'hidden';\n      win.document.body.appendChild(container);\n      \n\t  //\n\t  //\n\t\n\tclock = new THREE.Clock(); //do i need it?\n\tcenter= new THREE.Vector3(0,0,0);\n\t//\n\t// add camera\n\t//\n\tcamera = new THREE.PerspectiveCamera( 40, win.innerWidth / win.innerHeight, 0.01, 3000.0 );\n\tcamera.position.z = 2.0;\n\t \n\tvar screenSize = new THREE.Vector2( win.innerWidth, win.innerHeight );\n\trtTexture = new THREE.WebGLRenderTarget( screenSize.x, screenSize.y,\n\t\t\t\t\t\t\t\t\t\t\t{ \tminFilter: THREE.LinearFilter,\n\t\t\t\t\t\t\t\t\t\t\t\tmagFilter: THREE.LinearFilter,\n\t\t\t\t\t\t\t\t\t\t\t\twrapS:  THREE.ClampToEdgeWrapping,\n\t\t\t\t\t\t\t\t\t\t\t\twrapT:  THREE.ClampToEdgeWrapping,\n\t\t\t\t\t\t\t\t\t\t\t\tformat: THREE.RGBAFormat,\n\t\t\t\t\t\t\t\t\t\t\t\ttype: THREE.FloatType,\n\t\t\t\t\t\t\t\t\t\t\t\tgenerateMipmaps: false} );\n\n\n\tvar materialFirstPass = new THREE.ShaderMaterial( {\n\t\tvertexShader: document.getElementById( 'vertexShaderFirstPass' ).textContent,\n\t\tfragmentShader: document.getElementById( 'fragmentShaderFirstPass' ).textContent,\n\t\tside: THREE.BackSide\n\t} );\n\n\tvar lookAtVector = new THREE.Vector3(0,0, -1);\n\tlookAtVector.applyQuaternion(camera.quaternion);\t\n\n\tmaterialSecondPass = new THREE.ShaderMaterial( {\n\t\tvertexShader: document.getElementById( 'vertexShaderSecondPass' ).textContent,\n\t\tfragmentShader: document.getElementById( 'fragmentShaderSecondPass' ).textContent,\n\t\tside: THREE.FrontSide,\n\t\tuniforms: {\ttex:  { type: \"t\", value: rtTexture },\n\t\t\t\t\tsteps : {type: \"1f\" , value: mod.steps.value }, \n\t\t\t\t\trendType : {type: \"1f\" , value: mod.rendType},\n\t\t\t\t\txLimit1 : {type: \"1f\" , value: mod.xLimit1 }, \n\t\t\t\t\txLimit2 : {type: \"1f\" , value: mod.xLimit2 }, \n\t\t\t\t\tyLimit1 : {type: \"1f\" , value: mod.yLimit1 }, \n\t\t\t\t\tyLimit2 : {type: \"1f\" , value: mod.yLimit2 }, \n\t\t\t\t\tzLimit1 : {type: \"1f\" , value: mod.zLimit1 }, \n\t\t\t\t\tzLimit2 : {type: \"1f\" , value: mod.zLimit2 }, \n\t\t\t\t\talphaCorrection : {type: \"1f\" , value: mod.alphaCorrection.value }}\n\t\t});\n\n\t\n\t//outputs.messageLog.event('s');\n\n\tsceneFirstPass = new THREE.Scene();\n\tsceneSecondPass = new THREE.Scene();\n\n\tboxGeometry = new THREE.BoxGeometry(1.0, 1.0, 1.0);\n\tboxGeometry.doubleSided = true;\n\n\tvar meshFirstPass = new THREE.Mesh( boxGeometry, materialFirstPass );\n\tmeshSecondPass = new THREE.Mesh( boxGeometry, materialSecondPass );\n\n\tsceneFirstPass.add( meshFirstPass );\n\tsceneSecondPass.add( meshSecondPass );\n\n\trenderer = new THREE.WebGLRenderer();\n\tcontainer.appendChild( renderer.domElement );\n\n\t//camera and controls\n\tcamera.aspect = win.innerWidth / win.innerHeight;\n\tcamera.up = new THREE.Vector3(0, 0, 1);\n\tcamera.position.x = 5;\n\tcamera.lookAt(new THREE.Vector3(0,0,0));\n\tcamera.updateProjectionMatrix();\n\tvar Controls = (function(Controls) {\n\t\t// \"use strict\";\n\t\n\t\t// Check for double inclusion\n\t\tif (Controls.addMouseHandler)\n\t\t\treturn Controls;\n\t\n\t\tControls.addMouseHandler = function (domObject, drag, zoomIn, zoomOut) {\n\t\t\tvar startDragX = null,\n\t\t\t\tstartDragY = null;\n\t\n\t\t\tfunction mouseWheelHandler(e) {\n\t\t\t\te = window.event || e;\n\t\t\t\tvar delta = Math.max(-1, Math.min(1, (e.wheelDelta || -e.detail)));\n\t\n\t\t\t\tif (delta < 0 && zoomOut) {\n\t\t\t\t\tzoomOut(delta);\n\t\t\t\t} else if (zoomIn) {\n\t\t\t\t\tzoomIn(delta);\n\t\t\t\t}\n\t\n\t\t\t\te.preventDefault();\n\t\t\t}\n\t\n\t\t\tfunction mouseDownHandler(e) {\n\t\t\t\tstartDragX = e.clientX;\n\t\t\t\tstartDragY = e.clientY;\n\t\n\t\t\t\te.preventDefault();\n\t\t\t}\n\t\n\t\t\tfunction mouseMoveHandler(e) {\n\t\t\t\tif (startDragX === null || startDragY === null)\n\t\t\t\t\treturn;\n\t\n\t\t\t\tif (drag)\n\t\t\t\t\tdrag(e.clientX - startDragX, e.clientY - startDragY);\n\t\n\t\t\t\tstartDragX = e.clientX;\n\t\t\t\tstartDragY = e.clientY;\n\t\n\t\t\t\te.preventDefault();\n\t\t\t}\n\t\n\t\t\tfunction mouseUpHandler(e) {\n\t\t\t\tmouseMoveHandler.call(this, e);\n\t\t\t\tstartDragX = null;\n\t\t\t\tstartDragY = null;\n\t\n\t\t\t\te.preventDefault();\n\t\t\t}\n\t\n\t\t\tdomObject.addEventListener(\"mousewheel\", mouseWheelHandler);\n\t\t\tdomObject.addEventListener(\"DOMMouseScroll\", mouseWheelHandler);\n\t\t\tdomObject.addEventListener(\"mousedown\", mouseDownHandler);\n\t\t\tdomObject.addEventListener(\"mousemove\", mouseMoveHandler);\n\t\t\tdomObject.addEventListener(\"mouseup\", mouseUpHandler);\n\t\t};\n\t\treturn Controls;\n\t}(Controls || {}));\n\tControls.addMouseHandler(renderer.domElement, drag, zoomIn, zoomOut);\n\t\n\n\trenderer.setSize( win.innerWidth, win.innerHeight );\n\n\twin.addEventListener( 'resize', onWindowResize, false );\n\t\n\t //animate();\n\t render();\n\t}\n  \n  \n\t/////////////// \n\tfunction onWindowResize( event ) {\n\n\t\t//TODO: Fix box white edge when window resize\n\t\trenderer.setSize( win.innerWidth, win.innerHeight );\n\n\t\tcamera.aspect = win.innerWidth / win.innerHeight;\n\t\tcamera.updateProjectionMatrix();\n\n\t\tredraw();\n\t}\n\n    ////////////////\n\tfunction animate() {\n\t\trequestAnimationFrame( animate );\n\t\trender();\n\t}\n\n\t/////////\n\tfunction redraw(){\n\t\trender();\n\t}\n\tmod.redraw=redraw;\n\n    //////////////////\n\tfunction render() {\n\n\t\tvar delta = clock.getDelta();\n\n\t\tvar lookAtVector = new THREE.Vector3(0,0, -1);\n\t\tlookAtVector.applyQuaternion(camera.quaternion);\n\n\t\tmaterialSecondPass.uniforms.steps.value = mod.steps.value;\n\t\tmaterialSecondPass.uniforms.alphaCorrection.value = mod.alphaCorrection.value;\n\t\tmaterialSecondPass.uniforms.rendType.value=mod.rendType;\n\t\tmaterialSecondPass.uniforms.xLimit1.value =mod.xLimit1 ;\n\t\tmaterialSecondPass.uniforms.xLimit2.value =mod.xLimit2 ; \n\t\tmaterialSecondPass.uniforms.yLimit1.value =mod.yLimit1 ; \n\t\tmaterialSecondPass.uniforms.yLimit2.value =mod.yLimit2 ; \n\t\tmaterialSecondPass.uniforms.zLimit1.value =mod.zLimit1 ; \n\t\tmaterialSecondPass.uniforms.zLimit2.value =mod.zLimit2 ;\n\n\t\t//Render first pass and store the world space coords of the back face fragments into the texture.\n\t\trenderer.render( sceneFirstPass, camera, rtTexture, true );\n\n\t\t//Render the second pass and perform the volume rendering.\n\t\trenderer.render( sceneSecondPass, camera );\n\n\t\t\n\t\t \n\t}\n\n\t//\n\t//when fuction changes\n\tfunction updateShaderFunction()\n\t{\n\t\t// outputs.messageLog.event('update shader');\n\t\t\n\t\t// outputs.messageLog.event(mod.xLimit1);\n\n\t\tvar div = document.getElementById('fragmentShaderSecondPass');\n\n\t\tdiv.innerHTML=\"\";\n\t\tdiv.innerHTML =fragmentShaderSecondPass();\n\t\t\n\t\tvar lookAtVector = new THREE.Vector3(0,0, -1);\n\t\tlookAtVector.applyQuaternion(camera.quaternion);\n\n\t\t// outputs.messageLog.event('update shader1');\n\t\tmaterialSecondPass = new THREE.ShaderMaterial( {\n\t\t\tvertexShader: document.getElementById( 'vertexShaderSecondPass' ).textContent,\n\t\t\tfragmentShader: document.getElementById( 'fragmentShaderSecondPass' ).textContent,\n\t\t\tside: THREE.FrontSide,\n\t\t\tuniforms: {\ttex:  { type: \"t\", value: rtTexture },\n\t\t\t\t\t\tsteps : {type: \"1f\" , value: mod.steps.value }, \n\t\t\t\t\t\trendType : {type: \"1f\" , value: mod.rendType}, \n\t\t\t\t\t\txLimit1 : {type: \"1f\" , value: mod.xLimit1 }, \n\t\t\t\t\t\txLimit2 : {type: \"1f\" , value: mod.xLimit2 }, \n\t\t\t\t\t\tyLimit1 : {type: \"1f\" , value: mod.yLimit1 }, \n\t\t\t\t\t\tyLimit2 : {type: \"1f\" , value: mod.yLimit2 }, \n\t\t\t\t\t\tzLimit1 : {type: \"1f\" , value: mod.zLimit1 }, \n\t\t\t\t\t\tzLimit2 : {type: \"1f\" , value: mod.zLimit2 }, \n\t\t\t\t\t\talphaCorrection : {type: \"1f\" , value: mod.alphaCorrection.value}}\n\t\t\t});\n\n\t\tmeshSecondPass.material=materialSecondPass;\n\t\tmeshSecondPass.material.needsUpdate = true;\n\n\t\tredraw();\n\t\t//test performance\n\t\tmod.tend = Date.now();\n\t\tvar dt = mod.tend-mod.tstart;\n\t\t// outputs.messageLog.event(dt/1000);\n\n\t}\n\tmod.updateShaderFunction=updateShaderFunction;\n\t//\n   \t//controls\n   \t//\n   \tfunction drag(deltaX, deltaY) {\n\t\tvar radPerPixel = (Math.PI / 450),\n\t\t\tdeltaPhi = radPerPixel * deltaX,\n\t\t\tdeltaTheta = radPerPixel * deltaY,\n\t\t\tpos = camera.position.sub(center),\n\t\t\tradius = pos.length(),\n\t\t\ttheta = Math.acos(pos.z / radius),\n\t\t\tphi = Math.atan2(pos.y, pos.x);\n\n\t\t// Subtract deltaTheta and deltaPhi\n\t\ttheta = Math.min(Math.max(theta - deltaTheta, 0), Math.PI);\n\t\tphi -= deltaPhi;\n\n\t\t// Turn back into Cartesian coordinates\n\t\tpos.x = radius * Math.sin(theta) * Math.cos(phi);\n\t\tpos.y = radius * Math.sin(theta) * Math.sin(phi);\n\t\tpos.z = radius * Math.cos(theta);\n\n\t\tcamera.position.add(center);\n\t\tcamera.lookAt(center);\n\t\tredraw();\n\t}\n\n\t///\n\tfunction zoomIn() {\n\t\tcamera.position.sub(center).multiplyScalar(0.9).add(center);\n\t\tredraw();\n\t}\n\n\t///\n\tfunction zoomOut() {\n\t\tcamera.position.sub(center).multiplyScalar(1.1).add(center);\n\t\tredraw();\n\t}\n}\n\n//\n// return values\n//\nreturn ({\n   mod:mod,\n   name:name,\n   init:init,\n   inputs:inputs,\n   outputs:outputs,\n   interface:interface\n   });\n}());\n","top":"42","left":"3003","inputs":{},"outputs":{}},"0.68537421077021":{"definition":"//\n// frep view slice\n//\n// Neil Gershenfeld\n// (c) Massachusetts Institute of Technology 2018\n//\n// This work may be reproduced, modified, distributed, performed, and\n// displayed for any purpose, but must acknowledge the mods\n// project. Copyright is retained and must be preserved. The work is\n// provided as is; no warranty is provided, and users accept all\n// liability.\n//\n// closure\n//\n(function(){\n//\n// module globals\n//\nvar mod = {}\n//\n// name\n//\nvar name = 'frep view slice'\n//\n// initialization\n//\nvar init = function() {\n   mod.width.value = 1000\n   mod.z.value = 0\n   }\n//\n// inputs\n//\nvar inputs = {\n   shape:{type:'frep',\n      event:function(evt){\n         mod.fn.value = evt.detail.function\n         view_slice(evt.detail)\n         }}}\n//\n// outputs\n//\nvar outputs = {\n   image:{type:'RGBA',\n      event:function(){\n         var ctx = mod.img.getContext(\"2d\")\n         var img = ctx.getImageData(0,0,mod.img.width,mod.img.height)\n         mods.output(mod,'image',img)\n         }}}\n//\n// interface\n//\nvar interface = function(div){\n   mod.div = div\n   //\n   // on-screen drawing canvas\n   //\n   var canvas = document.createElement('canvas')\n      canvas.width = mods.ui.canvas\n      canvas.height = mods.ui.canvas\n      canvas.style.backgroundColor = 'rgb(255,255,255)'\n      div.appendChild(canvas)\n      mod.canvas = canvas\n   div.appendChild(document.createElement('br'))\n   //\n   // off-screen image canvas\n   //\n   var canvas = document.createElement('canvas')\n      mod.img = canvas\n   //\n   // x\n   //\n   div.appendChild(document.createTextNode('x: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 3\n      input.addEventListener('input',function(){\n         mod.y.value = ''\n         mod.z.value = ''\n         })\n      div.appendChild(input)\n      mod.x = input\n   //\n   // y\n   //\n   div.appendChild(document.createTextNode(' y: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 3\n      input.addEventListener('input',function(){\n         mod.x.value = ''\n         mod.z.value = ''\n         })\n      div.appendChild(input)\n      mod.y = input\n   //\n   // z\n   //\n   div.appendChild(document.createTextNode(' z: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 3\n      input.addEventListener('input',function(){\n         mod.x.value = ''\n         mod.y.value = ''\n         })\n      div.appendChild(input)\n      mod.z = input\n   div.appendChild(document.createElement('br'))\n   //\n   // width\n   //\n   div.appendChild(document.createTextNode('width: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 3\n      input.addEventListener('input',function(){\n         mod.height.value = ''\n         })\n      div.appendChild(input)\n      mod.width = input\n   //\n   // height\n   //\n   div.appendChild(document.createTextNode(' height: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 3\n      input.addEventListener('input',function(){\n         mod.width.value = ''\n         })\n      div.appendChild(input)\n      mod.height = input\n   div.appendChild(document.createElement('br'))\n   //\n   // function\n   //\n   div.appendChild(document.createTextNode('function: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 10\n      div.appendChild(input)\n      mod.fn = input\n   div.appendChild(document.createElement('br'))\n   //\n   // view button\n   //\n   div.appendChild(document.createTextNode(' '))\n   var btn = document.createElement('button')\n      btn.style.padding = mods.ui.padding\n      btn.style.margin = 1\n      btn.appendChild(document.createTextNode('view'))\n      btn.addEventListener('click',function(){\n         mod.win = window.open('')\n         mod.win.document.body.style.overflow = 'hidden'\n         mod.win.document.body.style.border = 0\n         mod.win.document.body.style.padding = 0\n         mod.win.document.body.style.margin = 0\n         mod.win.addEventListener('unload',function() {\n            mod.win = null\n            })\n         var canvas = document.createElement('canvas')\n            canvas.setAttribute('id',mod.div.id+'canvas')\n            mod.win.document.body.appendChild(canvas)\n         var ctx = canvas.getContext(\"2d\")\n         canvas.width = window.innerWidth\n         canvas.height = window.innerWidth\n         var h = mod.img.height\n         var w = mod.img.width\n         if (w > h) {\n            var wd = canvas.width\n            var hd = canvas.width*h/w\n            }\n         else {\n            var wd = canvas.height*w/h\n            var hd = canvas.height\n            }\n         ctx.fillStyle = '#dddddd'\n         ctx.fillRect(0,0,canvas.width,canvas.height)\n         ctx.drawImage(mod.img,0,0,wd,hd)\n         })\n      div.appendChild(btn)\n   }\n//\n// local functions\n//\n// view_slice\n//\nfunction view_slice(shape) {   \n   var fn = shape.function\n   var vars = shape.variables\n   var limits = shape.limits\n   var type = shape.type\n   var x = parseFloat(mod.x.value)\n   var y = parseFloat(mod.y.value)\n   var z = parseFloat(mod.z.value)\n   var w = parseInt(mod.width.value)\n   var h = parseInt(mod.height.value)\n   if (vars.length == 2) {\n      var xvar = vars[0]\n      var xlimits = limits[0]\n      var yvar = vars[1]\n      var ylimits = limits[1]\n      var zvar = ''\n      var zval = 0\n      }\n   else if (!isNaN(x)) {\n      var xvar = vars[1]\n      var xlimits = limits[1]\n      var yvar = vars[2]\n      var ylimits = limits[2]\n      var zvar = vars[0]\n      var zval = x\n      }\n   else if (!isNaN(y)) {\n      var xvar = vars[0]\n      var xlimits = limits[0]\n      var yvar = vars[2]\n      var ylimits = limits[2]\n      var zvar = vars[1]\n      var zval = y\n      }\n   else if (!isNaN(z)) {\n      var xvar = vars[0]\n      var xlimits = limits[0]\n      var yvar = vars[1]\n      var ylimits = limits[1]\n      var zvar = vars[2]\n      var zval = z\n      }\n   if (!isNaN(w))\n      h = Math.floor(w*(ylimits[1]-ylimits[0])/(xlimits[1]-xlimits[0]))\n   else\n      w = Math.floor(h*(xlimits[1]-xlimits[0])/(ylimits[1]-ylimits[0]))\n   mod.img.height = h\n   mod.img.width = w\n   var blob = new Blob(['('+worker.toString()+'())'])\n   var url = window.URL.createObjectURL(blob)\n   var webworker = new Worker(url)\n   webworker.addEventListener('message',function(evt) {\n      window.URL.revokeObjectURL(url)\n      var h = mod.img.height\n      var w = mod.img.width\n      var buf = new Uint8ClampedArray(evt.data.buffer)\n      var imgdata = new ImageData(buf,w,h)\n      var ctx = mod.img.getContext(\"2d\")\n      ctx.putImageData(imgdata,0,0)\n      if (w > h) {\n         var x0 = 0\n         var y0 = mod.canvas.height*.5*(1-h/w)\n         var wd = mod.canvas.width\n         var hd = mod.canvas.width*h/w\n         }\n      else {\n         var x0 = mod.canvas.width*.5*(1-w/h)\n         var y0 = 0\n         var wd = mod.canvas.height*w/h\n         var hd = mod.canvas.height\n         }\n      var ctx = mod.canvas.getContext(\"2d\")\n      ctx.fillStyle = '#dddddd'\n      ctx.fillRect(0,0,mod.canvas.width,mod.canvas.height)\n      ctx.drawImage(mod.img,x0,y0,wd,hd)\n      if (mod.win != null) {\n         var canvas = mod.win.document.getElementById(mod.div.id+'canvas')\n         var ctx = canvas.getContext(\"2d\")\n         canvas.width = window.innerWidth\n         canvas.height = window.innerWidth\n         var h = mod.img.height\n         var w = mod.img.width\n         if (w > h) {\n            var wd = canvas.width\n            var hd = canvas.width*h/w\n            }\n         else {\n            var wd = canvas.height*w/h\n            var hd = canvas.height\n            }\n         ctx.fillStyle = '#dddddd'\n         ctx.fillRect(0,0,canvas.width,canvas.height)\n         ctx.drawImage(mod.img,0,0,wd,hd)\n         }\n      webworker.terminate()\n      outputs.image.event()\n      })\n   var ctx = mod.canvas.getContext(\"2d\")\n   ctx.fillStyle = '#dddddd'\n   ctx.fillRect(0,0,mod.canvas.width,mod.canvas.height)\n   var ctx = mod.img.getContext(\"2d\")\n   ctx.fillStyle = '#dddddd'\n   ctx.fillRect(0,0,mod.img.width,mod.img.height)\n   var img = ctx.getImageData(0,0,mod.img.width,mod.img.height)\n   webworker.postMessage({\n      height:img.height,width:img.width,\n      xvar:xvar,yvar:yvar,zvar:zvar,zval:zval,\n      xlimits:xlimits,ylimits:ylimits,\n      function:fn,\n      buffer:img.data.buffer},\n      [img.data.buffer])\n   }\n//\n// worker\n//\nfunction worker() {\n   self.addEventListener('message',function(evt) {\n      var h = evt.data.height\n      var w = evt.data.width\n      var xvar = evt.data.xvar\n      var yvar = evt.data.yvar\n      var zvar = evt.data.zvar\n      var zval = evt.data.zval\n      var xlimits = evt.data.xlimits\n      var ylimits = evt.data.ylimits\n      var buf = new Uint8ClampedArray(evt.data.buffer)\n      var f = new Function(xvar,yvar,zvar,'return ('+evt.data.function+')')\n      var x,y,v\n      for (var row = 0; row < h; ++row) {\n         y = ylimits[0]+(ylimits[1]-ylimits[0])*row/(h-1)\n         for (var col = 0; col < w; ++col) {\n            x = xlimits[0]+(xlimits[1]-xlimits[0])*col/(w-1)\n            v = (f(x,y,zval) >= 0) ? 255 : 0\n            buf[(h-1-row)*w*4+col*4+0] = v\n            buf[(h-1-row)*w*4+col*4+1] = v\n            buf[(h-1-row)*w*4+col*4+2] = v\n            buf[(h-1-row)*w*4+col*4+3] = 255\n            }\n         }\n      self.postMessage({buffer:buf.buffer},[buf.buffer])\n      })\n   }\n//\n// return values\n//\nreturn ({\n   mod:mod,\n   name:name,\n   init:init,\n   inputs:inputs,\n   outputs:outputs,\n   interface:interface\n   })\n}())\n","top":"12","left":"1194","inputs":{},"outputs":{}},"0.21759291207561082":{"definition":"//\n// frep subtract\n//\n// Neil Gershenfeld\n// (c) Massachusetts Institute of Technology 2017\n//\n// This work may be reproduced, modified, distributed, performed, and\n// displayed for any purpose, but must acknowledge the mods\n// project. Copyright is retained and must be preserved. The work is\n// provided as is; no warranty is provided, and users accept all\n// liability.\n//\n// closure\n//\n(function(){\n//\n// module globals\n//\nvar mod = {}\n//\n// name\n//\nvar name = 'frep subtract'\n//\n// initialization\n//\nvar init = function() {\n   mod.shape0 = null\n   mod.shape1 = null\n   mod.fn0.value = ''\n   mod.fn1.value = ''\n   }\n//\n// inputs\n//\nvar inputs = {\n   shape0:{type:'',label:'shape 0',\n      event:function(evt){\n         mod.shape0 = evt.detail\n         mod.fn0.value = evt.detail.function\n         outputs.shape.event()\n         }},\n   shape1:{type:'',label:'shape 1',\n      event:function(evt){\n         mod.shape1 = evt.detail\n         mod.fn1.value = evt.detail.function\n         outputs.shape.event()\n         }},\n   clear:{type:'',\n      event:function(evt){\n         mod.shape0 = null\n         mod.shape1 = null\n         mod.fn0.value = ''\n         mod.fn1.value = ''\n         }}}\n//\n// outputs\n//\nvar outputs = {\n   shape:{type:'',\n      event:function(){\n         if ((mod.shape0 != null) && (mod.shape1 != null)) {\n            var fn = `Math.min(${mod.shape0.function},-(${mod.shape1.function}))`\n            var variables = mod.shape0.variables\n            var type = mod.shape0.type        \n            var limits = []\n            for (var v = 0; v < mod.shape0.limits.length; ++v)\n               limits[v] = [mod.shape0.limits[v][0],mod.shape0.limits[v][1]]\n            var shape = {function:fn,variables:variables,limits:limits,type:type}\n            mods.output(mod,'shape',shape)}\n            }\n         }}\n//\n// interface\n//\nvar interface = function(div){\n   mod.div = div\n   //\n   // function 0\n   //\n   div.appendChild(document.createTextNode('function 0: '))\n   div.appendChild(document.createElement('br'))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 10\n      div.appendChild(input)\n      mod.fn0 = input\n   div.appendChild(document.createElement('br'))\n   //\n   // function 1\n   //\n   div.appendChild(document.createTextNode('function 1: '))\n   div.appendChild(document.createElement('br'))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 10\n      div.appendChild(input)\n      mod.fn1 = input\n   div.appendChild(document.createElement('br'))\n   }\n//\n// local functions\n//\n;\n//\n// return values\n//\nreturn ({\n   mod:mod,\n   name:name,\n   init:init,\n   inputs:inputs,\n   outputs:outputs,\n   interface:interface\n   })\n}())\n","top":"316","left":"497","inputs":{},"outputs":{}},"0.7487681738870572":{"definition":"//\n// frep add\n//\n// Neil Gershenfeld\n// (c) Massachusetts Institute of Technology 2017\n//\n// This work may be reproduced, modified, distributed, performed, and\n// displayed for any purpose, but must acknowledge the mods\n// project. Copyright is retained and must be preserved. The work is\n// provided as is; no warranty is provided, and users accept all\n// liability.\n//\n// closure\n//\n(function(){\n//\n// module globals\n//\nvar mod = {}\n//\n// name\n//\nvar name = 'frep add'\n//\n// initialization\n//\nvar init = function() {\n   mod.shape0 = null\n   mod.shape1 = null\n   mod.fn0.value = ''\n   mod.fn1.value = ''\n   }\n//\n// inputs\n//\nvar inputs = {\n   shape0:{type:'',label:'shape 0',\n      event:function(evt){\n         mod.shape0 = evt.detail\n         mod.fn0.value = evt.detail.function\n         outputs.shape.event()\n         }},\n   shape1:{type:'',label:'shape 1',\n      event:function(evt){\n         mod.shape1 = evt.detail\n         mod.fn1.value = evt.detail.function\n         outputs.shape.event()\n         }},\n   clear:{type:'',\n      event:function(evt){\n         mod.shape0 = null\n         mod.shape1 = null\n         mod.fn0.value = ''\n         mod.fn1.value = ''\n         }}}\n//\n// outputs\n//\nvar outputs = {\n   shape:{type:'',\n      event:function(){\n         if ((mod.shape0 != null) && (mod.shape1 != null)) {\n            var fn = `Math.max(${mod.shape0.function},${mod.shape1.function})`\n            var variables = mod.shape0.variables\n            var type = mod.shape0.type        \n            var limits = []\n            for (var v = 0; v < mod.shape0.limits.length; ++v) {\n               limits[v] = []\n               if (mod.shape0.limits[v][0] < mod.shape1.limits[v][0])\n                  limits[v][0] = mod.shape0.limits[v][0]\n               else\n                  limits[v][0] = mod.shape1.limits[v][0]\n               if (mod.shape0.limits[v][1] > mod.shape1.limits[v][1])\n                  limits[v][1] = mod.shape0.limits[v][1]\n               else\n                  limits[v][1] = mod.shape1.limits[v][1]\n               }\n            var shape = {function:fn,variables:variables,limits:limits,type:type}\n            mods.output(mod,'shape',shape)}\n            }\n         }}\n//\n// interface\n//\nvar interface = function(div){\n   mod.div = div\n   //\n   // function 0\n   //\n   div.appendChild(document.createTextNode('function 0: '))\n   div.appendChild(document.createElement('br'))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 10\n      div.appendChild(input)\n      mod.fn0 = input\n   div.appendChild(document.createElement('br'))\n   //\n   // function 1\n   //\n   div.appendChild(document.createTextNode('function 1: '))\n   div.appendChild(document.createElement('br'))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 10\n      div.appendChild(input)\n      mod.fn1 = input\n   div.appendChild(document.createElement('br'))\n   }\n//\n// local functions\n//\n;\n//\n// return values\n//\nreturn ({\n   mod:mod,\n   name:name,\n   init:init,\n   inputs:inputs,\n   outputs:outputs,\n   interface:interface\n   })\n}())\n","top":"299","left":"890","inputs":{},"outputs":{}},"0.49560366170330883":{"definition":"//\n// frep add\n//\n// Neil Gershenfeld\n// (c) Massachusetts Institute of Technology 2017\n//\n// This work may be reproduced, modified, distributed, performed, and\n// displayed for any purpose, but must acknowledge the mods\n// project. Copyright is retained and must be preserved. The work is\n// provided as is; no warranty is provided, and users accept all\n// liability.\n//\n// closure\n//\n(function(){\n//\n// module globals\n//\nvar mod = {}\n//\n// name\n//\nvar name = 'frep add'\n//\n// initialization\n//\nvar init = function() {\n   mod.shape0 = null\n   mod.shape1 = null\n   mod.fn0.value = ''\n   mod.fn1.value = ''\n   }\n//\n// inputs\n//\nvar inputs = {\n   shape0:{type:'',label:'shape 0',\n      event:function(evt){\n         mod.shape0 = evt.detail\n         mod.fn0.value = evt.detail.function\n         outputs.shape.event()\n         }},\n   shape1:{type:'',label:'shape 1',\n      event:function(evt){\n         mod.shape1 = evt.detail\n         mod.fn1.value = evt.detail.function\n         outputs.shape.event()\n         }},\n   clear:{type:'',\n      event:function(evt){\n         mod.shape0 = null\n         mod.shape1 = null\n         mod.fn0.value = ''\n         mod.fn1.value = ''\n         }}}\n//\n// outputs\n//\nvar outputs = {\n   shape:{type:'',\n      event:function(){\n         if ((mod.shape0 != null) && (mod.shape1 != null)) {\n            var fn = `Math.max(${mod.shape0.function},${mod.shape1.function})`\n            var variables = mod.shape0.variables\n            var type = mod.shape0.type        \n            var limits = []\n            for (var v = 0; v < mod.shape0.limits.length; ++v) {\n               limits[v] = []\n               if (mod.shape0.limits[v][0] < mod.shape1.limits[v][0])\n                  limits[v][0] = mod.shape0.limits[v][0]\n               else\n                  limits[v][0] = mod.shape1.limits[v][0]\n               if (mod.shape0.limits[v][1] > mod.shape1.limits[v][1])\n                  limits[v][1] = mod.shape0.limits[v][1]\n               else\n                  limits[v][1] = mod.shape1.limits[v][1]\n               }\n            var shape = {function:fn,variables:variables,limits:limits,type:type}\n            mods.output(mod,'shape',shape)}\n            }\n         }}\n//\n// interface\n//\nvar interface = function(div){\n   mod.div = div\n   //\n   // function 0\n   //\n   div.appendChild(document.createTextNode('function 0: '))\n   div.appendChild(document.createElement('br'))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 10\n      div.appendChild(input)\n      mod.fn0 = input\n   div.appendChild(document.createElement('br'))\n   //\n   // function 1\n   //\n   div.appendChild(document.createTextNode('function 1: '))\n   div.appendChild(document.createElement('br'))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 10\n      div.appendChild(input)\n      mod.fn1 = input\n   div.appendChild(document.createElement('br'))\n   }\n//\n// local functions\n//\n;\n//\n// return values\n//\nreturn ({\n   mod:mod,\n   name:name,\n   init:init,\n   inputs:inputs,\n   outputs:outputs,\n   interface:interface\n   })\n}())\n","top":"285","left":"1566","inputs":{},"outputs":{}},"0.8758092254970019":{"definition":"//\n// frep add\n//\n// Neil Gershenfeld\n// (c) Massachusetts Institute of Technology 2017\n//\n// This work may be reproduced, modified, distributed, performed, and\n// displayed for any purpose, but must acknowledge the mods\n// project. Copyright is retained and must be preserved. The work is\n// provided as is; no warranty is provided, and users accept all\n// liability.\n//\n// closure\n//\n(function(){\n//\n// module globals\n//\nvar mod = {}\n//\n// name\n//\nvar name = 'frep add'\n//\n// initialization\n//\nvar init = function() {\n   mod.shape0 = null\n   mod.shape1 = null\n   mod.fn0.value = ''\n   mod.fn1.value = ''\n   }\n//\n// inputs\n//\nvar inputs = {\n   shape0:{type:'',label:'shape 0',\n      event:function(evt){\n         mod.shape0 = evt.detail\n         mod.fn0.value = evt.detail.function\n         outputs.shape.event()\n         }},\n   shape1:{type:'',label:'shape 1',\n      event:function(evt){\n         mod.shape1 = evt.detail\n         mod.fn1.value = evt.detail.function\n         outputs.shape.event()\n         }},\n   clear:{type:'',\n      event:function(evt){\n         mod.shape0 = null\n         mod.shape1 = null\n         mod.fn0.value = ''\n         mod.fn1.value = ''\n         }}}\n//\n// outputs\n//\nvar outputs = {\n   shape:{type:'',\n      event:function(){\n         if ((mod.shape0 != null) && (mod.shape1 != null)) {\n            var fn = `Math.max(${mod.shape0.function},${mod.shape1.function})`\n            var variables = mod.shape0.variables\n            var type = mod.shape0.type        \n            var limits = []\n            for (var v = 0; v < mod.shape0.limits.length; ++v) {\n               limits[v] = []\n               if (mod.shape0.limits[v][0] < mod.shape1.limits[v][0])\n                  limits[v][0] = mod.shape0.limits[v][0]\n               else\n                  limits[v][0] = mod.shape1.limits[v][0]\n               if (mod.shape0.limits[v][1] > mod.shape1.limits[v][1])\n                  limits[v][1] = mod.shape0.limits[v][1]\n               else\n                  limits[v][1] = mod.shape1.limits[v][1]\n               }\n            var shape = {function:fn,variables:variables,limits:limits,type:type}\n            mods.output(mod,'shape',shape)}\n            }\n         }}\n//\n// interface\n//\nvar interface = function(div){\n   mod.div = div\n   //\n   // function 0\n   //\n   div.appendChild(document.createTextNode('function 0: '))\n   div.appendChild(document.createElement('br'))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 10\n      div.appendChild(input)\n      mod.fn0 = input\n   div.appendChild(document.createElement('br'))\n   //\n   // function 1\n   //\n   div.appendChild(document.createTextNode('function 1: '))\n   div.appendChild(document.createElement('br'))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 10\n      div.appendChild(input)\n      mod.fn1 = input\n   div.appendChild(document.createElement('br'))\n   }\n//\n// local functions\n//\n;\n//\n// return values\n//\nreturn ({\n   mod:mod,\n   name:name,\n   init:init,\n   inputs:inputs,\n   outputs:outputs,\n   interface:interface\n   })\n}())\n","top":"346","left":"1940","inputs":{},"outputs":{}},"0.3682473936923236":{"definition":"//\n// frep add\n//\n// Neil Gershenfeld\n// (c) Massachusetts Institute of Technology 2017\n//\n// This work may be reproduced, modified, distributed, performed, and\n// displayed for any purpose, but must acknowledge the mods\n// project. Copyright is retained and must be preserved. The work is\n// provided as is; no warranty is provided, and users accept all\n// liability.\n//\n// closure\n//\n(function(){\n//\n// module globals\n//\nvar mod = {}\n//\n// name\n//\nvar name = 'frep add'\n//\n// initialization\n//\nvar init = function() {\n   mod.shape0 = null\n   mod.shape1 = null\n   mod.fn0.value = ''\n   mod.fn1.value = ''\n   }\n//\n// inputs\n//\nvar inputs = {\n   shape0:{type:'',label:'shape 0',\n      event:function(evt){\n         mod.shape0 = evt.detail\n         mod.fn0.value = evt.detail.function\n         outputs.shape.event()\n         }},\n   shape1:{type:'',label:'shape 1',\n      event:function(evt){\n         mod.shape1 = evt.detail\n         mod.fn1.value = evt.detail.function\n         outputs.shape.event()\n         }},\n   clear:{type:'',\n      event:function(evt){\n         mod.shape0 = null\n         mod.shape1 = null\n         mod.fn0.value = ''\n         mod.fn1.value = ''\n         }}}\n//\n// outputs\n//\nvar outputs = {\n   shape:{type:'',\n      event:function(){\n         if ((mod.shape0 != null) && (mod.shape1 != null)) {\n            var fn = `Math.max(${mod.shape0.function},${mod.shape1.function})`\n            var variables = mod.shape0.variables\n            var type = mod.shape0.type        \n            var limits = []\n            for (var v = 0; v < mod.shape0.limits.length; ++v) {\n               limits[v] = []\n               if (mod.shape0.limits[v][0] < mod.shape1.limits[v][0])\n                  limits[v][0] = mod.shape0.limits[v][0]\n               else\n                  limits[v][0] = mod.shape1.limits[v][0]\n               if (mod.shape0.limits[v][1] > mod.shape1.limits[v][1])\n                  limits[v][1] = mod.shape0.limits[v][1]\n               else\n                  limits[v][1] = mod.shape1.limits[v][1]\n               }\n            var shape = {function:fn,variables:variables,limits:limits,type:type}\n            mods.output(mod,'shape',shape)}\n            }\n         }}\n//\n// interface\n//\nvar interface = function(div){\n   mod.div = div\n   //\n   // function 0\n   //\n   div.appendChild(document.createTextNode('function 0: '))\n   div.appendChild(document.createElement('br'))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 10\n      div.appendChild(input)\n      mod.fn0 = input\n   div.appendChild(document.createElement('br'))\n   //\n   // function 1\n   //\n   div.appendChild(document.createTextNode('function 1: '))\n   div.appendChild(document.createElement('br'))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 10\n      div.appendChild(input)\n      mod.fn1 = input\n   div.appendChild(document.createElement('br'))\n   }\n//\n// local functions\n//\n;\n//\n// return values\n//\nreturn ({\n   mod:mod,\n   name:name,\n   init:init,\n   inputs:inputs,\n   outputs:outputs,\n   interface:interface\n   })\n}())\n","top":"350","left":"2343","inputs":{},"outputs":{}},"0.7041875522381654":{"definition":"//\n// frep add\n//\n// Neil Gershenfeld\n// (c) Massachusetts Institute of Technology 2017\n//\n// This work may be reproduced, modified, distributed, performed, and\n// displayed for any purpose, but must acknowledge the mods\n// project. Copyright is retained and must be preserved. The work is\n// provided as is; no warranty is provided, and users accept all\n// liability.\n//\n// closure\n//\n(function(){\n//\n// module globals\n//\nvar mod = {}\n//\n// name\n//\nvar name = 'frep add'\n//\n// initialization\n//\nvar init = function() {\n   mod.shape0 = null\n   mod.shape1 = null\n   mod.fn0.value = ''\n   mod.fn1.value = ''\n   }\n//\n// inputs\n//\nvar inputs = {\n   shape0:{type:'',label:'shape 0',\n      event:function(evt){\n         mod.shape0 = evt.detail\n         mod.fn0.value = evt.detail.function\n         outputs.shape.event()\n         }},\n   shape1:{type:'',label:'shape 1',\n      event:function(evt){\n         mod.shape1 = evt.detail\n         mod.fn1.value = evt.detail.function\n         outputs.shape.event()\n         }},\n   clear:{type:'',\n      event:function(evt){\n         mod.shape0 = null\n         mod.shape1 = null\n         mod.fn0.value = ''\n         mod.fn1.value = ''\n         }}}\n//\n// outputs\n//\nvar outputs = {\n   shape:{type:'',\n      event:function(){\n         if ((mod.shape0 != null) && (mod.shape1 != null)) {\n            var fn = `Math.max(${mod.shape0.function},${mod.shape1.function})`\n            var variables = mod.shape0.variables\n            var type = mod.shape0.type        \n            var limits = []\n            for (var v = 0; v < mod.shape0.limits.length; ++v) {\n               limits[v] = []\n               if (mod.shape0.limits[v][0] < mod.shape1.limits[v][0])\n                  limits[v][0] = mod.shape0.limits[v][0]\n               else\n                  limits[v][0] = mod.shape1.limits[v][0]\n               if (mod.shape0.limits[v][1] > mod.shape1.limits[v][1])\n                  limits[v][1] = mod.shape0.limits[v][1]\n               else\n                  limits[v][1] = mod.shape1.limits[v][1]\n               }\n            var shape = {function:fn,variables:variables,limits:limits,type:type}\n            mods.output(mod,'shape',shape)}\n            }\n         }}\n//\n// interface\n//\nvar interface = function(div){\n   mod.div = div\n   //\n   // function 0\n   //\n   div.appendChild(document.createTextNode('function 0: '))\n   div.appendChild(document.createElement('br'))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 10\n      div.appendChild(input)\n      mod.fn0 = input\n   div.appendChild(document.createElement('br'))\n   //\n   // function 1\n   //\n   div.appendChild(document.createTextNode('function 1: '))\n   div.appendChild(document.createElement('br'))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 10\n      div.appendChild(input)\n      mod.fn1 = input\n   div.appendChild(document.createElement('br'))\n   }\n//\n// local functions\n//\n;\n//\n// return values\n//\nreturn ({\n   mod:mod,\n   name:name,\n   init:init,\n   inputs:inputs,\n   outputs:outputs,\n   interface:interface\n   })\n}())\n","top":"356","left":"2750","inputs":{},"outputs":{}},"0.008661418414143474":{"definition":"//\n// frep render (CPU)\n//\n// Neil Gershenfeld\n// (c) Massachusetts Institute of Technology 2018\n//\n// This work may be reproduced, modified, distributed, performed, and\n// displayed for any purpose, but must acknowledge the mods\n// project. Copyright is retained and must be preserved. The work is\n// provided as is; no warranty is provided, and users accept all\n// liability.\n//\n// closure\n//\n(function(){\n//\n// module globals\n//\nvar mod = {}\n//\n// name\n//\nvar name = 'frep render (CPU)'\n//\n// initialization\n//\nvar init = function() {\n   mod.width.value = 255\n   }\n//\n// inputs\n//\nvar inputs = {\n   shape:{type:'frep',\n      event:function(evt){\n         mod.fn.value = evt.detail.function\n         render(evt.detail)\n         }}}\n//\n// outputs\n//\nvar outputs = {\n   image:{type:'RGBA',\n      event:function(){\n         var ctx = mod.img.getContext(\"2d\")\n         var img = ctx.getImageData(0,0,mod.img.width,mod.img.height)\n         mods.output(mod,'image',img)\n         }}}\n//\n// interface\n//\nvar interface = function(div){\n   mod.div = div\n   //\n   // on-screen drawing canvas\n   //\n   var canvas = document.createElement('canvas')\n      canvas.width = mods.ui.canvas\n      canvas.height = mods.ui.canvas\n      canvas.style.backgroundColor = 'rgb(255,255,255)'\n      div.appendChild(canvas)\n      mod.canvas = canvas\n   div.appendChild(document.createElement('br'))\n   //\n   // off-screen image canvas\n   //\n   var canvas = document.createElement('canvas')\n      mod.img = canvas\n   //\n   // width\n   //\n   div.appendChild(document.createTextNode('width: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 3\n      input.addEventListener('input',function(){\n         mod.height.value = ''\n         mod.depth.value = ''\n         })\n      div.appendChild(input)\n      mod.width = input\n   //\n   // height\n   //\n   div.appendChild(document.createTextNode(' height: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 3\n      input.addEventListener('input',function(){\n         mod.width.value = ''\n         mod.depth.value = ''\n         })\n      div.appendChild(input)\n      mod.height = input\n   div.appendChild(document.createElement('br'))\n   //\n   // depth\n   //\n   div.appendChild(document.createTextNode(' depth: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 3\n      input.addEventListener('input',function(){\n         mod.width.value = ''\n         mod.height.value = ''\n         })\n      div.appendChild(input)\n      mod.depth = input\n   div.appendChild(document.createElement('br'))\n   //\n   // function\n   //\n   div.appendChild(document.createTextNode('function: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 10\n      div.appendChild(input)\n      mod.fn = input\n   div.appendChild(document.createElement('br'))\n   //\n   // view button\n   //\n   var btn = document.createElement('button')\n      btn.style.padding = mods.ui.padding\n      btn.style.margin = 1\n      btn.appendChild(document.createTextNode('view'))\n      btn.addEventListener('click',function(){\n         mod.win = window.open('')\n         mod.win.document.body.style.overflow = 'hidden'\n         mod.win.document.body.style.border = 0\n         mod.win.document.body.style.padding = 0\n         mod.win.document.body.style.margin = 0\n         mod.win.addEventListener('unload',function() {\n            mod.win = null\n            })\n         var canvas = document.createElement('canvas')\n            canvas.setAttribute('id',mod.div.id+'canvas')\n            mod.win.document.body.appendChild(canvas)\n         var ctx = canvas.getContext(\"2d\")\n         canvas.width = window.innerWidth\n         canvas.height = window.innerWidth\n         var h = mod.img.height\n         var w = mod.img.width\n         if (w > h) {\n            var wd = canvas.width\n            var hd = canvas.width*h/w\n            }\n         else {\n            var wd = canvas.height*w/h\n            var hd = canvas.height\n            }\n         ctx.fillStyle = '#dddddd'\n         ctx.fillRect(0,0,canvas.width,canvas.height)\n         ctx.drawImage(mod.img,0,0,wd,hd)\n         })\n      div.appendChild(btn)\n   }\n//\n// local functions\n//\n// render\n//\nfunction render(shape) {   \n   var fn = shape.function\n   var vars = shape.variables\n   var limits = shape.limits\n   var type = shape.type\n   var w = parseInt(mod.width.value)\n   var h = parseInt(mod.height.value)\n   var d = parseInt(mod.depth.value)\n   var xvar = vars[0]\n   var xlimits = limits[0]\n   var yvar = vars[1]\n   var ylimits = limits[1]\n   var zvar = vars[2]\n   var zlimits = limits[2]\n   if (!isNaN(w)) {\n      h = Math.floor(w*(ylimits[1]-ylimits[0])/(xlimits[1]-xlimits[0]))\n      d = Math.floor(w*(zlimits[1]-zlimits[0])/(xlimits[1]-xlimits[0]))\n      }\n   else if (!isNaN(h)) {\n      w = Math.floor(h*(xlimits[1]-xlimits[0])/(ylimits[1]-ylimits[0]))\n      d = Math.floor(h*(zlimits[1]-zlimits[0])/(ylimits[1]-ylimits[0]))\n      }\n   else {\n      w = Math.floor(d*(xlimits[1]-xlimits[0])/(zlimits[1]-zlimits[0]))\n      h = Math.floor(d*(ylimits[1]-ylimits[0])/(zlimits[1]-zlimits[0]))\n      }\n   mod.img.height = h\n   mod.img.width = w\n   var blob = new Blob(['('+worker.toString()+'())'])\n   var url = window.URL.createObjectURL(blob)\n   var webworker = new Worker(url)\n   webworker.addEventListener('message',function(evt) {\n      window.URL.revokeObjectURL(url)\n      var h = mod.img.height\n      var w = mod.img.width\n      var buf = new Uint8ClampedArray(evt.data.buffer)\n      var imgdata = new ImageData(buf,w,h)\n      var ctx = mod.img.getContext(\"2d\")\n      ctx.putImageData(imgdata,0,0)\n      if (w > h) {\n         var x0 = 0\n         var y0 = mod.canvas.height*.5*(1-h/w)\n         var wd = mod.canvas.width\n         var hd = mod.canvas.width*h/w\n         }\n      else {\n         var x0 = mod.canvas.width*.5*(1-w/h)\n         var y0 = 0\n         var wd = mod.canvas.height*w/h\n         var hd = mod.canvas.height\n         }\n      var ctx = mod.canvas.getContext(\"2d\")\n      ctx.fillStyle = '#dddddd'\n      ctx.fillRect(0,0,mod.canvas.width,mod.canvas.height)\n      ctx.drawImage(mod.img,x0,y0,wd,hd)\n      if (mod.win != null) {\n         var canvas = mod.win.document.getElementById(mod.div.id+'canvas')\n         var ctx = canvas.getContext(\"2d\")\n         canvas.width = window.innerWidth\n         canvas.height = window.innerWidth\n         var h = mod.img.height\n         var w = mod.img.width\n         if (w > h) {\n            var wd = canvas.width\n            var hd = canvas.width*h/w\n            }\n         else {\n            var wd = canvas.height*w/h\n            var hd = canvas.height\n            }\n         ctx.fillStyle = '#dddddd'\n         ctx.fillRect(0,0,canvas.width,canvas.height)\n         ctx.drawImage(mod.img,0,0,wd,hd)\n         }\n      webworker.terminate()\n      outputs.image.event()\n      })\n   var ctx = mod.canvas.getContext(\"2d\")\n   ctx.clearRect(0,0,mod.canvas.width,mod.canvas.height)\n   var ctx = mod.img.getContext(\"2d\")\n   ctx.clearRect(0,0,mod.img.width,mod.img.height)\n   var img = ctx.getImageData(0,0,mod.img.width,mod.img.height)\n   webworker.postMessage({\n      height:h,width:w,depth:d,\n      xvar:xvar,yvar:yvar,zvar:zvar,\n      xlimits:xlimits,ylimits:ylimits,zlimits:zlimits,\n      function:fn,\n      buffer:img.data.buffer},\n      [img.data.buffer])\n   }\n//\n// worker\n//\nfunction worker() {\n   self.addEventListener('message',function(evt) {\n      var h = evt.data.height\n      var w = evt.data.width\n      var d = evt.data.depth\n      var xvar = evt.data.xvar\n      var yvar = evt.data.yvar\n      var zvar = evt.data.zvar\n      var xlimits = evt.data.xlimits\n      var ylimits = evt.data.ylimits\n      var zlimits = evt.data.zlimits\n      var buf = new Uint8ClampedArray(evt.data.buffer)\n      var f = new Function(xvar,yvar,zvar,'return ('+evt.data.function+')')\n      var x,y,z,v\n      for (var row = 0; row < h; ++row) {\n         for (var col = 0; col < w; ++col) {\n            buf[(h-1-row)*w*4+col*4+0] = 0\n            buf[(h-1-row)*w*4+col*4+1] = 0\n            buf[(h-1-row)*w*4+col*4+2] = 0\n            buf[(h-1-row)*w*4+col*4+3] = 255\n            }\n         }\n      for (var layer = 0; layer < d; ++layer) {\n         z = zlimits[0]+(zlimits[1]-zlimits[0])*layer/(d-1)\n         v = Math.floor(255*layer/(d-1))\n         for (var row = 0; row < h; ++row) {\n            y = ylimits[0]+(ylimits[1]-ylimits[0])*row/(h-1)\n            for (var col = 0; col < w; ++col) {\n               x = xlimits[0]+(xlimits[1]-xlimits[0])*col/(w-1)\n               if (f(x,y,z) >= 0) {\n                  buf[(h-1-row)*w*4+col*4+0] = v\n                  buf[(h-1-row)*w*4+col*4+1] = v\n                  buf[(h-1-row)*w*4+col*4+2] = v\n                  }\n               }\n            }\n         }\n      self.postMessage({buffer:buf.buffer},[buf.buffer])\n      })\n   }\n//\n// return values\n//\nreturn ({\n   mod:mod,\n   name:name,\n   init:init,\n   inputs:inputs,\n   outputs:outputs,\n   interface:interface\n   })\n}())\n","top":"250","left":"3536","inputs":{},"outputs":{}},"0.8080500119802858":{"definition":"//\n// frep translate\n//\n// Neil Gershenfeld\n// (c) Massachusetts Institute of Technology 2018\n//\n// This work may be reproduced, modified, distributed, performed, and\n// displayed for any purpose, but must acknowledge the mods\n// project. Copyright is retained and must be preserved. The work is\n// provided as is; no warranty is provided, and users accept all\n// liability.\n//\n// closure\n//\n(function(){\n//\n// module globals\n//\nvar mod = {}\n//\n// name\n//\nvar name = 'frep translate'\n//\n// initialization\n//\nvar init = function() {\n   mod.dx.value = 0\n   mod.dy.value = 2\n   mod.dz.value = ''\n   mod.xmin.value = ''\n   mod.ymin.value = ''\n   mod.zmin.value = ''\n   }\n//\n// inputs\n//\nvar inputs = {\n   shape:{type:'',\n      event:function(evt){\n         mod.shape = evt.detail\n         outputs.shape.event()\n         }},\n   variables:{type:'',\n      event:function(evt){\n         for (var p in evt.detail)\n            mod[p].value = evt.detail[p]\n         outputs.shape.event()\n         }}}\n//\n// outputs\n//\nvar outputs = {\n   shape:{type:'',\n      event:function(){\n         var fn = mod.shape.function\n         var variables = mod.shape.variables\n         var type = mod.shape.type        \n         var limits = []\n         for (var v = 0; v < mod.shape.limits.length; ++v) {\n            limits[v] = []\n            limits[v][0] = mod.shape.limits[v][0]\n            limits[v][1] = mod.shape.limits[v][1]\n            }\n         if (mod.xmin.value != '') {\n            var xmin = parseFloat(mod.xmin.value)\n            var xvar = variables[0]\n            var re = new RegExp(xvar,'g')\n            fn = fn.replace(re,`((${limits[0][0]})+${xvar}-(${xmin}))`)\n            var dx = limits[0][1]-limits[0][0]\n            limits[0][0] = xmin\n            limits[0][1] = xmin+dx\n            }\n         else if (mod.dx.value != '') {\n            var dx = parseFloat(mod.dx.value)\n            var xvar = variables[0]\n            var re = new RegExp(xvar,'g')\n            fn = fn.replace(re,`(${xvar}-(${dx}))`)\n            var dx = parseFloat(mod.dx.value)\n            limits[0][0] += dx\n            limits[0][1] += dx\n            }\n         if (mod.ymin.value != '') {\n            var ymin = parseFloat(mod.ymin.value)\n            var yvar = variables[1]\n            var re = new RegExp(yvar,'g')\n            fn = fn.replace(re,`((${limits[1][0]})+${yvar}-(${ymin}))`)\n            var dy = limits[1][1]-limits[1][0]\n            limits[1][0] = ymin\n            limits[1][1] = ymin+dy\n            }\n         else if (mod.dy.value != '') {\n            var dy = parseFloat(mod.dy.value)\n            var yvar = variables[1]\n            var re = new RegExp(yvar,'g')\n            fn = fn.replace(re,`(${yvar}-(${dy}))`)\n            var dy = parseFloat(mod.dy.value)\n            limits[1][0] += dy\n            limits[1][1] += dy\n            }\n         if (mod.zmin.value != '') {\n            var zmin = parseFloat(mod.zmin.value)\n            var zvar = variables[2]\n            var re = new RegExp(zvar,'g')\n            fn = fn.replace(re,`((${limits[2][0]})+${zvar}-(${zmin}))`)\n            var dz = limits[2][1]-limits[2][0]\n            limits[2][0] = zmin\n            limits[2][1] = zmin+dz\n            }\n         else if (mod.dz.value != '') {\n            var dz = parseFloat(mod.dz.value)\n            var zvar = variables[2]\n            var re = new RegExp(zvar,'g')\n            fn = fn.replace(re,`(${zvar}-(${dz}))`)\n            var dz = parseFloat(mod.dz.value)\n            limits[2][0] += dz\n            limits[2][1] += dz\n            }\n         var shape = {function:fn,variables:variables,limits:limits,type:type}\n         mods.output(mod,'shape',shape)}\n         }}\n//\n// interface\n//\nvar interface = function(div){\n   mod.div = div\n   //\n   // x\n   //\n   div.appendChild(document.createTextNode('xmin: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 6\n      input.addEventListener('input',function(){\n         mod.dx.value = ''\n         })\n      div.appendChild(input)\n      mod.xmin = input\n   div.appendChild(document.createTextNode(' dx: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 6\n      input.addEventListener('input',function(){\n         mod.xmin.value = ''\n         })\n      div.appendChild(input)\n      mod.dx = input\n   div.appendChild(document.createElement('br'))\n   //\n   // y\n   //\n   div.appendChild(document.createTextNode('ymin: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 6\n      input.addEventListener('input',function(){\n         mod.dy.value = ''\n         })\n      div.appendChild(input)\n      mod.ymin = input\n   div.appendChild(document.createTextNode(' dy: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 6\n      input.addEventListener('input',function(){\n         mod.ymin.value = ''\n         })\n      div.appendChild(input)\n      mod.dy = input\n   div.appendChild(document.createElement('br'))\n   //\n   // z\n   //\n   div.appendChild(document.createTextNode('zmin: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 6\n      input.addEventListener('input',function(){\n         mod.dz.value = ''\n         })\n      div.appendChild(input)\n      mod.zmin = input\n   div.appendChild(document.createTextNode(' dz: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 6\n      input.addEventListener('input',function(){\n         mod.zmin.value = ''\n         })\n      div.appendChild(input)\n      mod.dz = input\n   div.appendChild(document.createElement('br'))\n   //\n   // output button\n   //\n   var btn = document.createElement('button')\n      btn.style.padding = mods.ui.padding\n      btn.style.margin = 1\n      btn.appendChild(document.createTextNode('output'))\n      btn.addEventListener('click',function(){\n         outputs.shape.event()\n         })\n      div.appendChild(btn)\n   }\n//\n// local functions\n//\n;\n//\n// return values\n//\nreturn ({\n   mod:mod,\n   name:name,\n   init:init,\n   inputs:inputs,\n   outputs:outputs,\n   interface:interface\n   })\n}())\n","top":"599","left":"2751","inputs":{},"outputs":{}},"0.0918781312219622":{"definition":"//\n// frep extrude\n//\n// Neil Gershenfeld\n// (c) Massachusetts Institute of Technology 2018\n//\n// This work may be reproduced, modified, distributed, performed, and\n// displayed for any purpose, but must acknowledge the mods\n// project. Copyright is retained and must be preserved. The work is\n// provided as is; no warranty is provided, and users accept all\n// liability.\n//\n// closure\n//\n(function(){\n//\n// module globals\n//\nvar mod = {}\n//\n// name\n//\nvar name = 'frep extrude'\n//\n// initialization\n//\nvar init = function() {\n   mod.z0.value = 0\n   mod.z1.value = .1\n   }\n//\n// inputs\n//\nvar inputs = {\n   shape:{type:'',\n      event:function(evt){\n         mod.shape = evt.detail\n         outputs.shape.event()\n         }}}\n//\n// outputs\n//\nvar outputs = {\n   shape:{type:'',\n      event:function(){\n         var variables = []\n         variables[0] = mod.shape.variables[0]\n         variables[1] = mod.shape.variables[1]\n         variables[2] = 'Z'\n         var z0 = parseFloat(mod.z0.value)\n         var z1 = parseFloat(mod.z1.value)\n         var limits = []\n         limits[0] = [mod.shape.limits[0][0],mod.shape.limits[0][1]]\n         limits[1] = [mod.shape.limits[1][0],mod.shape.limits[1][1]]\n         limits[2] = [z0,z1]\n         fn = `Math.min((Z-(${z0})),(${mod.shape.function}))`\n         fn = `Math.min(((${z1})-Z),(${fn}))`\n         var shape = {function:fn,variables:variables,limits:limits,type:mod.shape.type}\n         mod.fn.value = fn\n         mods.output(mod,'shape',shape)}\n         }}\n//\n// interface\n//\nvar interface = function(div){\n   mod.div = div\n   //\n   // z0\n   //\n   div.appendChild(document.createTextNode('z0: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 3\n      div.appendChild(input)\n      mod.z0 = input\n   div.appendChild(document.createElement('br'))\n   //\n   // z1\n   //\n   div.appendChild(document.createTextNode('z1: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 3\n      div.appendChild(input)\n      mod.z1 = input\n   div.appendChild(document.createElement('br'))\n   //\n   // function\n   //\n   div.appendChild(document.createTextNode('function: '))\n   div.appendChild(document.createElement('br'))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 10\n      div.appendChild(input)\n      mod.fn = input\n   div.appendChild(document.createElement('br'))\n   //\n   // output button\n   //\n   var btn = document.createElement('button')\n      btn.style.padding = mods.ui.padding\n      btn.style.margin = 1\n      btn.appendChild(document.createTextNode('output'))\n      btn.addEventListener('click',function(){\n         outputs.shape.event()\n         })\n      div.appendChild(btn)\n   }\n//\n// local functions\n//\n;\n//\n// return values\n//\nreturn ({\n   mod:mod,\n   name:name,\n   init:init,\n   inputs:inputs,\n   outputs:outputs,\n   interface:interface\n   })\n}())\n","top":"541","left":"1153","inputs":{},"outputs":{}},"0.7142792777594954":{"definition":"//\n// frep triangle\n//\n// Neil Gershenfeld\n// (c) Massachusetts Institute of Technology 2018\n//\n// This work may be reproduced, modified, distributed, performed, and\n// displayed for any purpose, but must acknowledge the mods\n// project. Copyright is retained and must be preserved. The work is\n// provided as is; no warranty is provided, and users accept all\n// liability.\n//\n// closure\n//\n(function(){\n//\n// module globals\n//\nvar mod = {}\n//\n// name\n//\nvar name = 'frep triangle'\n//\n// initialization\n//\nvar init = function() {\n   mod.x0.value = '-1'\n   mod.y0.value = '0'\n   mod.x1.value = '1'\n   mod.y1.value = '0'\n   mod.x2.value = '0'\n   mod.y2.value = '1'\n   }\n//\n// inputs\n//\nvar inputs = {\n   variables:{type:'',\n      event:function(evt){\n         for (var p in evt.detail)\n            mod[p].value = evt.detail[p]\n         outputs.variables.event()\n         outputs.shape.event()\n         }}}\n//\n// outputs\n//\nvar outputs = {\n   shape:{type:'',\n      event:function(){\n         var x0 = parseFloat(mod.x0.value)\n         var y0 = parseFloat(mod.y0.value)\n         var x1 = parseFloat(mod.x1.value)\n         var y1 = parseFloat(mod.y1.value)\n         var x2 = parseFloat(mod.x2.value)\n         var y2 = parseFloat(mod.y2.value)\n         var fn = `(${x1-x0})*(Y-(${y0}))-(${y1-y0})*(X-(${x0}))`\n         var fn = `Math.min(${fn},(${x2-x1})*(Y-(${y1}))-(${y2-y1})*(X-(${x1})))`\n         var fn = `Math.min(${fn},(${x0-x2})*(Y-(${y2}))-(${y0-y2})*(X-(${x2})))`\n         var variables = ['X','Y']\n         var limits = [[Math.min(x0,x1,x2),Math.max(x0,x1,x2)],\n            [Math.min(y0,y1,y2),Math.max(y0,y1,y2)]]\n         var type = 'Magnitude'\n         var shape = {function:fn,variables:variables,limits:limits,type:type}\n         mods.output(mod,'shape',shape)}\n         },\n   variables:{type:'',\n      event:function(){\n         var x0 = parseFloat(mod.x0.value)\n         var y0 = parseFloat(mod.y0.value)\n         var x1 = parseFloat(mod.x1.value)\n         var y1 = parseFloat(mod.y1.value)\n         var x2 = parseFloat(mod.x2.value)\n         var y2 = parseFloat(mod.y2.value)\n         var vars = {x0:x0,y0:y0,x1:x1,y1:y1,x2:x2,y2:y2}\n         mods.output(mod,'variables',vars)}\n         }}\n//\n// interface\n//\nvar interface = function(div){\n   mod.div = div\n   div.appendChild(document.createTextNode('counter-clockwise:'))\n   div.appendChild(document.createElement('br'))\n   //\n   // 0\n   //\n   div.appendChild(document.createTextNode('x0: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 3\n      div.appendChild(input)\n      mod.x0 = input\n   div.appendChild(document.createTextNode(' y0: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 3\n      div.appendChild(input)\n      mod.y0 = input\n   div.appendChild(document.createElement('br'))\n   //\n   // 1\n   //\n   div.appendChild(document.createTextNode('x1: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 3\n      div.appendChild(input)\n      mod.x1 = input\n   div.appendChild(document.createTextNode(' y1: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 3\n      div.appendChild(input)\n      mod.y1 = input\n   div.appendChild(document.createElement('br'))\n   //\n   // 2\n   //\n   div.appendChild(document.createTextNode('x2: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 3\n      div.appendChild(input)\n      mod.x2 = input\n   div.appendChild(document.createTextNode(' y2: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 3\n      div.appendChild(input)\n      mod.y2 = input\n   div.appendChild(document.createElement('br'))\n   //\n   // output button\n   //\n   var btn = document.createElement('button')\n      btn.style.padding = mods.ui.padding\n      btn.style.margin = 1\n      btn.appendChild(document.createTextNode('output'))\n      btn.addEventListener('click',function(){\n         outputs.variables.event()\n         outputs.shape.event()\n         })\n      div.appendChild(btn)\n   }\n//\n// local functions\n//\n;\n//\n// return values\n//\nreturn ({\n   mod:mod,\n   name:name,\n   init:init,\n   inputs:inputs,\n   outputs:outputs,\n   interface:interface\n   })\n}())\n\n","top":"65","left":"199","inputs":{},"outputs":{}},"0.6453620824239269":{"definition":"//\n// frep triangle\n//\n// Neil Gershenfeld\n// (c) Massachusetts Institute of Technology 2018\n//\n// This work may be reproduced, modified, distributed, performed, and\n// displayed for any purpose, but must acknowledge the mods\n// project. Copyright is retained and must be preserved. The work is\n// provided as is; no warranty is provided, and users accept all\n// liability.\n//\n// closure\n//\n(function(){\n//\n// module globals\n//\nvar mod = {}\n//\n// name\n//\nvar name = 'frep triangle'\n//\n// initialization\n//\nvar init = function() {\n   mod.x0.value = '-.9'\n   mod.y0.value = '0'\n   mod.x1.value = '.9'\n   mod.y1.value = '0'\n   mod.x2.value = '0'\n   mod.y2.value = '.9'\n   }\n//\n// inputs\n//\nvar inputs = {\n   variables:{type:'',\n      event:function(evt){\n         for (var p in evt.detail)\n            mod[p].value = evt.detail[p]\n         outputs.variables.event()\n         outputs.shape.event()\n         }}}\n//\n// outputs\n//\nvar outputs = {\n   shape:{type:'',\n      event:function(){\n         var x0 = parseFloat(mod.x0.value)\n         var y0 = parseFloat(mod.y0.value)\n         var x1 = parseFloat(mod.x1.value)\n         var y1 = parseFloat(mod.y1.value)\n         var x2 = parseFloat(mod.x2.value)\n         var y2 = parseFloat(mod.y2.value)\n         var fn = `(${x1-x0})*(Y-(${y0}))-(${y1-y0})*(X-(${x0}))`\n         var fn = `Math.min(${fn},(${x2-x1})*(Y-(${y1}))-(${y2-y1})*(X-(${x1})))`\n         var fn = `Math.min(${fn},(${x0-x2})*(Y-(${y2}))-(${y0-y2})*(X-(${x2})))`\n         var variables = ['X','Y']\n         var limits = [[Math.min(x0,x1,x2),Math.max(x0,x1,x2)],\n            [Math.min(y0,y1,y2),Math.max(y0,y1,y2)]]\n         var type = 'Magnitude'\n         var shape = {function:fn,variables:variables,limits:limits,type:type}\n         mods.output(mod,'shape',shape)}\n         },\n   variables:{type:'',\n      event:function(){\n         var x0 = parseFloat(mod.x0.value)\n         var y0 = parseFloat(mod.y0.value)\n         var x1 = parseFloat(mod.x1.value)\n         var y1 = parseFloat(mod.y1.value)\n         var x2 = parseFloat(mod.x2.value)\n         var y2 = parseFloat(mod.y2.value)\n         var vars = {x0:x0,y0:y0,x1:x1,y1:y1,x2:x2,y2:y2}\n         mods.output(mod,'variables',vars)}\n         }}\n//\n// interface\n//\nvar interface = function(div){\n   mod.div = div\n   div.appendChild(document.createTextNode('counter-clockwise:'))\n   div.appendChild(document.createElement('br'))\n   //\n   // 0\n   //\n   div.appendChild(document.createTextNode('x0: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 3\n      div.appendChild(input)\n      mod.x0 = input\n   div.appendChild(document.createTextNode(' y0: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 3\n      div.appendChild(input)\n      mod.y0 = input\n   div.appendChild(document.createElement('br'))\n   //\n   // 1\n   //\n   div.appendChild(document.createTextNode('x1: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 3\n      div.appendChild(input)\n      mod.x1 = input\n   div.appendChild(document.createTextNode(' y1: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 3\n      div.appendChild(input)\n      mod.y1 = input\n   div.appendChild(document.createElement('br'))\n   //\n   // 2\n   //\n   div.appendChild(document.createTextNode('x2: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 3\n      div.appendChild(input)\n      mod.x2 = input\n   div.appendChild(document.createTextNode(' y2: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 3\n      div.appendChild(input)\n      mod.y2 = input\n   div.appendChild(document.createElement('br'))\n   //\n   // output button\n   //\n   var btn = document.createElement('button')\n      btn.style.padding = mods.ui.padding\n      btn.style.margin = 1\n      btn.appendChild(document.createTextNode('output'))\n      btn.addEventListener('click',function(){\n         outputs.variables.event()\n         outputs.shape.event()\n         })\n      div.appendChild(btn)\n   }\n//\n// local functions\n//\n;\n//\n// return values\n//\nreturn ({\n   mod:mod,\n   name:name,\n   init:init,\n   inputs:inputs,\n   outputs:outputs,\n   interface:interface\n   })\n}())\n\n","top":"635","left":"281","inputs":{},"outputs":{}},"0.006509166879356654":{"definition":"//\n// frep reflect\n//\n// Neil Gershenfeld\n// (c) Massachusetts Institute of Technology 2018\n//\n// This work may be reproduced, modified, distributed, performed, and\n// displayed for any purpose, but must acknowledge the mods\n// project. Copyright is retained and must be preserved. The work is\n// provided as is; no warranty is provided, and users accept all\n// liability.\n//\n// closure\n//\n(function(){\n//\n// module globals\n//\nvar mod = {}\n//\n// name\n//\nvar name = 'frep reflect'\n//\n// initialization\n//\nvar init = function() {\n   mod.origin0.value = 0\n   mod.origin1.value = 0\n   mod.xz.checked = true\n   }\n//\n// inputs\n//\nvar inputs = {\n   shape:{type:'',\n      event:function(evt){\n         mod.shape = evt.detail\n         outputs.shape.event()\n         }}}\n//\n// outputs\n//\nvar outputs = {\n   shape:{type:'',\n      event:function(){\n         var fn = mod.shape.function\n         var variables = mod.shape.variables\n         var type = mod.shape.type        \n         var origin0 = parseFloat(mod.origin0.value)\n         var origin1 = parseFloat(mod.origin1.value)\n         var limits = []\n         for (var v = 0; v < mod.shape.limits.length; ++v) {\n            limits[v] = []\n            limits[v][0] = mod.shape.limits[v][0]\n            limits[v][1] = mod.shape.limits[v][1]\n            }\n         if (mod.x.checked) {\n            var xvar = variables[0]\n            var re = new RegExp(xvar,'g')\n            fn = fn.replace(re,`(${2*origin0}-${xvar})`)\n            var dx = mod.shape.limits[0][1]-mod.shape.limits[0][0]\n            var dl = mod.shape.limits[0][0]-origin0\n            limits[0][0] = origin0-(dl+dx)\n            limits[0][1] = origin0-dl\n            }\n         else if (mod.y.checked) {\n            var yvar = variables[1]\n            var re = new RegExp(yvar,'g')\n            fn = fn.replace(re,`(${2*origin0}-${yvar})`)\n            var dy = mod.shape.limits[1][1]-mod.shape.limits[1][0]\n            var dl = mod.shape.limits[1][0]-origin0\n            limits[1][0] = origin0-(dl+dy)\n            limits[1][1] = origin0-dl\n            }\n         else if (mod.z.checked) {\n            var zvar = variables[2]\n            var re = new RegExp(zvar,'g')\n            fn = fn.replace(re,`(${2*origin0}-${zvar})`)\n            var dz = mod.shape.limits[2][1]-mod.shape.limits[2][0]\n            var dl = mod.shape.limits[2][0]-origin0\n            limits[2][0] = origin0-(dl+dz)\n            limits[2][1] = origin0-dl\n            }\n         else if (mod.xy.checked) {\n            var xvar = variables[0]\n            var yvar = variables[1]\n            var xre = new RegExp(xvar,'g')\n            var yre = new RegExp(yvar,'g')\n            fn = fn.replace(xre,'TEMP')\n            fn = fn.replace(yre,`(${origin1}+${xvar}-${origin0})`)\n            fn = fn.replace(/TEMP/g,`(${origin0}+${yvar}-${origin1})`)\n            var dx = mod.shape.limits[0][1]-mod.shape.limits[0][0]\n            var dy = mod.shape.limits[1][1]-mod.shape.limits[1][0]\n            var dxl = mod.shape.limits[0][0]-origin0\n            var dyl = mod.shape.limits[1][0]-origin1\n            limits[0][0] = origin1+dyl\n            limits[0][1] = origin1+dyl+dy\n            limits[1][0] = origin0+dxl\n            limits[1][1] = origin0+dxl+dx\n            }\n         else if (mod.xz.checked) {\n            var xvar = variables[0]\n            var zvar = variables[2]\n            var xre = new RegExp(xvar,'g')\n            var zre = new RegExp(zvar,'g')\n            fn = fn.replace(xre,'TEMP')\n            fn = fn.replace(zre,`(${origin1}+${xvar}-${origin0})`)\n            fn = fn.replace(/TEMP/g,`(${origin0}+${zvar}-${origin1})`)\n            var dx = mod.shape.limits[0][1]-mod.shape.limits[0][0]\n            var dz = mod.shape.limits[2][1]-mod.shape.limits[2][0]\n            var dxl = mod.shape.limits[0][0]-origin0\n            var dzl = mod.shape.limits[2][0]-origin1\n            limits[0][0] = origin1+dzl\n            limits[0][1] = origin1+dzl+dz\n            limits[2][0] = origin0+dxl\n            limits[2][1] = origin0+dxl+dx\n            }\n         else if (mod.yz.checked) {\n            var yvar = variables[1]\n            var zvar = variables[2]\n            var yre = new RegExp(yvar,'g')\n            var zre = new RegExp(zvar,'g')\n            fn = fn.replace(yre,'TEMP')\n            fn = fn.replace(zre,`(${origin1}+${yvar}-${origin0})`)\n            fn = fn.replace(/TEMP/g,`(${origin0}+${zvar}-${origin1})`)\n            var dy = mod.shape.limits[1][1]-mod.shape.limits[1][0]\n            var dz = mod.shape.limits[2][1]-mod.shape.limits[2][0]\n            var dyl = mod.shape.limits[1][0]-origin0\n            var dzl = mod.shape.limits[2][0]-origin1\n            limits[1][0] = origin1+dzl\n            limits[1][1] = origin1+dzl+dz\n            limits[2][0] = origin0+dyl\n            limits[2][1] = origin0+dyl+dy\n            }\n         var shape = {function:fn,variables:variables,limits:limits,type:type}\n         mods.output(mod,'shape',shape)}\n         }}\n//\n// interface\n//\nvar interface = function(div){\n   mod.div = div\n   //\n   // axis\n   //\n   div.appendChild(document.createTextNode('axis: '))\n   div.appendChild(document.createElement('br'))\n   div.appendChild(document.createTextNode('x'))\n   var input = document.createElement('input')\n      input.type = 'radio'\n      input.name = mod.div.id+'axis'\n      input.id = mod.div.id+'x'\n      div.appendChild(input)\n      mod.x = input\n   div.appendChild(document.createTextNode(' y'))\n   var input = document.createElement('input')\n      input.type = 'radio'\n      input.name = mod.div.id+'axis'\n      input.id = mod.div.id+'y'\n      div.appendChild(input)\n      mod.y = input\n   div.appendChild(document.createTextNode(' z'))\n   var input = document.createElement('input')\n      input.type = 'radio'\n      input.name = mod.div.id+'axis'\n      input.id = mod.div.id+'z'\n      div.appendChild(input)\n      mod.z = input\n   div.appendChild(document.createElement('br'))\n   //\n   // origin 0\n   //\n   div.appendChild(document.createTextNode('origin 0: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 6\n      div.appendChild(input)\n      mod.origin0 = input\n   div.appendChild(document.createElement('br'))\n   //\n   // axis\n   //\n   div.appendChild(document.createTextNode('xy'))\n   var input = document.createElement('input')\n      input.type = 'radio'\n      input.name = mod.div.id+'axis'\n      input.id = mod.div.id+'xy'\n      div.appendChild(input)\n      mod.xy = input\n   div.appendChild(document.createTextNode(' xz'))\n   var input = document.createElement('input')\n      input.type = 'radio'\n      input.name = mod.div.id+'axis'\n      input.id = mod.div.id+'xz'\n      div.appendChild(input)\n      mod.xz = input\n   div.appendChild(document.createTextNode(' yz'))\n   var input = document.createElement('input')\n      input.type = 'radio'\n      input.name = mod.div.id+'axis'\n      input.id = mod.div.id+'yz'\n      div.appendChild(input)\n      mod.yz = input\n   div.appendChild(document.createElement('br'))\n   //\n   // origin 1\n   //\n   div.appendChild(document.createTextNode('origin 1: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 6\n      div.appendChild(input)\n      mod.origin1 = input\n   div.appendChild(document.createElement('br'))\n   //\n   // output button\n   //\n   var btn = document.createElement('button')\n      btn.style.padding = mods.ui.padding\n      btn.style.margin = 1\n      btn.appendChild(document.createTextNode('output'))\n      btn.addEventListener('click',function(){\n         outputs.shape.event()\n         })\n      div.appendChild(btn)\n   }\n//\n// local functions\n//\n;\n//\n// return values\n//\nreturn ({\n   mod:mod,\n   name:name,\n   init:init,\n   inputs:inputs,\n   outputs:outputs,\n   interface:interface\n   })\n}())\n","top":"534","left":"1524","inputs":{},"outputs":{}},"0.4122998412009501":{"definition":"//\n// frep reflect\n//\n// Neil Gershenfeld\n// (c) Massachusetts Institute of Technology 2018\n//\n// This work may be reproduced, modified, distributed, performed, and\n// displayed for any purpose, but must acknowledge the mods\n// project. Copyright is retained and must be preserved. The work is\n// provided as is; no warranty is provided, and users accept all\n// liability.\n//\n// closure\n//\n(function(){\n//\n// module globals\n//\nvar mod = {}\n//\n// name\n//\nvar name = 'frep reflect'\n//\n// initialization\n//\nvar init = function() {\n   mod.origin0.value = 0\n   mod.origin1.value = 0\n   mod.yz.checked = true\n   }\n//\n// inputs\n//\nvar inputs = {\n   shape:{type:'',\n      event:function(evt){\n         mod.shape = evt.detail\n         outputs.shape.event()\n         }}}\n//\n// outputs\n//\nvar outputs = {\n   shape:{type:'',\n      event:function(){\n         var fn = mod.shape.function\n         var variables = mod.shape.variables\n         var type = mod.shape.type        \n         var origin0 = parseFloat(mod.origin0.value)\n         var origin1 = parseFloat(mod.origin1.value)\n         var limits = []\n         for (var v = 0; v < mod.shape.limits.length; ++v) {\n            limits[v] = []\n            limits[v][0] = mod.shape.limits[v][0]\n            limits[v][1] = mod.shape.limits[v][1]\n            }\n         if (mod.x.checked) {\n            var xvar = variables[0]\n            var re = new RegExp(xvar,'g')\n            fn = fn.replace(re,`(${2*origin0}-${xvar})`)\n            var dx = mod.shape.limits[0][1]-mod.shape.limits[0][0]\n            var dl = mod.shape.limits[0][0]-origin0\n            limits[0][0] = origin0-(dl+dx)\n            limits[0][1] = origin0-dl\n            }\n         else if (mod.y.checked) {\n            var yvar = variables[1]\n            var re = new RegExp(yvar,'g')\n            fn = fn.replace(re,`(${2*origin0}-${yvar})`)\n            var dy = mod.shape.limits[1][1]-mod.shape.limits[1][0]\n            var dl = mod.shape.limits[1][0]-origin0\n            limits[1][0] = origin0-(dl+dy)\n            limits[1][1] = origin0-dl\n            }\n         else if (mod.z.checked) {\n            var zvar = variables[2]\n            var re = new RegExp(zvar,'g')\n            fn = fn.replace(re,`(${2*origin0}-${zvar})`)\n            var dz = mod.shape.limits[2][1]-mod.shape.limits[2][0]\n            var dl = mod.shape.limits[2][0]-origin0\n            limits[2][0] = origin0-(dl+dz)\n            limits[2][1] = origin0-dl\n            }\n         else if (mod.xy.checked) {\n            var xvar = variables[0]\n            var yvar = variables[1]\n            var xre = new RegExp(xvar,'g')\n            var yre = new RegExp(yvar,'g')\n            fn = fn.replace(xre,'TEMP')\n            fn = fn.replace(yre,`(${origin1}+${xvar}-${origin0})`)\n            fn = fn.replace(/TEMP/g,`(${origin0}+${yvar}-${origin1})`)\n            var dx = mod.shape.limits[0][1]-mod.shape.limits[0][0]\n            var dy = mod.shape.limits[1][1]-mod.shape.limits[1][0]\n            var dxl = mod.shape.limits[0][0]-origin0\n            var dyl = mod.shape.limits[1][0]-origin1\n            limits[0][0] = origin1+dyl\n            limits[0][1] = origin1+dyl+dy\n            limits[1][0] = origin0+dxl\n            limits[1][1] = origin0+dxl+dx\n            }\n         else if (mod.xz.checked) {\n            var xvar = variables[0]\n            var zvar = variables[2]\n            var xre = new RegExp(xvar,'g')\n            var zre = new RegExp(zvar,'g')\n            fn = fn.replace(xre,'TEMP')\n            fn = fn.replace(zre,`(${origin1}+${xvar}-${origin0})`)\n            fn = fn.replace(/TEMP/g,`(${origin0}+${zvar}-${origin1})`)\n            var dx = mod.shape.limits[0][1]-mod.shape.limits[0][0]\n            var dz = mod.shape.limits[2][1]-mod.shape.limits[2][0]\n            var dxl = mod.shape.limits[0][0]-origin0\n            var dzl = mod.shape.limits[2][0]-origin1\n            limits[0][0] = origin1+dzl\n            limits[0][1] = origin1+dzl+dz\n            limits[2][0] = origin0+dxl\n            limits[2][1] = origin0+dxl+dx\n            }\n         else if (mod.yz.checked) {\n            var yvar = variables[1]\n            var zvar = variables[2]\n            var yre = new RegExp(yvar,'g')\n            var zre = new RegExp(zvar,'g')\n            fn = fn.replace(yre,'TEMP')\n            fn = fn.replace(zre,`(${origin1}+${yvar}-${origin0})`)\n            fn = fn.replace(/TEMP/g,`(${origin0}+${zvar}-${origin1})`)\n            var dy = mod.shape.limits[1][1]-mod.shape.limits[1][0]\n            var dz = mod.shape.limits[2][1]-mod.shape.limits[2][0]\n            var dyl = mod.shape.limits[1][0]-origin0\n            var dzl = mod.shape.limits[2][0]-origin1\n            limits[1][0] = origin1+dzl\n            limits[1][1] = origin1+dzl+dz\n            limits[2][0] = origin0+dyl\n            limits[2][1] = origin0+dyl+dy\n            }\n         var shape = {function:fn,variables:variables,limits:limits,type:type}\n         mods.output(mod,'shape',shape)}\n         }}\n//\n// interface\n//\nvar interface = function(div){\n   mod.div = div\n   //\n   // axis\n   //\n   div.appendChild(document.createTextNode('axis: '))\n   div.appendChild(document.createElement('br'))\n   div.appendChild(document.createTextNode('x'))\n   var input = document.createElement('input')\n      input.type = 'radio'\n      input.name = mod.div.id+'axis'\n      input.id = mod.div.id+'x'\n      div.appendChild(input)\n      mod.x = input\n   div.appendChild(document.createTextNode(' y'))\n   var input = document.createElement('input')\n      input.type = 'radio'\n      input.name = mod.div.id+'axis'\n      input.id = mod.div.id+'y'\n      div.appendChild(input)\n      mod.y = input\n   div.appendChild(document.createTextNode(' z'))\n   var input = document.createElement('input')\n      input.type = 'radio'\n      input.name = mod.div.id+'axis'\n      input.id = mod.div.id+'z'\n      div.appendChild(input)\n      mod.z = input\n   div.appendChild(document.createElement('br'))\n   //\n   // origin 0\n   //\n   div.appendChild(document.createTextNode('origin 0: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 6\n      div.appendChild(input)\n      mod.origin0 = input\n   div.appendChild(document.createElement('br'))\n   //\n   // axis\n   //\n   div.appendChild(document.createTextNode('xy'))\n   var input = document.createElement('input')\n      input.type = 'radio'\n      input.name = mod.div.id+'axis'\n      input.id = mod.div.id+'xy'\n      div.appendChild(input)\n      mod.xy = input\n   div.appendChild(document.createTextNode(' xz'))\n   var input = document.createElement('input')\n      input.type = 'radio'\n      input.name = mod.div.id+'axis'\n      input.id = mod.div.id+'xz'\n      div.appendChild(input)\n      mod.xz = input\n   div.appendChild(document.createTextNode(' yz'))\n   var input = document.createElement('input')\n      input.type = 'radio'\n      input.name = mod.div.id+'axis'\n      input.id = mod.div.id+'yz'\n      div.appendChild(input)\n      mod.yz = input\n   div.appendChild(document.createElement('br'))\n   //\n   // origin 1\n   //\n   div.appendChild(document.createTextNode('origin 1: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 6\n      div.appendChild(input)\n      mod.origin1 = input\n   div.appendChild(document.createElement('br'))\n   //\n   // output button\n   //\n   var btn = document.createElement('button')\n      btn.style.padding = mods.ui.padding\n      btn.style.margin = 1\n      btn.appendChild(document.createTextNode('output'))\n      btn.addEventListener('click',function(){\n         outputs.shape.event()\n         })\n      div.appendChild(btn)\n   }\n//\n// local functions\n//\n;\n//\n// return values\n//\nreturn ({\n   mod:mod,\n   name:name,\n   init:init,\n   inputs:inputs,\n   outputs:outputs,\n   interface:interface\n   })\n}())\n","top":"589","left":"1864","inputs":{},"outputs":{}},"0.3786897870503":{"definition":"//\n// frep translate\n//\n// Neil Gershenfeld\n// (c) Massachusetts Institute of Technology 2018\n//\n// This work may be reproduced, modified, distributed, performed, and\n// displayed for any purpose, but must acknowledge the mods\n// project. Copyright is retained and must be preserved. The work is\n// provided as is; no warranty is provided, and users accept all\n// liability.\n//\n// closure\n//\n(function(){\n//\n// module globals\n//\nvar mod = {}\n//\n// name\n//\nvar name = 'frep translate'\n//\n// initialization\n//\nvar init = function() {\n   mod.dx.value = 2\n   mod.dy.value = 0\n   mod.dz.value = ''\n   mod.xmin.value = ''\n   mod.ymin.value = ''\n   mod.zmin.value = ''\n   }\n//\n// inputs\n//\nvar inputs = {\n   shape:{type:'',\n      event:function(evt){\n         mod.shape = evt.detail\n         outputs.shape.event()\n         }},\n   variables:{type:'',\n      event:function(evt){\n         for (var p in evt.detail)\n            mod[p].value = evt.detail[p]\n         outputs.shape.event()\n         }}}\n//\n// outputs\n//\nvar outputs = {\n   shape:{type:'',\n      event:function(){\n         var fn = mod.shape.function\n         var variables = mod.shape.variables\n         var type = mod.shape.type        \n         var limits = []\n         for (var v = 0; v < mod.shape.limits.length; ++v) {\n            limits[v] = []\n            limits[v][0] = mod.shape.limits[v][0]\n            limits[v][1] = mod.shape.limits[v][1]\n            }\n         if (mod.xmin.value != '') {\n            var xmin = parseFloat(mod.xmin.value)\n            var xvar = variables[0]\n            var re = new RegExp(xvar,'g')\n            fn = fn.replace(re,`((${limits[0][0]})+${xvar}-(${xmin}))`)\n            var dx = limits[0][1]-limits[0][0]\n            limits[0][0] = xmin\n            limits[0][1] = xmin+dx\n            }\n         else if (mod.dx.value != '') {\n            var dx = parseFloat(mod.dx.value)\n            var xvar = variables[0]\n            var re = new RegExp(xvar,'g')\n            fn = fn.replace(re,`(${xvar}-(${dx}))`)\n            var dx = parseFloat(mod.dx.value)\n            limits[0][0] += dx\n            limits[0][1] += dx\n            }\n         if (mod.ymin.value != '') {\n            var ymin = parseFloat(mod.ymin.value)\n            var yvar = variables[1]\n            var re = new RegExp(yvar,'g')\n            fn = fn.replace(re,`((${limits[1][0]})+${yvar}-(${ymin}))`)\n            var dy = limits[1][1]-limits[1][0]\n            limits[1][0] = ymin\n            limits[1][1] = ymin+dy\n            }\n         else if (mod.dy.value != '') {\n            var dy = parseFloat(mod.dy.value)\n            var yvar = variables[1]\n            var re = new RegExp(yvar,'g')\n            fn = fn.replace(re,`(${yvar}-(${dy}))`)\n            var dy = parseFloat(mod.dy.value)\n            limits[1][0] += dy\n            limits[1][1] += dy\n            }\n         if (mod.zmin.value != '') {\n            var zmin = parseFloat(mod.zmin.value)\n            var zvar = variables[2]\n            var re = new RegExp(zvar,'g')\n            fn = fn.replace(re,`((${limits[2][0]})+${zvar}-(${zmin}))`)\n            var dz = limits[2][1]-limits[2][0]\n            limits[2][0] = zmin\n            limits[2][1] = zmin+dz\n            }\n         else if (mod.dz.value != '') {\n            var dz = parseFloat(mod.dz.value)\n            var zvar = variables[2]\n            var re = new RegExp(zvar,'g')\n            fn = fn.replace(re,`(${zvar}-(${dz}))`)\n            var dz = parseFloat(mod.dz.value)\n            limits[2][0] += dz\n            limits[2][1] += dz\n            }\n         var shape = {function:fn,variables:variables,limits:limits,type:type}\n         mods.output(mod,'shape',shape)}\n         }}\n//\n// interface\n//\nvar interface = function(div){\n   mod.div = div\n   //\n   // x\n   //\n   div.appendChild(document.createTextNode('xmin: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 6\n      input.addEventListener('input',function(){\n         mod.dx.value = ''\n         })\n      div.appendChild(input)\n      mod.xmin = input\n   div.appendChild(document.createTextNode(' dx: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 6\n      input.addEventListener('input',function(){\n         mod.xmin.value = ''\n         })\n      div.appendChild(input)\n      mod.dx = input\n   div.appendChild(document.createElement('br'))\n   //\n   // y\n   //\n   div.appendChild(document.createTextNode('ymin: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 6\n      input.addEventListener('input',function(){\n         mod.dy.value = ''\n         })\n      div.appendChild(input)\n      mod.ymin = input\n   div.appendChild(document.createTextNode(' dy: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 6\n      input.addEventListener('input',function(){\n         mod.ymin.value = ''\n         })\n      div.appendChild(input)\n      mod.dy = input\n   div.appendChild(document.createElement('br'))\n   //\n   // z\n   //\n   div.appendChild(document.createTextNode('zmin: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 6\n      input.addEventListener('input',function(){\n         mod.dz.value = ''\n         })\n      div.appendChild(input)\n      mod.zmin = input\n   div.appendChild(document.createTextNode(' dz: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 6\n      input.addEventListener('input',function(){\n         mod.zmin.value = ''\n         })\n      div.appendChild(input)\n      mod.dz = input\n   div.appendChild(document.createElement('br'))\n   //\n   // output button\n   //\n   var btn = document.createElement('button')\n      btn.style.padding = mods.ui.padding\n      btn.style.margin = 1\n      btn.appendChild(document.createTextNode('output'))\n      btn.addEventListener('click',function(){\n         outputs.shape.event()\n         })\n      div.appendChild(btn)\n   }\n//\n// local functions\n//\n;\n//\n// return values\n//\nreturn ({\n   mod:mod,\n   name:name,\n   init:init,\n   inputs:inputs,\n   outputs:outputs,\n   interface:interface\n   })\n}())\n","top":"596","left":"2282","inputs":{},"outputs":{}},"0.2219021943747128":{"definition":"//\n// frep reflect\n//\n// Neil Gershenfeld\n// (c) Massachusetts Institute of Technology 2018\n//\n// This work may be reproduced, modified, distributed, performed, and\n// displayed for any purpose, but must acknowledge the mods\n// project. Copyright is retained and must be preserved. The work is\n// provided as is; no warranty is provided, and users accept all\n// liability.\n//\n// closure\n//\n(function(){\n//\n// module globals\n//\nvar mod = {}\n//\n// name\n//\nvar name = 'frep reflect'\n//\n// initialization\n//\nvar init = function() {\n   mod.origin0.value = 0\n   mod.origin1.value = 0\n   mod.y.checked = true\n   }\n//\n// inputs\n//\nvar inputs = {\n   shape:{type:'',\n      event:function(evt){\n         mod.shape = evt.detail\n         outputs.shape.event()\n         }}}\n//\n// outputs\n//\nvar outputs = {\n   shape:{type:'',\n      event:function(){\n         var fn = mod.shape.function\n         var variables = mod.shape.variables\n         var type = mod.shape.type        \n         var origin0 = parseFloat(mod.origin0.value)\n         var origin1 = parseFloat(mod.origin1.value)\n         var limits = []\n         for (var v = 0; v < mod.shape.limits.length; ++v) {\n            limits[v] = []\n            limits[v][0] = mod.shape.limits[v][0]\n            limits[v][1] = mod.shape.limits[v][1]\n            }\n         if (mod.x.checked) {\n            var xvar = variables[0]\n            var re = new RegExp(xvar,'g')\n            fn = fn.replace(re,`(${2*origin0}-${xvar})`)\n            var dx = mod.shape.limits[0][1]-mod.shape.limits[0][0]\n            var dl = mod.shape.limits[0][0]-origin0\n            limits[0][0] = origin0-(dl+dx)\n            limits[0][1] = origin0-dl\n            }\n         else if (mod.y.checked) {\n            var yvar = variables[1]\n            var re = new RegExp(yvar,'g')\n            fn = fn.replace(re,`(${2*origin0}-${yvar})`)\n            var dy = mod.shape.limits[1][1]-mod.shape.limits[1][0]\n            var dl = mod.shape.limits[1][0]-origin0\n            limits[1][0] = origin0-(dl+dy)\n            limits[1][1] = origin0-dl\n            }\n         else if (mod.z.checked) {\n            var zvar = variables[2]\n            var re = new RegExp(zvar,'g')\n            fn = fn.replace(re,`(${2*origin0}-${zvar})`)\n            var dz = mod.shape.limits[2][1]-mod.shape.limits[2][0]\n            var dl = mod.shape.limits[2][0]-origin0\n            limits[2][0] = origin0-(dl+dz)\n            limits[2][1] = origin0-dl\n            }\n         else if (mod.xy.checked) {\n            var xvar = variables[0]\n            var yvar = variables[1]\n            var xre = new RegExp(xvar,'g')\n            var yre = new RegExp(yvar,'g')\n            fn = fn.replace(xre,'TEMP')\n            fn = fn.replace(yre,`(${origin1}+${xvar}-${origin0})`)\n            fn = fn.replace(/TEMP/g,`(${origin0}+${yvar}-${origin1})`)\n            var dx = mod.shape.limits[0][1]-mod.shape.limits[0][0]\n            var dy = mod.shape.limits[1][1]-mod.shape.limits[1][0]\n            var dxl = mod.shape.limits[0][0]-origin0\n            var dyl = mod.shape.limits[1][0]-origin1\n            limits[0][0] = origin1+dyl\n            limits[0][1] = origin1+dyl+dy\n            limits[1][0] = origin0+dxl\n            limits[1][1] = origin0+dxl+dx\n            }\n         else if (mod.xz.checked) {\n            var xvar = variables[0]\n            var zvar = variables[2]\n            var xre = new RegExp(xvar,'g')\n            var zre = new RegExp(zvar,'g')\n            fn = fn.replace(xre,'TEMP')\n            fn = fn.replace(zre,`(${origin1}+${xvar}-${origin0})`)\n            fn = fn.replace(/TEMP/g,`(${origin0}+${zvar}-${origin1})`)\n            var dx = mod.shape.limits[0][1]-mod.shape.limits[0][0]\n            var dz = mod.shape.limits[2][1]-mod.shape.limits[2][0]\n            var dxl = mod.shape.limits[0][0]-origin0\n            var dzl = mod.shape.limits[2][0]-origin1\n            limits[0][0] = origin1+dzl\n            limits[0][1] = origin1+dzl+dz\n            limits[2][0] = origin0+dxl\n            limits[2][1] = origin0+dxl+dx\n            }\n         else if (mod.yz.checked) {\n            var yvar = variables[1]\n            var zvar = variables[2]\n            var yre = new RegExp(yvar,'g')\n            var zre = new RegExp(zvar,'g')\n            fn = fn.replace(yre,'TEMP')\n            fn = fn.replace(zre,`(${origin1}+${yvar}-${origin0})`)\n            fn = fn.replace(/TEMP/g,`(${origin0}+${zvar}-${origin1})`)\n            var dy = mod.shape.limits[1][1]-mod.shape.limits[1][0]\n            var dz = mod.shape.limits[2][1]-mod.shape.limits[2][0]\n            var dyl = mod.shape.limits[1][0]-origin0\n            var dzl = mod.shape.limits[2][0]-origin1\n            limits[1][0] = origin1+dzl\n            limits[1][1] = origin1+dzl+dz\n            limits[2][0] = origin0+dyl\n            limits[2][1] = origin0+dyl+dy\n            }\n         var shape = {function:fn,variables:variables,limits:limits,type:type}\n         mods.output(mod,'shape',shape)}\n         }}\n//\n// interface\n//\nvar interface = function(div){\n   mod.div = div\n   //\n   // axis\n   //\n   div.appendChild(document.createTextNode('axis: '))\n   div.appendChild(document.createElement('br'))\n   div.appendChild(document.createTextNode('x'))\n   var input = document.createElement('input')\n      input.type = 'radio'\n      input.name = mod.div.id+'axis'\n      input.id = mod.div.id+'x'\n      div.appendChild(input)\n      mod.x = input\n   div.appendChild(document.createTextNode(' y'))\n   var input = document.createElement('input')\n      input.type = 'radio'\n      input.name = mod.div.id+'axis'\n      input.id = mod.div.id+'y'\n      div.appendChild(input)\n      mod.y = input\n   div.appendChild(document.createTextNode(' z'))\n   var input = document.createElement('input')\n      input.type = 'radio'\n      input.name = mod.div.id+'axis'\n      input.id = mod.div.id+'z'\n      div.appendChild(input)\n      mod.z = input\n   div.appendChild(document.createElement('br'))\n   //\n   // origin 0\n   //\n   div.appendChild(document.createTextNode('origin 0: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 6\n      div.appendChild(input)\n      mod.origin0 = input\n   div.appendChild(document.createElement('br'))\n   //\n   // axis\n   //\n   div.appendChild(document.createTextNode('xy'))\n   var input = document.createElement('input')\n      input.type = 'radio'\n      input.name = mod.div.id+'axis'\n      input.id = mod.div.id+'xy'\n      div.appendChild(input)\n      mod.xy = input\n   div.appendChild(document.createTextNode(' xz'))\n   var input = document.createElement('input')\n      input.type = 'radio'\n      input.name = mod.div.id+'axis'\n      input.id = mod.div.id+'xz'\n      div.appendChild(input)\n      mod.xz = input\n   div.appendChild(document.createTextNode(' yz'))\n   var input = document.createElement('input')\n      input.type = 'radio'\n      input.name = mod.div.id+'axis'\n      input.id = mod.div.id+'yz'\n      div.appendChild(input)\n      mod.yz = input\n   div.appendChild(document.createElement('br'))\n   //\n   // origin 1\n   //\n   div.appendChild(document.createTextNode('origin 1: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 6\n      div.appendChild(input)\n      mod.origin1 = input\n   div.appendChild(document.createElement('br'))\n   //\n   // output button\n   //\n   var btn = document.createElement('button')\n      btn.style.padding = mods.ui.padding\n      btn.style.margin = 1\n      btn.appendChild(document.createTextNode('output'))\n      btn.addEventListener('click',function(){\n         outputs.shape.event()\n         })\n      div.appendChild(btn)\n   }\n//\n// local functions\n//\n;\n//\n// return values\n//\nreturn ({\n   mod:mod,\n   name:name,\n   init:init,\n   inputs:inputs,\n   outputs:outputs,\n   interface:interface\n   })\n}())\n","top":"536","left":"646","inputs":{},"outputs":{}},"0.8276595726865658":{"definition":"//\n// frep rotate\n//\n// Neil Gershenfeld\n// (c) Massachusetts Institute of Technology 2018\n//\n// This work may be reproduced, modified, distributed, performed, and\n// displayed for any purpose, but must acknowledge the mods\n// project. Copyright is retained and must be preserved. The work is\n// provided as is; no warranty is provided, and users accept all\n// liability.\n//\n// closure\n//\n(function(){\n//\n// module globals\n//\nvar mod = {}\n//\n// name\n//\nvar name = 'frep rotate'\n//\n// initialization\n//\nvar init = function() {\n   mod.rx.value = '10'\n   mod.ry.value = '10'\n   mod.rz.value = ''\n   mod.ox.value = 0\n   mod.oy.value = 0\n   mod.oz.value = 0\n   }\n//\n// inputs\n//\nvar inputs = {\n   shape:{type:'',\n      event:function(evt){\n         mod.shape = evt.detail\n         outputs.shape.event()\n         }},\n   variables:{type:'',\n      event:function(evt){\n         for (var p in evt.detail)\n            mod[p].value = evt.detail[p]\n         outputs.shape.event()\n         }}}\n//\n// outputs\n//\nvar outputs = {\n   shape:{type:'',\n      event:function(){\n         var fn = mod.shape.function\n         var variables = mod.shape.variables\n         var type = mod.shape.type        \n         var limits = []\n         for (var v = 0; v < mod.shape.limits.length; ++v) {\n            limits[v] = []\n            limits[v][0] = mod.shape.limits[v][0]\n            limits[v][1] = mod.shape.limits[v][1]\n            }\n         var ox = parseFloat(mod.ox.value)\n         var oy = parseFloat(mod.oy.value)\n         var oz = parseFloat(mod.oz.value)\n         if (mod.rx.value != '') {\n            var rx = parseFloat(mod.rx.value)*Math.PI/180\n            var yvar = variables[1]\n            var zvar = variables[2]\n            var yre = new RegExp(yvar,'g')\n            var zre = new RegExp(zvar,'g')\n            fn = fn.replace(yre,\n               `((${oy})+(${yvar}-(${oy}))*Math.cos(${rx})+(TEMP-(${oz}))*Math.sin(${rx}))`)\n            fn = fn.replace(zre,\n               `((${oz})-(${yvar}-(${oy}))*Math.sin(${rx})+(${zvar}-(${oz}))*Math.cos(${rx}))`)\n            fn = fn.replace(/TEMP/g,zvar)\n            var y0 = limits[1][0]\n            var y1 = limits[1][1]\n            var z0 = limits[2][0]\n            var z1 = limits[2][1]\n            limits[1][0] = Math.min(\n               oy+(y0-oy)*Math.cos(rx)-(z0-oz)*Math.sin(rx),\n               oy+(y0-oy)*Math.cos(rx)-(z1-oz)*Math.sin(rx),\n               oy+(y1-oy)*Math.cos(rx)-(z0-oz)*Math.sin(rx),\n               oy+(y1-oy)*Math.cos(rx)-(z1-oz)*Math.sin(rx))\n            limits[1][1] = Math.max(\n               oy+(y0-oy)*Math.cos(rx)-(z0-oz)*Math.sin(rx),\n               oy+(y0-oy)*Math.cos(rx)-(z1-oz)*Math.sin(rx),\n               oy+(y1-oy)*Math.cos(rx)-(z0-oz)*Math.sin(rx),\n               oy+(y1-oy)*Math.cos(rx)-(z1-oz)*Math.sin(rx))\n            limits[2][0] = Math.min(\n               oz+(y0-oy)*Math.sin(rx)+(z0-oz)*Math.cos(rx),\n               oz+(y0-oy)*Math.sin(rx)+(z1-oz)*Math.cos(rx),\n               oz+(y1-oy)*Math.sin(rx)+(z0-oz)*Math.cos(rx),\n               oz+(y1-oy)*Math.sin(rx)+(z1-oz)*Math.cos(rx))\n            limits[2][1] = Math.max(\n               oz+(y0-oy)*Math.sin(rx)+(z0-oz)*Math.cos(rx),\n               oz+(y0-oy)*Math.sin(rx)+(z1-oz)*Math.cos(rx),\n               oz+(y1-oy)*Math.sin(rx)+(z0-oz)*Math.cos(rx),\n               oz+(y1-oy)*Math.sin(rx)+(z1-oz)*Math.cos(rx))\n            }\n         if (mod.ry.value != '') {\n            var ry = parseFloat(mod.ry.value)*Math.PI/180\n            var xvar = variables[0]\n            var zvar = variables[2]\n            var xre = new RegExp(xvar,'g')\n            var zre = new RegExp(zvar,'g')\n            fn = fn.replace(xre,\n               `((${ox})+(${xvar}-(${ox}))*Math.cos(${ry})+(TEMP-(${oz}))*Math.sin(${ry}))`)\n            fn = fn.replace(zre,\n               `((${oz})-(${xvar}-(${ox}))*Math.sin(${ry})+(${zvar}-(${oz}))*Math.cos(${ry}))`)\n            fn = fn.replace(/TEMP/g,zvar)\n            var x0 = limits[0][0]\n            var x1 = limits[0][1]\n            var z0 = limits[2][0]\n            var z1 = limits[2][1]\n            limits[0][0] = Math.min(\n               ox+(x0-ox)*Math.cos(ry)-(z0-oz)*Math.sin(ry),\n               ox+(x0-ox)*Math.cos(ry)-(z1-oz)*Math.sin(ry),\n               ox+(x1-ox)*Math.cos(ry)-(z0-oz)*Math.sin(ry),\n               ox+(x1-ox)*Math.cos(ry)-(z1-oz)*Math.sin(ry))\n            limits[0][1] = Math.max(\n               ox+(x0-ox)*Math.cos(ry)-(z0-oz)*Math.sin(ry),\n               ox+(x0-ox)*Math.cos(ry)-(z1-oz)*Math.sin(ry),\n               ox+(x1-ox)*Math.cos(ry)-(z0-oz)*Math.sin(ry),\n               ox+(x1-ox)*Math.cos(ry)-(z1-oz)*Math.sin(ry))\n            limits[2][0] = Math.min(\n               oz+(x0-ox)*Math.sin(ry)+(z0-oz)*Math.cos(ry),\n               oz+(x0-ox)*Math.sin(ry)+(z1-oz)*Math.cos(ry),\n               oz+(x1-ox)*Math.sin(ry)+(z0-oz)*Math.cos(ry),\n               oz+(x1-ox)*Math.sin(ry)+(z1-oz)*Math.cos(ry))\n            limits[2][1] = Math.max(\n               oz+(x0-ox)*Math.sin(ry)+(z0-oz)*Math.cos(ry),\n               oz+(x0-ox)*Math.sin(ry)+(z1-oz)*Math.cos(ry),\n               oz+(x1-ox)*Math.sin(ry)+(z0-oz)*Math.cos(ry),\n               oz+(x1-ox)*Math.sin(ry)+(z1-oz)*Math.cos(ry))\n            }\n         if (mod.rz.value != '') {\n            var rz = parseFloat(mod.rz.value)*Math.PI/180\n            var xvar = variables[0]\n            var yvar = variables[1]\n            var xre = new RegExp(xvar,'g')\n            var yre = new RegExp(yvar,'g')\n            fn = fn.replace(xre,\n               `((${ox})+(${xvar}-(${ox}))*Math.cos(${rz})+(TEMP-(${oy}))*Math.sin(${rz}))`)\n            fn = fn.replace(yre,\n               `((${oy})-(${xvar}-(${ox}))*Math.sin(${rz})+(${yvar}-(${oy}))*Math.cos(${rz}))`)\n            fn = fn.replace(/TEMP/g,yvar)\n            var x0 = limits[0][0]\n            var x1 = limits[0][1]\n            var y0 = limits[1][0]\n            var y1 = limits[1][1]\n            limits[0][0] = Math.min(\n               ox+(x0-ox)*Math.cos(rz)-(y0-oy)*Math.sin(rz),\n               ox+(x0-ox)*Math.cos(rz)-(y1-oy)*Math.sin(rz),\n               ox+(x1-ox)*Math.cos(rz)-(y0-oy)*Math.sin(rz),\n               ox+(x1-ox)*Math.cos(rz)-(y1-oy)*Math.sin(rz))\n            limits[0][1] = Math.max(\n               ox+(x0-ox)*Math.cos(rz)-(y0-oy)*Math.sin(rz),\n               ox+(x0-ox)*Math.cos(rz)-(y1-oy)*Math.sin(rz),\n               ox+(x1-ox)*Math.cos(rz)-(y0-oy)*Math.sin(rz),\n               ox+(x1-ox)*Math.cos(rz)-(y1-oy)*Math.sin(rz))\n            limits[1][0] = Math.min(\n               oy+(x0-ox)*Math.sin(rz)+(y0-oy)*Math.cos(rz),\n               oy+(x0-ox)*Math.sin(rz)+(y1-oy)*Math.cos(rz),\n               oy+(x1-ox)*Math.sin(rz)+(y0-oy)*Math.cos(rz),\n               oy+(x1-ox)*Math.sin(rz)+(y1-oy)*Math.cos(rz))\n            limits[1][1] = Math.max(\n               oy+(x0-ox)*Math.sin(rz)+(y0-oy)*Math.cos(rz),\n               oy+(x0-ox)*Math.sin(rz)+(y1-oy)*Math.cos(rz),\n               oy+(x1-ox)*Math.sin(rz)+(y0-oy)*Math.cos(rz),\n               oy+(x1-ox)*Math.sin(rz)+(y1-oy)*Math.cos(rz))\n            }\n         var shape = {function:fn,variables:variables,limits:limits,type:type}\n         mods.output(mod,'shape',shape)}\n         }}\n//\n// interface\n//\nvar interface = function(div){\n   mod.div = div\n   div.appendChild(document.createTextNode('angle\\xa0\\xa0\\xa0 origin'))\n   div.appendChild(document.createElement('br'))\n   //\n   // x\n   //\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 3\n      div.appendChild(input)\n      mod.rx = input\n   div.appendChild(document.createTextNode(' x '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 3\n      div.appendChild(input)\n      mod.ox = input\n   div.appendChild(document.createElement('br'))\n   //\n   // y\n   //\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 3\n      div.appendChild(input)\n      mod.ry = input\n   div.appendChild(document.createTextNode(' y '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 3\n      div.appendChild(input)\n      mod.oy = input\n   div.appendChild(document.createElement('br'))\n   //\n   // z\n   //\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 3\n      div.appendChild(input)\n      mod.rz = input\n   div.appendChild(document.createTextNode(' z '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 3\n      div.appendChild(input)\n      mod.oz = input\n   div.appendChild(document.createElement('br'))\n   //\n   // output button\n   //\n   var btn = document.createElement('button')\n      btn.style.padding = mods.ui.padding\n      btn.style.margin = 1\n      btn.appendChild(document.createTextNode('output'))\n      btn.addEventListener('click',function(){\n         outputs.shape.event()\n         })\n      div.appendChild(btn)\n   }\n//\n// local functions\n//\n;\n//\n// return values\n//\nreturn ({\n   mod:mod,\n   name:name,\n   init:init,\n   inputs:inputs,\n   outputs:outputs,\n   interface:interface\n   })\n}())\n","top":"436","left":"3125","inputs":{},"outputs":{}},"0.7684458055346575":{"definition":"//\n// construct object\n//\n// Neil Gershenfeld \n// (c) Massachusetts Institute of Technology 2018\n// \n// This work may be reproduced, modified, distributed, performed, and \n// displayed for any purpose, but must acknowledge the mods\n// project. Copyright is retained and must be preserved. The work is \n// provided as is; no warranty is provided, and users accept all \n// liability.\n//\n// closure\n//\n(function(){\n//\n// module globals\n//\nvar mod = {}\n//\n// name\n//\nvar name = 'construct object'\n//\n// initialization\n//\nvar init = function() {\n   mod.in0.value = '{\"x\":0,\"y\":1}'\n   mod.in1.value = '{}'\n   mod.out0.value = '{\"x0\":in0.x0+.1,\"x1\":in0.x1-.1,\"y2\":in0.y2-.1}'\n   mod.out1.value = '{}'\n   }\n//\n// inputs\n//\nvar inputs = {\n   in0:{type:'',label:'input 0',\n      event:function(evt) {\n         mod.in0.value = JSON.stringify(evt.detail)\n         construct_output()\n         }},\n   in1:{type:'',label:'input 1',\n      event:function(evt) {\n         mod.in1.value = JSON.stringify(evt.detail)\n         construct_output()\n         }}}\n//\n// outputs\n//\nvar outputs = {\n   out0:{type:'',label:'output 0',\n      event:function(arg){\n         mods.output(mod,'out0',arg)\n         }},\n   out1:{type:'',label:'output 1',\n      event:function(arg){\n         mods.output(mod,'out1',arg)\n         }}}\n//\n// interface\n//\nvar interface = function(div){\n   mod.div = div\n   div.appendChild(document.createTextNode('input 0:'))\n   div.appendChild(document.createElement('br'))\n   var text = document.createElement('textarea')\n      text.setAttribute('rows',1)\n      text.setAttribute('cols',mods.ui.cols)\n      div.appendChild(text)\n      mod.in0 = text\n   div.appendChild(document.createElement('br'))\n   div.appendChild(document.createTextNode('input 1:'))\n   div.appendChild(document.createElement('br'))\n   var text = document.createElement('textarea')\n      text.setAttribute('rows',1)\n      text.setAttribute('cols',mods.ui.cols)\n      div.appendChild(text)\n      mod.in1 = text\n   div.appendChild(document.createElement('br'))\n   div.appendChild(document.createTextNode('output 0:'))\n   div.appendChild(document.createElement('br'))\n   var text = document.createElement('textarea')\n      text.setAttribute('rows',1)\n      text.setAttribute('cols',mods.ui.cols)\n      div.appendChild(text)\n      mod.out0 = text\n   div.appendChild(document.createElement('br'))\n   div.appendChild(document.createTextNode('output 1:'))\n   div.appendChild(document.createElement('br'))\n   var text = document.createElement('textarea')\n      text.setAttribute('rows',1)\n      text.setAttribute('cols',mods.ui.cols)\n      div.appendChild(text)\n      mod.out1 = text\n   }\n//\n// local functions\n//\nfunction construct_output() {\n   var in0 = JSON.parse(mod.in0.value)\n   var in1 = JSON.parse(mod.in1.value)\n   eval('out0 ='+mod.out0.value)\n   eval('out1 ='+mod.out1.value)\n   outputs.out0.event(out0)\n   outputs.out1.event(out1)\n   }\n//\n// return values\n//\nreturn ({\n   mod:mod,\n   name:name,\n   init:init,\n   inputs:inputs,\n   outputs:outputs,\n   interface:interface\n   })\n}())\n","top":"359","left":"93","inputs":{},"outputs":{}}},"links":["{\"source\":\"{\\\"id\\\":\\\"0.7487681738870572\\\",\\\"type\\\":\\\"outputs\\\",\\\"name\\\":\\\"shape\\\"}\",\"dest\":\"{\\\"id\\\":\\\"0.7487681738870572\\\",\\\"type\\\":\\\"inputs\\\",\\\"name\\\":\\\"clear\\\"}\"}","{\"source\":\"{\\\"id\\\":\\\"0.7487681738870572\\\",\\\"type\\\":\\\"outputs\\\",\\\"name\\\":\\\"shape\\\"}\",\"dest\":\"{\\\"id\\\":\\\"0.68537421077021\\\",\\\"type\\\":\\\"inputs\\\",\\\"name\\\":\\\"shape\\\"}\"}","{\"source\":\"{\\\"id\\\":\\\"0.21759291207561082\\\",\\\"type\\\":\\\"outputs\\\",\\\"name\\\":\\\"shape\\\"}\",\"dest\":\"{\\\"id\\\":\\\"0.7487681738870572\\\",\\\"type\\\":\\\"inputs\\\",\\\"name\\\":\\\"shape0\\\"}\"}","{\"source\":\"{\\\"id\\\":\\\"0.49560366170330883\\\",\\\"type\\\":\\\"outputs\\\",\\\"name\\\":\\\"shape\\\"}\",\"dest\":\"{\\\"id\\\":\\\"0.49560366170330883\\\",\\\"type\\\":\\\"inputs\\\",\\\"name\\\":\\\"clear\\\"}\"}","{\"source\":\"{\\\"id\\\":\\\"0.49560366170330883\\\",\\\"type\\\":\\\"outputs\\\",\\\"name\\\":\\\"shape\\\"}\",\"dest\":\"{\\\"id\\\":\\\"0.8758092254970019\\\",\\\"type\\\":\\\"inputs\\\",\\\"name\\\":\\\"shape0\\\"}\"}","{\"source\":\"{\\\"id\\\":\\\"0.8758092254970019\\\",\\\"type\\\":\\\"outputs\\\",\\\"name\\\":\\\"shape\\\"}\",\"dest\":\"{\\\"id\\\":\\\"0.8758092254970019\\\",\\\"type\\\":\\\"inputs\\\",\\\"name\\\":\\\"clear\\\"}\"}","{\"source\":\"{\\\"id\\\":\\\"0.8758092254970019\\\",\\\"type\\\":\\\"outputs\\\",\\\"name\\\":\\\"shape\\\"}\",\"dest\":\"{\\\"id\\\":\\\"0.3682473936923236\\\",\\\"type\\\":\\\"inputs\\\",\\\"name\\\":\\\"shape0\\\"}\"}","{\"source\":\"{\\\"id\\\":\\\"0.3682473936923236\\\",\\\"type\\\":\\\"outputs\\\",\\\"name\\\":\\\"shape\\\"}\",\"dest\":\"{\\\"id\\\":\\\"0.3682473936923236\\\",\\\"type\\\":\\\"inputs\\\",\\\"name\\\":\\\"clear\\\"}\"}","{\"source\":\"{\\\"id\\\":\\\"0.7041875522381654\\\",\\\"type\\\":\\\"outputs\\\",\\\"name\\\":\\\"shape\\\"}\",\"dest\":\"{\\\"id\\\":\\\"0.7041875522381654\\\",\\\"type\\\":\\\"inputs\\\",\\\"name\\\":\\\"clear\\\"}\"}","{\"source\":\"{\\\"id\\\":\\\"0.3682473936923236\\\",\\\"type\\\":\\\"outputs\\\",\\\"name\\\":\\\"shape\\\"}\",\"dest\":\"{\\\"id\\\":\\\"0.7041875522381654\\\",\\\"type\\\":\\\"inputs\\\",\\\"name\\\":\\\"shape0\\\"}\"}","{\"source\":\"{\\\"id\\\":\\\"0.7041875522381654\\\",\\\"type\\\":\\\"outputs\\\",\\\"name\\\":\\\"shape\\\"}\",\"dest\":\"{\\\"id\\\":\\\"0.472314937835305\\\",\\\"type\\\":\\\"inputs\\\",\\\"name\\\":\\\"shape\\\"}\"}","{\"source\":\"{\\\"id\\\":\\\"0.3682473936923236\\\",\\\"type\\\":\\\"outputs\\\",\\\"name\\\":\\\"shape\\\"}\",\"dest\":\"{\\\"id\\\":\\\"0.8080500119802858\\\",\\\"type\\\":\\\"inputs\\\",\\\"name\\\":\\\"shape\\\"}\"}","{\"source\":\"{\\\"id\\\":\\\"0.8080500119802858\\\",\\\"type\\\":\\\"outputs\\\",\\\"name\\\":\\\"shape\\\"}\",\"dest\":\"{\\\"id\\\":\\\"0.7041875522381654\\\",\\\"type\\\":\\\"inputs\\\",\\\"name\\\":\\\"shape1\\\"}\"}","{\"source\":\"{\\\"id\\\":\\\"0.7487681738870572\\\",\\\"type\\\":\\\"outputs\\\",\\\"name\\\":\\\"shape\\\"}\",\"dest\":\"{\\\"id\\\":\\\"0.0918781312219622\\\",\\\"type\\\":\\\"inputs\\\",\\\"name\\\":\\\"shape\\\"}\"}","{\"source\":\"{\\\"id\\\":\\\"0.0918781312219622\\\",\\\"type\\\":\\\"outputs\\\",\\\"name\\\":\\\"shape\\\"}\",\"dest\":\"{\\\"id\\\":\\\"0.49560366170330883\\\",\\\"type\\\":\\\"inputs\\\",\\\"name\\\":\\\"shape0\\\"}\"}","{\"source\":\"{\\\"id\\\":\\\"0.7142792777594954\\\",\\\"type\\\":\\\"outputs\\\",\\\"name\\\":\\\"shape\\\"}\",\"dest\":\"{\\\"id\\\":\\\"0.21759291207561082\\\",\\\"type\\\":\\\"inputs\\\",\\\"name\\\":\\\"shape0\\\"}\"}","{\"source\":\"{\\\"id\\\":\\\"0.6453620824239269\\\",\\\"type\\\":\\\"outputs\\\",\\\"name\\\":\\\"shape\\\"}\",\"dest\":\"{\\\"id\\\":\\\"0.21759291207561082\\\",\\\"type\\\":\\\"inputs\\\",\\\"name\\\":\\\"shape1\\\"}\"}","{\"source\":\"{\\\"id\\\":\\\"0.0918781312219622\\\",\\\"type\\\":\\\"outputs\\\",\\\"name\\\":\\\"shape\\\"}\",\"dest\":\"{\\\"id\\\":\\\"0.006509166879356654\\\",\\\"type\\\":\\\"inputs\\\",\\\"name\\\":\\\"shape\\\"}\"}","{\"source\":\"{\\\"id\\\":\\\"0.006509166879356654\\\",\\\"type\\\":\\\"outputs\\\",\\\"name\\\":\\\"shape\\\"}\",\"dest\":\"{\\\"id\\\":\\\"0.49560366170330883\\\",\\\"type\\\":\\\"inputs\\\",\\\"name\\\":\\\"shape1\\\"}\"}","{\"source\":\"{\\\"id\\\":\\\"0.0918781312219622\\\",\\\"type\\\":\\\"outputs\\\",\\\"name\\\":\\\"shape\\\"}\",\"dest\":\"{\\\"id\\\":\\\"0.4122998412009501\\\",\\\"type\\\":\\\"inputs\\\",\\\"name\\\":\\\"shape\\\"}\"}","{\"source\":\"{\\\"id\\\":\\\"0.4122998412009501\\\",\\\"type\\\":\\\"outputs\\\",\\\"name\\\":\\\"shape\\\"}\",\"dest\":\"{\\\"id\\\":\\\"0.8758092254970019\\\",\\\"type\\\":\\\"inputs\\\",\\\"name\\\":\\\"shape1\\\"}\"}","{\"source\":\"{\\\"id\\\":\\\"0.8758092254970019\\\",\\\"type\\\":\\\"outputs\\\",\\\"name\\\":\\\"shape\\\"}\",\"dest\":\"{\\\"id\\\":\\\"0.3786897870503\\\",\\\"type\\\":\\\"inputs\\\",\\\"name\\\":\\\"shape\\\"}\"}","{\"source\":\"{\\\"id\\\":\\\"0.3786897870503\\\",\\\"type\\\":\\\"outputs\\\",\\\"name\\\":\\\"shape\\\"}\",\"dest\":\"{\\\"id\\\":\\\"0.3682473936923236\\\",\\\"type\\\":\\\"inputs\\\",\\\"name\\\":\\\"shape1\\\"}\"}","{\"source\":\"{\\\"id\\\":\\\"0.21759291207561082\\\",\\\"type\\\":\\\"outputs\\\",\\\"name\\\":\\\"shape\\\"}\",\"dest\":\"{\\\"id\\\":\\\"0.2219021943747128\\\",\\\"type\\\":\\\"inputs\\\",\\\"name\\\":\\\"shape\\\"}\"}","{\"source\":\"{\\\"id\\\":\\\"0.2219021943747128\\\",\\\"type\\\":\\\"outputs\\\",\\\"name\\\":\\\"shape\\\"}\",\"dest\":\"{\\\"id\\\":\\\"0.7487681738870572\\\",\\\"type\\\":\\\"inputs\\\",\\\"name\\\":\\\"shape1\\\"}\"}","{\"source\":\"{\\\"id\\\":\\\"0.7041875522381654\\\",\\\"type\\\":\\\"outputs\\\",\\\"name\\\":\\\"shape\\\"}\",\"dest\":\"{\\\"id\\\":\\\"0.8276595726865658\\\",\\\"type\\\":\\\"inputs\\\",\\\"name\\\":\\\"shape\\\"}\"}","{\"source\":\"{\\\"id\\\":\\\"0.8276595726865658\\\",\\\"type\\\":\\\"outputs\\\",\\\"name\\\":\\\"shape\\\"}\",\"dest\":\"{\\\"id\\\":\\\"0.008661418414143474\\\",\\\"type\\\":\\\"inputs\\\",\\\"name\\\":\\\"shape\\\"}\"}","{\"source\":\"{\\\"id\\\":\\\"0.21759291207561082\\\",\\\"type\\\":\\\"outputs\\\",\\\"name\\\":\\\"shape\\\"}\",\"dest\":\"{\\\"id\\\":\\\"0.21759291207561082\\\",\\\"type\\\":\\\"inputs\\\",\\\"name\\\":\\\"clear\\\"}\"}","{\"source\":\"{\\\"id\\\":\\\"0.7142792777594954\\\",\\\"type\\\":\\\"outputs\\\",\\\"name\\\":\\\"variables\\\"}\",\"dest\":\"{\\\"id\\\":\\\"0.7684458055346575\\\",\\\"type\\\":\\\"inputs\\\",\\\"name\\\":\\\"in0\\\"}\"}","{\"source\":\"{\\\"id\\\":\\\"0.7684458055346575\\\",\\\"type\\\":\\\"outputs\\\",\\\"name\\\":\\\"out0\\\"}\",\"dest\":\"{\\\"id\\\":\\\"0.6453620824239269\\\",\\\"type\\\":\\\"inputs\\\",\\\"name\\\":\\\"variables\\\"}\"}"]}
