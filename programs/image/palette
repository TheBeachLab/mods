{"modules":{"0.6453763507273559":{"definition":"//\n// read png\n//\n// Neil Gershenfeld \n// (c) Massachusetts Institute of Technology 2015,6\n// \n// This work may be reproduced, modified, distributed, performed, and \n// displayed for any purpose, but must acknowledge the mods\n// project. Copyright is retained and must be preserved. The work is \n// provided as is; no warranty is provided, and users accept all \n// liability.\n//\n// closure\n//\n(function(){\n//\n// module globals\n//\nvar mod = {}\n//\n// name\n//\nvar name = 'read png'\n//\n// initialization\n//\nvar init = function() {\n   }\n//\n// inputs\n//\nvar inputs = {\n   }\n//\n// outputs\n//\nvar outputs = {\n   image:{type:'RGBA',\n      event:function(){\n         var ctx = mod.img.getContext(\"2d\")\n         var img = ctx.getImageData(0,0,mod.img.width,mod.img.height)\n         mods.output(mod,'image',img)}},\n   imageInfo:{type:'object',\n      event:function(){\n         var obj = {}\n         obj.name = mod.name.nodeValue\n         obj.dpi = parseFloat(mod.dpitext.value)\n         obj.width = mod.img.width\n         obj.height = mod.img.height\n         mods.output(mod,'imageInfo',obj)}}}\n//\n// interface\n//\nvar interface = function(div){\n   mod.div = div\n   //\n   // file input control\n   //\n   var file = document.createElement('input')\n      file.setAttribute('type','file')\n      file.setAttribute('id',div.id+'file_input')\n      file.style.position = 'absolute'\n      file.style.left = 0\n      file.style.top = 0\n      file.style.width = 0\n      file.style.height = 0\n      file.style.opacity = 0\n      file.addEventListener('change',function() {\n         png_read_handler()\n         })\n      div.appendChild(file)\n      mod.file = file\n   //\n   // on-screen drawing canvas\n   //\n   var canvas = document.createElement('canvas')\n      canvas.width = mods.ui.canvas\n      canvas.height = mods.ui.canvas\n      canvas.style.backgroundColor = 'rgb(255,255,255)'\n      div.appendChild(canvas)\n      mod.canvas = canvas\n   div.appendChild(document.createElement('br'))\n   //\n   // off-screen image canvas\n   //\n   var canvas = document.createElement('canvas')\n      mod.img = canvas\n   //\n   // file select button\n   //\n   var btn = document.createElement('button')\n      btn.style.padding = mods.ui.padding\n      btn.style.margin = 1\n      btn.appendChild(document.createTextNode('select png file'))\n      btn.addEventListener('click',function(){\n         var file = document.getElementById(div.id+'file_input')\n         file.value = null\n         file.click()\n         })\n      div.appendChild(btn)\n   div.appendChild(document.createElement('br'))\n   //\n   // view button\n   //\n   var btn = document.createElement('button')\n      btn.style.padding = mods.ui.padding\n      btn.style.margin = 1\n      btn.appendChild(document.createTextNode('view'))\n      btn.addEventListener('click',function(){\n         var win = window.open('')\n         var btn = document.createElement('button')\n            btn.appendChild(document.createTextNode('close'))\n            btn.style.padding = mods.ui.padding\n            btn.style.margin = 1\n            btn.addEventListener('click',function(){\n               win.close()\n               })\n            win.document.body.appendChild(btn)\n         win.document.body.appendChild(document.createElement('br'))\n         var canvas = document.createElement('canvas')\n            canvas.width = mod.img.width\n            canvas.height = mod.img.height\n            win.document.body.appendChild(canvas)\n         var ctx = canvas.getContext(\"2d\")\n            ctx.drawImage(mod.img,0,0)\n         })\n      div.appendChild(btn)\n   div.appendChild(document.createTextNode(' '))\n   //\n   // invert button\n   //\n   var btn = document.createElement('button')\n      btn.style.padding = mods.ui.padding\n      btn.style.margin = 1\n      btn.appendChild(document.createTextNode('invert'))\n      btn.addEventListener('click',function(){\n         invert_image()\n         })\n      div.appendChild(btn)\n   div.appendChild(document.createElement('br'))\n   //\n   // info div\n   //\n   var info = document.createElement('div')\n      info.setAttribute('id',div.id+'info')\n      info.appendChild(document.createTextNode('dpi: '))\n      var input = document.createElement('input')\n         input.type = 'text'\n         input.size = 6\n         input.addEventListener('input',function(){\n            mod.dpi = parseFloat(mod.dpitext.value)\n            mod.mmtext.nodeValue = (25.4*mod.img.width/mod.dpi).toFixed(3)\n               +' x '+(25.4*mod.img.height/mod.dpi).toFixed(3)+' mm'\n            mod.intext.nodeValue = (mod.img.width/mod.dpi).toFixed(3)\n               +' x '+(mod.img.height/mod.dpi).toFixed(3)+' in'\n            outputs.imageInfo.event()\n            })\n         info.appendChild(input)\n         mod.dpitext = input\n      info.appendChild(document.createElement('br'))\n      var text = document.createTextNode('px: ')\n         info.appendChild(text)\n         mod.pxtext = text\n      info.appendChild(document.createElement('br'))\n      var text = document.createTextNode('mm: ')\n         info.appendChild(text)\n         mod.mmtext = text\n      info.appendChild(document.createElement('br'))\n      var text = document.createTextNode('in: ')\n         info.appendChild(text)\n         mod.intext = text\n      info.appendChild(document.createElement('br'))\n      var text = document.createTextNode('')\n         info.appendChild(text)\n         mod.name = text\n      div.appendChild(info)\n   }\n//\n// local functions\n//\n// read handler\n//\nfunction png_read_handler(event) {\n   var file_reader = new FileReader()\n   file_reader.onload = png_binary_handler\n   input_file = mod.file.files[0]\n   file_name = input_file.name\n   mod.name.nodeValue = file_name\n   file_reader.readAsArrayBuffer(input_file)\n   }\n//\n// binary load handler\n//\nfunction png_binary_handler(event) {\n   //\n   // get DPI\n   //\n   // 8 header\n   // 4 len, 4 type, data, 4 crc\n   // pHYs 4 ppx, 4 ppy, 1 unit: 0 ?, 1 meter\n   // IEND\n   //\n   var units = ppx = ppy = 0\n   var buf = event.target.result\n   var view = new DataView(buf)\n   var ptr = 8\n   if (!((view.getUint8(1) == 80) && (view.getUint8(2) == 78) && (view.getUint8(3) == 71))) {\n      set_prompt(\"error: PNG header not found\")\n      return\n      }\n   while (1) {\n      var length = view.getUint32(ptr)\n      ptr += 4\n      var type = String.fromCharCode(\n         view.getUint8(ptr),view.getUint8(ptr+1),\n         view.getUint8(ptr+2),view.getUint8(ptr+3))\n      ptr += 4\n      if (type == \"pHYs\") {\n         ppx = view.getUint32(ptr)\n         ppy = view.getUint32(ptr + 4)\n         units = view.getUint8(ptr + 8)\n         }\n      if (type == \"IEND\")\n         break\n      ptr += length + 4\n      }\n   if (units == 0) {\n      set_prompt(\"no PNG units not found, assuming 72 DPI\")\n      ppx = 72*1000/25.4\n      }\n   dpi = ppx*25.4/1000\n   //\n   // read as URL for display\n   //\n   var file_reader = new FileReader()\n   file_reader.onload = png_URL_handler\n   file_reader.readAsDataURL(input_file)\n   }\n//\n// URL load handler\n//\nfunction png_URL_handler(event) {\n   var img = new Image()\n   img.setAttribute(\"src\",event.target.result)\n   img.onload = function() {\n      if (img.width > img.height) {\n         var x0 = 0\n         var y0 = mod.canvas.height*.5*(1-img.height/img.width)\n         var w = mod.canvas.width\n         var h = mod.canvas.width*img.height/img.width\n         }\n      else {\n         var x0 = mod.canvas.width*.5*(1-img.width/img.height)\n         var y0 = 0\n         var w = mod.canvas.height*img.width/img.height\n         var h = mod.canvas.height\n         }\n      var ctx = mod.canvas.getContext(\"2d\")\n         ctx.clearRect(0,0,mod.canvas.width,mod.canvas.height)\n         ctx.drawImage(img,x0,y0,w,h)\n      var ctx = mod.img.getContext(\"2d\")\n         ctx.canvas.width = img.width\n         ctx.canvas.height = img.height \n         ctx.drawImage(img,0,0)\n      mod.dpitext.value = dpi.toFixed(3)\n      mod.pxtext.nodeValue = img.width+' x '+img.height+' px'\n      mod.mmtext.nodeValue = (25.4*img.width/dpi).toFixed(3)\n         +' x '+(25.4*img.height/dpi).toFixed(3)+' mm'\n      mod.intext.nodeValue = (img.width/dpi).toFixed(3)\n         +' x '+(img.height/dpi).toFixed(3)+' in'\n      outputs.image.event()\n      outputs.imageInfo.event()\n      }\n   }\n//\n// invert image\n//\nfunction invert_image() {\n   var blob = new Blob(['('+worker.toString()+'())'])\n   var url = window.URL.createObjectURL(blob)\n   var webworker = new Worker(url)\n   webworker.addEventListener('message',function(evt) {\n      window.URL.revokeObjectURL(url)\n      var h = mod.img.height\n      var w = mod.img.width\n      var buf = new Uint8ClampedArray(evt.data.buffer)\n      var imgdata = new ImageData(buf,w,h)\n      var ctx = mod.img.getContext(\"2d\")\n      ctx.putImageData(imgdata,0,0)\n      if (w > h) {\n         var x0 = 0\n         var y0 = mod.canvas.height*.5*(1-h/w)\n         var wd = mod.canvas.width\n         var hd = mod.canvas.width*h/w\n         }\n      else {\n         var x0 = mod.canvas.width*.5*(1-w/h)\n         var y0 = 0\n         var wd = mod.canvas.height*w/h\n         var hd = mod.canvas.height\n         }\n      var ctx = mod.canvas.getContext(\"2d\")\n      ctx.drawImage(mod.img,x0,y0,wd,hd)\n      webworker.terminate()\n      outputs.image.event()\n      })\n   var ctx = mod.canvas.getContext(\"2d\")\n   ctx.clearRect(0,0,mod.canvas.width,mod.canvas.height)\n   var h = mod.img.height\n   var w = mod.img.width\n   var ctx = mod.img.getContext(\"2d\")\n   var img = ctx.getImageData(0,0,w,h)\n   webworker.postMessage({\n      height:img.height,width:img.width,buffer:img.data.buffer},\n      [img.data.buffer])\n   }\nfunction worker() {\n   self.addEventListener('message',function(evt) {\n      var h = evt.data.height\n      var w = evt.data.width\n      var buf = new Uint8ClampedArray(evt.data.buffer)\n      for (var row = 0; row < h; ++row) {\n         for (var col = 0; col < w; ++col) {\n            buf[(h-1-row)*w*4+col*4+0] \n               = 255-buf[(h-1-row)*w*4+col*4+0] \n            buf[(h-1-row)*w*4+col*4+1] \n               = 255-buf[(h-1-row)*w*4+col*4+1] \n            buf[(h-1-row)*w*4+col*4+2] \n               = 255-buf[(h-1-row)*w*4+col*4+2] \n            buf[(h-1-row)*w*4+col*4+3] = 255\n            }\n         }\n      self.postMessage({buffer:buf.buffer},[buf.buffer])\n      })\n   }\n//\n// return values\n//\nreturn ({\n   name:name,\n   init:init,\n   inputs:inputs,\n   outputs:outputs,\n   interface:interface\n   })\n}())\n","top":"119","left":"140","inputs":{},"outputs":{}},"0.8297558162736646":{"definition":"//\n// image palette\n//    todo:\n//       linear time palette search\n//\n// Neil Gershenfeld \n// (c) Massachusetts Institute of Technology 2017\n// \n// This work may be reproduced, modified, distributed, performed, and \n// displayed for any purpose, but must acknowledge the mods\n// project. Copyright is retained and must be preserved. The work is \n// provided as is; no warranty is provided, and users accept all \n// liability.\n//\n// closure\n//\n(function(){\n//\n// module globals\n//\nvar mod = {}\n//\n// name\n//\nvar name = 'image palette'\n//\n// initialization\n//\nvar init = function() {\n   mod.palette = [\n      [255,0,0],\n      [0,255,0],\n      [0,0,255]]\n   mod.palette = [\n      [0,0,0,'black'],\n      [255,0,0,'red'],\n      [0,255,0,'green'],\n      [0,0,255,'blue'],\n      [255,255,0,'yellow'],\n      [255,0,255,'magenta'],\n      [0,255,255,'cyan'],\n      [255,255,255,'white'],\n      [128,0,0],\n      [0,128,0],\n      [0,0,128],\n      [128,128,0],\n      [128,0,128],\n      [0,128,128]]\n   mod.text.value =\n      JSON.stringify(mod.palette).replace(/]\\,/g,'],\\n')\n   }\n//\n// inputs\n//\nvar inputs = {\n   image:{type:'RGBA',\n      event:function(evt){\n         mod.input = evt.detail\n         var ctx = mod.img.getContext(\"2d\")\n         ctx.canvas.width = mod.input.width\n         ctx.canvas.height = mod.input.height \n         var ctx = mod.convert.getContext(\"2d\")\n         ctx.canvas.width = mod.input.width\n         ctx.canvas.height = mod.input.height \n         if (mod.originalspan.style.fontWeight == 'bold')\n            show_original()\n         else\n            show_palette()\n         }}}\n//\n// outputs\n//\nvar outputs = {\n   image:{type:'RGBA',\n      event:function(){\n         var ctx = mod.img.getContext(\"2d\")\n         var img = ctx.getImageData(0,0,mod.img.width,mod.img.height)\n         mods.output(mod,'image',img)}}}\n//\n// interface\n//\nvar interface = function(div){\n   mod.div = div\n   //\n   // file input control\n   //\n   var file = document.createElement('input')\n      file.setAttribute('type','file')\n      file.setAttribute('id',div.id+'file_input')\n      file.style.position = 'absolute'\n      file.style.left = 0\n      file.style.top = 0\n      file.style.width = 0\n      file.style.height = 0\n      file.style.opacity = 0\n      file.addEventListener('change',function() {\n         load_palette()\n         })\n      div.appendChild(file)\n      mod.file = file\n   //\n   // on-screen drawing canvas\n   //\n   var canvas = document.createElement('canvas')\n      canvas.width = mods.ui.canvas\n      canvas.height = mods.ui.canvas\n      canvas.style.backgroundColor = 'rgb(255,255,255)'\n      div.appendChild(canvas)\n      mod.canvas = canvas\n   div.appendChild(document.createElement('br'))\n   //\n   // off-screen image canvas\n   //\n   var canvas = document.createElement('canvas')\n      mod.img = canvas\n   //\n   // off-screen conversion canvas\n   //\n   var canvas = document.createElement('canvas')\n      mod.convert = canvas\n   //\n   // view\n   //\n   var btn = document.createElement('button')\n      btn.style.padding = mods.ui.padding\n      btn.style.margin = 1\n      btn.appendChild(document.createTextNode('view'))\n      btn.addEventListener('click',function(){\n         var win = window.open('')\n         var btn = document.createElement('button')\n            btn.appendChild(document.createTextNode('close'))\n            btn.style.padding = mods.ui.padding\n            btn.style.margin = 1\n            btn.addEventListener('click',function(){\n               win.close()\n               })\n            win.document.body.appendChild(btn)\n         win.document.body.appendChild(document.createElement('br'))\n         var canvas = document.createElement('canvas')\n            canvas.width = mod.img.width\n            canvas.height = mod.img.height\n            win.document.body.appendChild(canvas)\n         var ctx = canvas.getContext(\"2d\")\n            ctx.drawImage(mod.img,0,0)\n         })\n      div.appendChild(btn)\n   div.appendChild(document.createElement('br'))\n   //\n   // image \n   //\n   var btn = document.createElement('button')\n      btn.style.padding = mods.ui.padding\n      btn.style.margin = 1\n      var span = document.createElement('span')\n         var text = document.createTextNode('original')\n            span.appendChild(text)\n         span.style.fontWeight = 'normal'\n         btn.appendChild(span)\n         mod.originalspan = span\n      btn.addEventListener('click',function(){\n         mod.originalspan.style.fontWeight = 'bold'\n         mod.palettespan.style.fontWeight = 'normal'\n         show_original()\n         })\n      div.appendChild(btn)\n   div.appendChild(document.createTextNode(' image '))\n   var btn = document.createElement('button')\n      btn.style.padding = mods.ui.padding\n      btn.style.margin = 1\n      var span = document.createElement('span')\n         var text = document.createTextNode('palette')\n            span.appendChild(text)\n         span.style.fontWeight = 'bold'\n         btn.appendChild(span)\n         mod.palettespan = span\n      btn.addEventListener('click',function(){\n         mod.originalspan.style.fontWeight = 'normal'\n         mod.palettespan.style.fontWeight = 'bold'\n         show_palette()\n         })\n      div.appendChild(btn)\n   div.appendChild(document.createElement('br'))\n   //\n   // palette\n   //\n   var btn = document.createElement('button')\n      btn.style.padding = mods.ui.padding\n      btn.style.margin = 1\n      btn.appendChild(document.createTextNode('load'))\n      btn.addEventListener('click',function(){\n         var file = document.getElementById(div.id+'file_input')\n         file.value = null\n         file.click()\n         })\n      div.appendChild(btn)\n   div.appendChild(document.createTextNode(' palette '))\n   var btn = document.createElement('button')\n      btn.style.padding = mods.ui.padding\n      btn.style.margin = 1\n      btn.appendChild(document.createTextNode('save'))\n      btn.addEventListener('click',function(){\n         save_palette()\n         })\n      div.appendChild(btn)\n   div.appendChild(document.createElement('br'))\n   var text = document.createElement('textarea')\n      text.setAttribute('rows',mods.ui.rows)\n      text.setAttribute('cols',mods.ui.cols)\n      div.appendChild(text)\n      mod.text = text\n   div.appendChild(document.createElement('br'))\n   //\n   // save\n   //\n   div.appendChild(document.createTextNode('save'))\n   div.appendChild(document.createElement('br'))\n   var btn = document.createElement('button')\n      btn.style.padding = mods.ui.padding\n      btn.style.margin = 1\n      btn.appendChild(document.createTextNode('image'))\n      btn.addEventListener('click',function(){\n         save_image()\n         })\n      div.appendChild(btn)\n   var btn = document.createElement('button')\n      btn.style.padding = mods.ui.padding\n      btn.style.margin = 1\n      btn.appendChild(document.createTextNode('masks'))\n      btn.addEventListener('click',function(){\n         save_masks()\n         })\n      div.appendChild(btn)\n   var btn = document.createElement('button')\n      btn.style.padding = mods.ui.padding\n      btn.style.margin = 1\n      btn.appendChild(document.createTextNode('colors'))\n      btn.addEventListener('click',function(){\n         save_colors()\n         })\n      div.appendChild(btn)\n   }\n//\n// local functions\n//\n// save_image\n//\nfunction save_image() {\n   var a = document.createElement('a')\n   a.href = mod.img.toDataURL()\n   a.setAttribute('download','image.png')\n   a.style.display = 'none'\n   document.body.appendChild(a)\n   a.click()\n   document.body.removeChild(a)\n   }\n//\n// save_masks\n//\nfunction save_masks() {\n   if (mod.originalspan.style.fontWeight == 'bold') {\n      mod.originalspan.style.fontWeight = 'normal'\n      mod.palettespan.style.fontWeight = 'bold'\n      show_palette()\n      }\n   var palette = JSON.parse(mod.text.value)\n   var blob = new Blob(['('+mask_worker.toString()+'())'])\n   var url = window.URL.createObjectURL(blob)\n   save_mask(0)\n   //\n   // save_mask\n   //\n   function save_mask(index) {\n      var webworker = new Worker(url)\n      webworker.addEventListener('message',function(evt) {\n         var h = mod.img.height\n         var w = mod.img.width\n         var buf = new Uint8ClampedArray(evt.data.buffer)\n         var imgdata = new ImageData(buf,w,h)\n         var ctx = mod.convert.getContext(\"2d\")\n         ctx.putImageData(imgdata,0,0)\n         webworker.terminate()\n         var a = document.createElement('a')\n         a.href = mod.convert.toDataURL()\n         var name = 'mask.'+palette[index][0]\n         name += '.'+palette[index][1]\n         name += '.'+palette[index][2]\n         if (palette[index][3] != undefined)\n            name += '.'+palette[index][3]\n         name += '.png'\n         a.setAttribute('download',name)\n         a.style.display = 'none'\n         document.body.appendChild(a)\n         a.click()\n         document.body.removeChild(a)\n         if (index < (palette.length-1))\n            save_mask(index+1)\n         else\n            window.URL.revokeObjectURL(url)\n         })\n      var ctx = mod.img.getContext(\"2d\")\n      var img = ctx.getImageData(0,0,mod.img.width,mod.img.height)\n      var color = palette[index]\n      webworker.postMessage({\n         height:mod.input.height,width:mod.input.width,color:color,\n         buffer:img.data.buffer})\n      }\n   //\n   // mask_worker\n   //\n   function mask_worker() {\n      self.addEventListener('message',function(evt) {\n         var h = evt.data.height\n         var w = evt.data.width\n         var color = evt.data.color\n         var r = color[0]\n         var g = color[1]\n         var b = color[2]\n         var buf = new Uint8ClampedArray(evt.data.buffer)\n         for (var row = 0; row < h; ++row) {\n            for (var col = 0; col < w; ++col) {\n               var rb = buf[(h-1-row)*w*4+col*4+0] \n               var gb = buf[(h-1-row)*w*4+col*4+1] \n               var bb = buf[(h-1-row)*w*4+col*4+2] \n               if ((rb == r) && (gb == g) && (bb == b)) {\n                  buf[(h-1-row)*w*4+col*4+0] = 255\n                  buf[(h-1-row)*w*4+col*4+1] = 255\n                  buf[(h-1-row)*w*4+col*4+2] = 255\n                  buf[(h-1-row)*w*4+col*4+3] = 255\n                  }\n               else {\n                  buf[(h-1-row)*w*4+col*4+0] = 0\n                  buf[(h-1-row)*w*4+col*4+1] = 0\n                  buf[(h-1-row)*w*4+col*4+2] = 0\n                  buf[(h-1-row)*w*4+col*4+3] = 0\n                  }\n               }\n            }\n         self.postMessage({buffer:buf.buffer},[buf.buffer])\n         })\n      }\n   }\n//\n// save_colors\n//\nfunction save_colors() {\n   if (mod.originalspan.style.fontWeight == 'bold') {\n      mod.originalspan.style.fontWeight = 'normal'\n      mod.palettespan.style.fontWeight = 'bold'\n      show_palette()\n      }\n   var palette = JSON.parse(mod.text.value)\n   var blob = new Blob(['('+color_worker.toString()+'())'])\n   var url = window.URL.createObjectURL(blob)\n   save_color(0)\n   //\n   // save_color\n   //\n   function save_color(index) {\n      var webworker = new Worker(url)\n      webworker.addEventListener('message',function(evt) {\n         var h = mod.img.height\n         var w = mod.img.width\n         var buf = new Uint8ClampedArray(evt.data.buffer)\n         var imgdata = new ImageData(buf,w,h)\n         var ctx = mod.convert.getContext(\"2d\")\n         ctx.putImageData(imgdata,0,0)\n         webworker.terminate()\n         var a = document.createElement('a')\n         a.href = mod.convert.toDataURL()\n         var name = 'color.'+palette[index][0]\n         name += '.'+palette[index][1]\n         name += '.'+palette[index][2]\n         if (palette[index][3] != undefined)\n            name += '.'+palette[index][3]\n         name += '.png'\n         a.setAttribute('download',name)\n         a.setAttribute('download',name)\n         a.style.display = 'none'\n         document.body.appendChild(a)\n         a.click()\n         document.body.removeChild(a)\n         if (index < (palette.length-1))\n            save_color(index+1)\n         else\n            window.URL.revokeObjectURL(url)\n         })\n      var ctx = mod.img.getContext(\"2d\")\n      var img = ctx.getImageData(0,0,mod.img.width,mod.img.height)\n      var color = palette[index]\n      webworker.postMessage({\n         height:mod.input.height,width:mod.input.width,color:color,\n         buffer:img.data.buffer})\n      }\n   //\n   // color_worker\n   //\n   function color_worker() {\n      self.addEventListener('message',function(evt) {\n         var h = evt.data.height\n         var w = evt.data.width\n         var color = evt.data.color\n         var r = color[0]\n         var g = color[1]\n         var b = color[2]\n         var buf = new Uint8ClampedArray(evt.data.buffer)\n         for (var row = 0; row < h; ++row) {\n            for (var col = 0; col < w; ++col) {\n               var rb = buf[(h-1-row)*w*4+col*4+0] \n               var gb = buf[(h-1-row)*w*4+col*4+1] \n               var bb = buf[(h-1-row)*w*4+col*4+2] \n               if ((rb == r) && (gb == g) && (bb == b)) {\n                  buf[(h-1-row)*w*4+col*4+0] = r\n                  buf[(h-1-row)*w*4+col*4+1] = g\n                  buf[(h-1-row)*w*4+col*4+2] = b\n                  buf[(h-1-row)*w*4+col*4+3] = 255\n                  }\n               else {\n                  buf[(h-1-row)*w*4+col*4+0] = 0\n                  buf[(h-1-row)*w*4+col*4+1] = 0\n                  buf[(h-1-row)*w*4+col*4+2] = 0\n                  buf[(h-1-row)*w*4+col*4+3] = 0\n                  }\n               }\n            }\n         self.postMessage({buffer:buf.buffer},[buf.buffer])\n         })\n      }\n   }\n//\n// save_palette\n//\nfunction save_palette() {\n   var a = document.createElement('a')\n   a.setAttribute('href','data:text/plain;charset=utf-8,'+ \n      encodeURIComponent(mod.text.value))\n   a.setAttribute('download','palette.txt')\n   a.style.display = 'none'\n   document.body.appendChild(a)\n   a.click()\n   document.body.removeChild(a)\n   }\n//\n// load_palette\n//\nfunction load_palette(event) {\n   var file_reader = new FileReader()\n   file_reader.onload = load_palette_handler\n   input_file = mod.file.files[0]\n   file_name = input_file.name\n   file_reader.readAsText(input_file)\n   }\n//\n// load_palette_handler\n//\nfunction load_palette_handler(event) {\n   mod.text.value = event.target.result\n   }\n//\n// show_original\n//\nfunction show_original() {\n   var h = mod.img.height\n   var w = mod.img.width\n   var ctx = mod.img.getContext(\"2d\")\n   ctx.putImageData(mod.input,0,0)\n   if (w > h) {\n      var x0 = 0\n      var y0 = mod.canvas.height*.5*(1-h/w)\n      var wd = mod.canvas.width\n      var hd = mod.canvas.width*h/w\n      }\n   else {\n      var x0 = mod.canvas.width*.5*(1-w/h)\n      var y0 = 0\n      var wd = mod.canvas.height*w/h\n      var hd = mod.canvas.height\n      }\n   var ctx = mod.canvas.getContext(\"2d\")\n   ctx.clearRect(0,0,mod.canvas.width,mod.canvas.height)\n   ctx.drawImage(mod.img,x0,y0,wd,hd)\n   outputs.image.event()\n   }\n//\n// show palette\n//\nfunction show_palette() {\n   var blob = new Blob(['('+palette_worker.toString()+'())'])\n   var url = window.URL.createObjectURL(blob)\n   var webworker = new Worker(url)\n   webworker.addEventListener('message',function(evt) {\n      window.URL.revokeObjectURL(url)\n      var h = mod.img.height\n      var w = mod.img.width\n      var buf = new Uint8ClampedArray(evt.data.buffer)\n      var imgdata = new ImageData(buf,w,h)\n      var ctx = mod.img.getContext(\"2d\")\n      ctx.putImageData(imgdata,0,0)\n      if (w > h) {\n         var x0 = 0\n         var y0 = mod.canvas.height*.5*(1-h/w)\n         var wd = mod.canvas.width\n         var hd = mod.canvas.width*h/w\n         }\n      else {\n         var x0 = mod.canvas.width*.5*(1-w/h)\n         var y0 = 0\n         var wd = mod.canvas.height*w/h\n         var hd = mod.canvas.height\n         }\n      var ctx = mod.canvas.getContext(\"2d\")\n      ctx.clearRect(0,0,mod.canvas.width,mod.canvas.height)\n      ctx.drawImage(mod.img,x0,y0,wd,hd)\n      webworker.terminate()\n      outputs.image.event()\n      })\n   var ctx = mod.canvas.getContext(\"2d\")\n   ctx.clearRect(0,0,mod.canvas.width,mod.canvas.height)\n   var ctx = mod.img.getContext(\"2d\")\n   ctx.putImageData(mod.input,0,0)\n   var img = ctx.getImageData(0,0,mod.img.width,mod.img.height)\n   var palette = JSON.parse(mod.text.value)\n   webworker.postMessage({\n      height:mod.input.height,width:mod.input.width,palette:palette,\n      buffer:img.data.buffer},\n      [img.data.buffer])\n   }\n//\n// palette worker\n//\nfunction palette_worker() {\n   self.addEventListener('message',function(evt) {\n      var h = evt.data.height\n      var w = evt.data.width\n      var palette = evt.data.palette\n      var buf = new Uint8ClampedArray(evt.data.buffer)\n      var r,g,b,a,rc,gc,bc\n      var cmin,dmin,d\n      for (var row = 0; row < h; ++row) {\n         for (var col = 0; col < w; ++col) {\n            r = buf[(h-1-row)*w*4+col*4+0] \n            g = buf[(h-1-row)*w*4+col*4+1] \n            b = buf[(h-1-row)*w*4+col*4+2] \n            a = buf[(h-1-row)*w*4+col*4+3] \n            dmin = 1e10\n            for (color = 0; color < palette.length; ++color) {\n               rc = palette[color][0]\n               gc = palette[color][1]\n               bc = palette[color][2]\n               d = Math.sqrt(\n                  (rc-r)*(rc-r)+\n                  (gc-g)*(gc-g)+\n                  (bc-b)*(bc-b))\n               if (d < dmin) {\n                  dmin = d\n                  cmin = color\n                  }\n               }\n            buf[(h-1-row)*w*4+col*4+0] = palette[cmin][0]\n            buf[(h-1-row)*w*4+col*4+1] = palette[cmin][1]\n            buf[(h-1-row)*w*4+col*4+2] = palette[cmin][2]\n            buf[(h-1-row)*w*4+col*4+3] = 255\n            }\n         }\n      self.postMessage({buffer:buf.buffer},[buf.buffer])\n      })\n   }\n//\n// return values\n//\nreturn ({\n   name:name,\n   init:init,\n   inputs:inputs,\n   outputs:outputs,\n   interface:interface\n   })\n}())\n","top":"70","left":"752","inputs":{},"outputs":{}}},"links":["{\"source\":\"{\\\"id\\\":\\\"0.6453763507273559\\\",\\\"type\\\":\\\"outputs\\\",\\\"name\\\":\\\"image\\\"}\",\"dest\":\"{\\\"id\\\":\\\"0.8297558162736646\\\",\\\"type\\\":\\\"inputs\\\",\\\"name\\\":\\\"image\\\"}\"}"]}