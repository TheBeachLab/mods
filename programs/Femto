{"modules":{"0.8677372177580144":{"definition":"//\n// Roland MDX-20 milling machine\n//\n// Neil Gershenfeld\n// (c) Massachusetts Institute of Technology 2016\n//\n// This work may be reproduced, modified, distributed, performed, and\n// displayed for any purpose, but must acknowledge the mods\n// project. Copyright is retained and must be preserved. The work is\n// provided as is; no warranty is provided, and users accept all\n// liability.\n//\n// closure\n//\n\n(function(){\n//\n// module globals\n//\nvar mod = {}\n//\n// name\n//\nvar name = 'Roland MDX-20 milling machine'\n//\n// initialization\n//\nvar init = function() {\n   mod.units = 40.0\n   mod.speed.value = 4\n   mod.ox.value = 10\n   mod.oy.value = 10\n   mod.oz.value = 0\n   mod.jz.value = 2\n   mod.hx.value = 0\n   mod.hy.value = 152.4\n   mod.hz.value = 60.5\n   }\n//\n// inputs\n//\nvar inputs = {\n   toolpath:{type:'object',\n      event:function(evt){\n         mod.name = evt.detail.name\n         mod.path = evt.detail.path\n         mod.dpi = evt.detail.dpi\n         mod.width = evt.detail.width\n         mod.height = evt.detail.height\n         make_path()\n         }}}\n//\n// outputs\n//\nvar outputs = {\n   file:{type:'object',\n      event:function(obj){\n         mods.output(mod,'file',obj)\n         }}}\n//\n// interface\n//\nvar interface = function(div){\n   mod.div = div\n   //\n   // speed\n   //\n   div.appendChild(document.createTextNode('speed: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 6\n      div.appendChild(input)\n      mod.speed = input\n   div.appendChild(document.createTextNode(' (mm/s)'))\n   div.appendChild(document.createElement('br'))\n   //\n   // origin x (mm)\n   //\n   div.appendChild(document.createTextNode('origin:'))\n   div.appendChild(document.createElement('br'))\n   div.appendChild(document.createTextNode('x: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 6\n      div.appendChild(input)\n      mod.ox = input\n   div.appendChild(document.createTextNode(' (mm)'))\n   div.appendChild(document.createElement('br'))\n   div.appendChild(document.createTextNode(' y: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 6\n      div.appendChild(input)\n      mod.oy = input\n   div.appendChild(document.createTextNode(' (mm)'))\n   div.appendChild(document.createElement('br'))\n   //div.appendChild(document.createTextNode('z: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 6\n      //div.appendChild(input)\n      mod.oz = input\n   //div.appendChild(document.createTextNode(' (mm)'))\n   //div.appendChild(document.createElement('br'))\n   var btn = document.createElement('button')\n      btn.style.padding = mods.ui.padding\n      btn.style.margin = 1\n      var span = document.createElement('span')\n         var text = document.createTextNode('move to origin')\n            span.appendChild(text)\n         btn.appendChild(span)\n      btn.addEventListener('click',function(){\n         var x0 = mod.units*parseFloat(mod.ox.value);\n         var y0 = mod.units*parseFloat(mod.oy.value);\n         var z0 = mod.units*parseFloat(mod.oz.value);\n         var zjog = mod.units*parseFloat(mod.jz.value);\n         var str = \"PA;PA;VS10;!VZ10;!PZ0,\"+zjog+\";PU\"+x0+\",\"+y0+\";Z\"+x0+\",\"+y0+\",\"+z0+\";!MC0;\"\n         var obj = {}\n         obj.type = 'command'\n         obj.name = mod.name+'.rml'\n         obj.contents = str\n         outputs.file.event(obj)\n         })\n      div.appendChild(btn)\n   div.appendChild(document.createElement('br'))\n   //\n   // jog\n   //\n   div.appendChild(document.createTextNode('jog height:'))\n   div.appendChild(document.createElement('br'))\n   div.appendChild(document.createTextNode('z: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 6\n      div.appendChild(input)\n      mod.jz = input\n   div.appendChild(document.createTextNode(' (mm)'))\n   div.appendChild(document.createElement('br'))\n   //\n   // home\n   //\n   div.appendChild(document.createTextNode('home:'))\n   div.appendChild(document.createElement('br'))\n   div.appendChild(document.createTextNode('x: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 6\n      div.appendChild(input)\n      mod.hx = input\n   div.appendChild(document.createTextNode(' (mm)'))\n   div.appendChild(document.createElement('br'))\n   div.appendChild(document.createTextNode(' y: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 6\n      div.appendChild(input)\n      mod.hy = input\n   div.appendChild(document.createTextNode(' (mm)'))\n   div.appendChild(document.createElement('br'))\n   div.appendChild(document.createTextNode('z: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 6\n      div.appendChild(input)\n      mod.hz = input\n   div.appendChild(document.createTextNode(' (mm)'))\n   div.appendChild(document.createElement('br'))\n   var btn = document.createElement('button')\n      btn.style.padding = mods.ui.padding\n      btn.style.margin = 1\n      var span = document.createElement('span')\n         var text = document.createTextNode('move home and stop')\n            span.appendChild(text)\n         btn.appendChild(span)\n      btn.addEventListener('click',function(){\n         var xhome = mod.units*parseFloat(mod.hx.value);\n         var yhome = mod.units*parseFloat(mod.hy.value);\n         var zhome = mod.units*parseFloat(mod.hz.value);\n         var str = \"PA;PA;!PZ0,\"+zhome+\";PU\"+xhome+\",\"+yhome+\";!MC0;\";\n         var obj = {}\n         obj.type = 'command'\n         obj.name = mod.name+'.rml'\n         obj.contents = str\n         outputs.file.event(obj)\n         })\n      div.appendChild(btn)\n   div.appendChild(document.createElement('br'))\n   }\n//\n// local functions\n//\nfunction make_path() {\n   var dx = 25.4*mod.width/mod.dpi\n   var nx = mod.width\n   var speed = parseFloat(mod.speed.value)\n   var jog = parseFloat(mod.jz.value)\n   var ijog = Math.floor(mod.units*jog)\n   var scale = mod.units*dx/(nx-1)\n   var x0 = parseFloat(mod.ox.value)\n   var y0 = parseFloat(mod.oy.value)\n   var z0 = parseFloat(mod.oz.value)\n   var xoffset = mod.units*x0\n   var yoffset = mod.units*y0\n   var zoffset = mod.units*z0\n   var str = \"PA;PA;\" // plot absolute\n   str += \"VS\"+speed+\";!VZ\"+speed+\";\"\n   str += \"!PZ\"+0+\",\"+ijog+\";\" // set jog\n   str += \"!MC1;\\n\" // turn motor on\n   //\n   // follow segments\n   //\n   for (var seg = 0; seg < mod.path.length; ++seg) {\n      //\n      // move up to starting point\n      //\n      x = xoffset+scale*mod.path[seg][0][0]\n      y = yoffset+scale*mod.path[seg][0][1]\n      str += \"PU\"+x.toFixed(0)+\",\"+y.toFixed(0)+\";\\n\"\n      //\n      // move down\n      //\n      z = zoffset+scale*mod.path[seg][0][2]\n      str += \"Z\"+x.toFixed(0)+\",\"+y.toFixed(0)+\",\"+z.toFixed(0)+\";\\n\"\n      for (var pt = 1; pt < mod.path[seg].length; ++pt) {\n         //\n         // move to next point\n         //\n         x = xoffset+scale*mod.path[seg][pt][0]\n         y = yoffset+scale*mod.path[seg][pt][1]\n         z = zoffset+scale*mod.path[seg][pt][2]\n         str += \"Z\"+x.toFixed(0)+\",\"+y.toFixed(0)+\",\"+z.toFixed(0)+\";\\n\"\n         }\n      //\n      // move up\n      //\n      str += \"PU\"+x.toFixed(0)+\",\"+y.toFixed(0)+\";\\n\"\n      }\n   //\n   // turn off motor and move back\n   //\n   var xhome = mod.units*parseFloat(mod.hx.value)\n   var yhome = mod.units*parseFloat(mod.hy.value)\n   var zhome = mod.units*parseFloat(mod.hz.value)\n   str += \"PA;PA;!PZ0,\"+zhome+\";PU\"+xhome+\",\"+yhome+\";!MC0;\"\n   //\n   // output string\n   //\n   var obj = {}\n   obj.type = 'file'\n   obj.name = mod.name+'.rml'\n   obj.contents = str\n   outputs.file.event(obj)\n   }\n//\n// return values\n//\nreturn ({\n   name:name,\n   init:init,\n   inputs:inputs,\n   outputs:outputs,\n   interface:interface\n   })\n}())\n","top":"105","left":"118","inputs":{},"outputs":{}},"0.7834289556361769":{"definition":"//\n// serial server module\n//\n// Neil Gershenfeld \n// (c) Massachusetts Institute of Technology 2016\n// \n// This work may be reproduced, modified, distributed, performed, and \n// displayed for any purpose, but must acknowledge the mods\n// project. Copyright is retained and must be preserved. The work is \n// provided as is; no warranty is provided, and users accept all \n// liability.\n//\n// closure\n//\n(function(){\n//\n// module globals\n//\nvar mod = {}\n//\n// name\n//\nvar name = 'WebSocket serial'\n//\n// initialization\n//\nvar init = function() {\n   mod.address.value = '127.0.0.1'\n   mod.port.value = 1234\n   mod.device.value = 'ttyUSB0'\n   mod.baud.value = 9600\n   mod.flow_rtscts.checked = true\n   mod.socket = null\n   socket_open()\n   }\n//\n// inputs\n//\nvar inputs = {\n   transmit:{type:'string',\n      event:function(evt){\n         serial_send_string(evt.detail)\n         }\n      },\n   file:{type:'object',\n      event:function(evt){\n         if (evt.detail.type == 'command') {\n            mod.command = evt.detail\n            socket_send(JSON.stringify(mod.command))\n            }\n         else if (evt.detail.type == 'file') {\n            mod.job = evt.detail\n            mod.job.type = 'file'\n            mod.label.nodeValue = 'send file'\n            mod.labelspan.style.fontWeight = 'bold'\n            }\n         }}}\n//\n// outputs\n//\nvar outputs = {\n   receive:{type:'character',\n      event:function(str){\n         mods.output(mod,'receive',str)}}}\n//\n\n//\n// interface\n//\nvar interface = function(div){\n   mod.div = div\n   //\n   // server\n   //\n   var a = document.createElement('a')\n      a.href = './js/serialserver.js'\n      a.innerHTML = 'serialserver:'\n      a.target = '_blank'\n   div.appendChild(a)\n   div.appendChild(document.createElement('br'))\n   //\n   // open/close\n   //\n   var btn = document.createElement('button')\n      btn.style.margin = 1\n      btn.appendChild(document.createTextNode('open'))\n      btn.addEventListener('click',function() {\n         socket_open()\n         })\n      div.appendChild(btn)\n   var btn = document.createElement('button')\n      btn.style.margin = 1\n      btn.appendChild(document.createTextNode('close'))\n      btn.addEventListener('click',function() {\n         socket_close()\n         })\n      div.appendChild(btn)\n   div.appendChild(document.createElement('br'))\n   //\n   // address\n   //\n   div.appendChild(document.createTextNode('address: '))\n   input = document.createElement('input')\n      input.type = 'text'\n      input.size = 10\n      div.appendChild(input)\n      mod.address = input\n   div.appendChild(document.createElement('br'))\n   //\n   // port\n   //\n   div.appendChild(document.createTextNode('\\u00a0\\u00a0\\u00a0\\u00a0\\u00a0port: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 10\n      div.appendChild(input)\n      mod.port = input\n   div.appendChild(document.createElement('br'))\n   //\n   // status\n   //\n   div.appendChild(document.createTextNode('\\u00a0\\u00a0status: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 10\n      div.appendChild(input)\n      mod.status = input\n   div.appendChild(document.createElement('br'))\n   //\n   // serial\n   //\n   div.appendChild(document.createTextNode('serial device:'))\n   div.appendChild(document.createElement('br'))\n   //\n   // open/close\n   //\n   var btn = document.createElement('button')\n      btn.style.margin = 1\n      btn.appendChild(document.createTextNode('open'))\n      btn.addEventListener('click',function() {\n         serial_open()\n         })\n      div.appendChild(btn)\n   var btn = document.createElement('button')\n      btn.style.margin = 1\n      btn.appendChild(document.createTextNode('close'))\n      btn.addEventListener('click',function() {\n         serial_close()\n         })\n      div.appendChild(btn)\n   div.appendChild(document.createElement('br'))\n   //\n   // device\n   //\n   div.appendChild(document.createTextNode('/dev/'))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 10\n      div.appendChild(input)\n      mod.device = input\n   div.appendChild(document.createElement('br'))   \n   //\n   // baud rate\n   //\n   div.appendChild(document.createTextNode('baud rate:'))\n   div.appendChild(document.createElement('br'))   \n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 10\n      div.appendChild(input)\n      mod.baud = input\n   div.appendChild(document.createElement('br'))   \n   //\n   // flow control\n   //\n   div.appendChild(document.createTextNode('flow control:'))\n   div.appendChild(document.createElement('br'))   \n   var input = document.createElement('input')\n      input.type = 'radio'\n      input.name = mod.div.id+'flow'\n      input.id = mod.div.id+'flow_none'\n      div.appendChild(input)\n      mod.flow_none = input\n   div.appendChild(document.createTextNode('none\\u00A0\\u00A0\\u00A0\\u00A0'))\n   div.appendChild(document.createElement('br'))   \n   var input = document.createElement('input')\n      input.type = 'radio'\n      input.name = mod.div.id+'flow'\n      input.id = mod.div.id+'flow_rtscts'\n      div.appendChild(input)\n      mod.flow_rtscts = input\n   div.appendChild(document.createTextNode('RTSCTS'))\n   div.appendChild(document.createElement('br'))   \n   var input = document.createElement('input')\n      input.type = 'radio'\n      input.name = mod.div.id+'flow'\n      input.id = mod.div.id+'flow_dsrdtr'\n      div.appendChild(input)\n      input.disabled = true\n      mod.flow_dsrdtr = input\n   div.appendChild(document.createTextNode('DSRDTR'))\n   div.appendChild(document.createElement('br'))   \n   //\n   // file button\n   //\n   var btn = document.createElement('button')\n      btn.style.padding = mods.ui.padding\n      btn.style.margin = 1\n      var span = document.createElement('span')\n         var text = document.createTextNode('waiting for file')\n            mod.label = text\n            span.appendChild(text)\n         mod.labelspan = span\n         btn.appendChild(span)\n      btn.addEventListener('click',function(){\n         if (mod.socket == null) {\n            mod.status.value = \"can't send, not open\"\n            }\n         else if (mod.label.nodeValue == 'send file') {\n            socket_send(JSON.stringify(mod.job))\n            mod.label.nodeValue = 'cancel'\n            }\n         else if (mod.label.nodeValue == 'cancel') {\n            mod.command = {}\n            mod.command.type = 'cancel'\n            socket_send(JSON.stringify(mod.command))\n            }\n         })\n      div.appendChild(btn)\n   }\n//\n// local functions\n//\nfunction socket_open() {\n   var url = \"ws://\"+mod.address.value+':'+mod.port.value\n   mod.socket = new WebSocket(url)\n   mod.socket.onopen = function(event) {\n      mod.status.value = \"socket opened\"\n      serial_open()\n      }\n   mod.socket.onerror = function(event) {\n      mod.status.value = \"can not open\"\n      mod.socket = null\n      }\n   mod.socket.onmessage = function(event) {\n      mod.status.value = event.data\n      outputs.receive.event(event.data)\n      if ((event.data == 'done') || (event.data == 'cancel') || (event.data.slice(0,5) == 'error')) {\n         mod.label.nodeValue = 'waiting for file'\n         mod.labelspan.style.fontWeight = 'normal'\n         }\n      }\n   }\nfunction socket_close() {\n   mod.socket.close()\n   mod.status.value = \"socket closed\"\n   mod.socket = null\n   }\nfunction socket_send(msg) {\n   if (mod.socket != null) {\n      mod.status.value = \"send\"\n      mod.socket.send(msg)\n      }\n   else {\n      mod.status.value = \"can't send, not open\"\n      }\n   }\nfunction serial_open() {\n   if (mod.socket == null) {\n      mod.status.value = \"socket not open\"\n      }\n   else {\n      var msg = {}\n      msg.type = 'open'\n      msg.device = '/dev/'+mod.device.value\n      msg.baud = mod.baud.value\n      if (mod.flow_none.checked)\n         msg.flow = 'none'\n      else if (mod.flow_rtscts.checked)\n         msg.flow = 'rtscts'\n      else if (mod.flow_dsrdtr.checked)\n         msg.flow = 'dsrdtr'\n      mod.socket.send(JSON.stringify(msg))\n      }\n   }\nfunction serial_close() {\n   if (mod.socket == null) {\n      mod.status.value = \"socket not open\"\n      }\n   else {\n      var msg = {}\n      msg.type = 'close'\n      msg.device = '/dev/'+mod.device.value\n      mod.socket.send(JSON.stringify(msg))\n      }\n   }\nfunction serial_send_string(str) {\n   if (mod.socket == null) {\n      mod.status.value = \"socket not open\"\n      }\n   else {\n      var msg = {}\n      msg.type = 'string'\n      msg.string = str\n      mod.socket.send(JSON.stringify(msg))\n      mod.status.value = 'transmit'\n      }\n   }\n//\n// return values\n//\nreturn ({\n   name:name,\n   init:init,\n   inputs:inputs,\n   outputs:outputs,\n   interface:interface\n   })\n}())\n","top":"91","left":"707","inputs":{},"outputs":{}}},"links":["{\"source\":\"{\\\"id\\\":\\\"0.8677372177580144\\\",\\\"type\\\":\\\"outputs\\\",\\\"name\\\":\\\"file\\\"}\",\"dest\":\"{\\\"id\\\":\\\"0.7834289556361769\\\",\\\"type\\\":\\\"inputs\\\",\\\"name\\\":\\\"file\\\"}\"}"]}